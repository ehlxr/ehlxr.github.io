<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5 分钟搭建 Git 服务器-Gogs</title>
    <url>/2016/09/06/gogs-installation-introduction/</url>
    <content><![CDATA[<blockquote>
<p>Gogs 基于 Go 语言的自助 Git 服务。它具有易安装、跨平台、轻量级、开源化等特性…</p>
</blockquote>
<!-- ![][1] -->
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/gogs-logo.png" class="" width="150">

<p>最近新到一家公司，发现在使用 Gogs 搭建 Git 服务，遂研究了一下，和前段时间研究的 GitLab 做了一个简单的对比，虽然 Gogs 相对与 GitLab 还比较年轻，也许没有 GitLab 强大和稳健，但 Gogs 更加简单易用，而且能够满足正常的工作使用。</p>
<p>Gogs 是轻量级的 Git 服务，正如官方介绍的：一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。最大程度上节省您的服务器资源！关键的一点是免费开源的，所有的代码都开源在 GitHub 上。下面结合官方的介绍，总结一下在 Linux 系统下的安装方法，真的是相当的简单，5 分钟足矣！</p>
<a id="more"></a>

<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h2><p>下载对应系统版本的二进制安装包，并上传至 Linux 系统，或通过以下命令下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/gogits/gogs/releases/download/v0.9.97/linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p><em><a href="https://github.com/gogits/gogs/releases" target="_blank" rel="noopener">Gogs发布版本</a></em></p>
<h2 id="1-2-解压安装包"><a href="#1-2-解压安装包" class="headerlink" title="1.2 解压安装包"></a>1.2 解压安装包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xzvf gogs_v0.9.97_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="1-3-安装"><a href="#1-3-安装" class="headerlink" title="1.3 安装"></a>1.3 安装</h2><p>进入到刚刚解压后的目录执行命令 <code>./gogs web</code>，出现以下信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1fo7tcw90n2j20u307cab3.jpg" alt=""></p>
<h2 id="1-4-配置"><a href="#1-4-配置" class="headerlink" title="1.4 配置"></a>1.4 配置</h2><p>打开浏览器输地址入：<code>http://ip:3000</code>，第一次会出现以下的配置界面，根据实际情况选择即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/Gogs-install.png" alt=""></p>
<h2 id="1-5-完成安装"><a href="#1-5-完成安装" class="headerlink" title="1.5 完成安装"></a>1.5 完成安装</h2><p>之后进入以下界面，表明安装已经完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1fo7tdl9kvrj20xk0r60ub.jpg" alt=""></p>
<h2 id="1-6-后台运行"><a href="#1-6-后台运行" class="headerlink" title="1.6 后台运行"></a>1.6 后台运行</h2><p>后台运行可参考以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nohup ./gogs web &gt; nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><p>引用自官方<a href="https://gogs.io/docs/upgrade/upgrade_from_binary" target="_blank" rel="noopener">二级制升级文档</a></p>
<h2 id="2-1-首先，确认当前安装的位置："><a href="#2-1-首先，确认当前安装的位置：" class="headerlink" title="2.1 首先，确认当前安装的位置："></a>2.1 首先，确认当前安装的位置：</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认位置在 git 用户下的家目录</span></span><br><span class="line">$ sudo su - git</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/git</span><br><span class="line">$ ls</span><br><span class="line">gogs gogs-repositories</span><br></pre></td></tr></table></figure>

<h2 id="2-2-然后将当前目录移动到另一个临时的位置，但不是删除！"><a href="#2-2-然后将当前目录移动到另一个临时的位置，但不是删除！" class="headerlink" title="2.2 然后将当前目录移动到另一个临时的位置，但不是删除！"></a>2.2 然后将当前目录移动到另一个临时的位置，但不是删除！</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mv gogs gogs_old</span><br></pre></td></tr></table></figure>

<h2 id="2-3-下载并解压新的二进制："><a href="#2-3-下载并解压新的二进制：" class="headerlink" title="2.3 下载并解压新的二进制："></a>2.3 下载并解压新的二进制：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请根据系统和类型获取相应的二进制版本</span></span><br><span class="line">$ wget https://dl.gogs.io/gogs_v<span class="variable">$VERSION_</span><span class="variable">$OS_</span><span class="variable">$ARCH</span>.tar.gz</span><br><span class="line">$ tar -zxvf gogs_v<span class="variable">$VERSION_</span><span class="variable">$OS_</span><span class="variable">$ARCH</span>.tar.gz</span><br><span class="line">$ ls</span><br><span class="line">gogs gogs_old  gogs-repositories gogs_v<span class="variable">$VERSION_</span><span class="variable">$OS_</span><span class="variable">$ARCH</span>.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="2-4-复制-custom、data-和-log-目录到新解压的目录中："><a href="#2-4-复制-custom、data-和-log-目录到新解压的目录中：" class="headerlink" title="2.4 复制 custom、data 和 log 目录到新解压的目录中："></a>2.4 复制 <code>custom</code>、<code>data</code> 和 <code>log</code> 目录到新解压的目录中：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp -R gogs_old/custom gogs</span><br><span class="line">$ cp -R gogs_old/data gogs</span><br><span class="line">$ cp -R gogs_old/<span class="built_in">log</span> gogs</span><br></pre></td></tr></table></figure>

<h2 id="2-5-最后，运行并打开浏览器进行测试："><a href="#2-5-最后，运行并打开浏览器进行测试：" class="headerlink" title="2.5 最后，运行并打开浏览器进行测试："></a>2.5 最后，运行并打开浏览器进行测试：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gogs</span><br><span class="line">$ ./gogs web</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Gogs</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装 Node.js</title>
    <url>/2016/07/30/CentOS-7-%E5%AE%89%E8%A3%85-Node-js/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</a></p>
</blockquote>
<h1 id="1-下载源码安装文件"><a href="#1-下载源码安装文件" class="headerlink" title="1. 下载源码安装文件"></a>1. 下载源码安装文件</h1><h2 id="1-1-在线安装"><a href="#1-1-在线安装" class="headerlink" title="1.1 在线安装"></a>1.1 在线安装</h2><p>通过以下命令下载源文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v4.4.7/node-v4.4.7.tar.gz</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="1-2-离线安装"><a href="#1-2-离线安装" class="headerlink" title="1.2 离线安装"></a>1.2 离线安装</h2><p>如果网络不好，可以通过<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官方网站</a>下载，然后上传到 CentOS 系统中，下载如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160730163835.png" alt=""></p>
<p>我这儿官方网站是无法正常访问的，需要一些手段（大家懂得），所以在网盘备份一份，地址：<a href="http://pan.baidu.com/s/1bpIAUAz" target="_blank" rel="noopener">http://pan.baidu.com/s/1bpIAUAz</a></p>
<h1 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2. 编译安装"></a>2. 编译安装</h1><h2 id="2-1-解压文件到指定的目录"><a href="#2-1-解压文件到指定的目录" class="headerlink" title="2.1 解压文件到指定的目录"></a>2.1 解压文件到指定的目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf node-v4.4.7.tar.gz -C app/</span><br></pre></td></tr></table></figure>

<h2 id="2-2-安装依赖包"><a href="#2-2-安装依赖包" class="headerlink" title="2.2 安装依赖包"></a>2.2 安装依赖包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure>

<h2 id="2-3-配置安装"><a href="#2-3-配置安装" class="headerlink" title="2.3 配置安装"></a>2.3 配置安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>./configure 是源代码安装的第一步，主要的作用是对即将安装的软件进行配置，检查当前的环境是否满足要安装软件的依赖关系，生成 makefile文件，以便你可以用 make 和 make install 来编译和安装程序。</p>
<h2 id="2-4-编译安装"><a href="#2-4-编译安装" class="headerlink" title="2.4 编译安装"></a>2.4 编译安装</h2><p>编译命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>编译的过程会花很长一段时间，等编译完成再执行安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<h1 id="3-检查安装"><a href="#3-检查安装" class="headerlink" title="3. 检查安装"></a>3. 检查安装</h1><p>运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure>

<p>若输出对应的版本号，则安装成功。</p>
<h1 id="4-设置-npm-淘宝镜像"><a href="#4-设置-npm-淘宝镜像" class="headerlink" title="4. 设置 npm 淘宝镜像"></a>4. 设置 npm 淘宝镜像</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm info underscore</span><br></pre></td></tr></table></figure>

<p>如果配置成功，第二步会有字符串返回</p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Node.js</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装Python3、pip3</title>
    <url>/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/</url>
    <content><![CDATA[<p>CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。</p>
<h1 id="一、安装-Python-3"><a href="#一、安装-Python-3" class="headerlink" title="一、安装 Python 3"></a>一、安装 Python 3</h1><h2 id="1-1-安装准备"><a href="#1-1-安装准备" class="headerlink" title="1.1 安装准备"></a>1.1 安装准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir /usr/<span class="built_in">local</span>/python3 <span class="comment"># 创建安装目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Python 源文件</span></span><br><span class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</span><br><span class="line"><span class="comment"># 注意：wget获取https的时候要加上：--no-check-certificate</span></span><br><span class="line"></span><br><span class="line">$ tar -xzvf Python-3.6.0.tgz <span class="comment"># 解压缩包</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> Python-3.6.0 <span class="comment"># 进入解压目录</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2-编译安装"><a href="#1-2-编译安装" class="headerlink" title="1.2 编译安装"></a>1.2 编译安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ./configure --prefix=/usr/<span class="built_in">local</span>/python3 <span class="comment"># 指定创建的目录</span></span><br><span class="line"></span><br><span class="line">$ sudo make</span><br><span class="line"></span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<h2 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h2><h3 id="1-3-1-两个版本共存"><a href="#1-3-1-两个版本共存" class="headerlink" title="1.3.1 两个版本共存"></a>1.3.1 两个版本共存</h3><p>创建 python3 的软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure>

<p>这样就可以通过 <code>python</code> 命令使用 Python 2，<code>python3</code> 来使用 Python 3。</p>
<h3 id="1-3-2-修改默认为-Python-3"><a href="#1-3-2-修改默认为-Python-3" class="headerlink" title="1.3.2 修改默认为 Python 3"></a>1.3.2 修改默认为 Python 3</h3><p>将 <code>/usr/bin</code> 中的 <code>python</code> 备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mv python python.bak</span><br></pre></td></tr></table></figure>

<p>然后创建 python3 的软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>

<p>这样默认的 Python 版本就替换为 Python 3 了。</p>
<p>因为 yum 使用 Python 2，因此替换为 Python 3 后可能无法正常工作，因此修改 yum 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /usr/bin/yum</span><br></pre></td></tr></table></figure>

<p>将第一行指定的 python 版本改为 python2.7（<code>#!/usr/bin/python</code> 改为 <code>#!/usr/bin/python2.7</code>）</p>
<h1 id="二、安装-pip"><a href="#二、安装-pip" class="headerlink" title="二、安装 pip"></a>二、安装 pip</h1><h2 id="2-1-yum-安装"><a href="#2-1-yum-安装" class="headerlink" title="2.1 yum 安装"></a>2.1 yum 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先安装 epel 扩展源</span></span><br><span class="line">$ sudo yum -y install epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python-pip</span></span><br><span class="line">$ sudo yum -y install python-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除 cache</span></span><br><span class="line">$ sudo yum clean all</span><br></pre></td></tr></table></figure>

<p>通过这种方式貌似只能安装 pip2，想要安装 Python 3 的 pip，可以通过以下的源代码安装方式。</p>
<h2 id="2-2-源码安装"><a href="#2-2-源码安装" class="headerlink" title="2.2 源码安装"></a>2.2 源码安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源代码</span></span><br><span class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar -zvxf 9.0.1 -C pip-9.0.1    <span class="comment"># 解压文件</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> pip-9.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Python 3 安装</span></span><br><span class="line">$ python3 setup.py install</span><br></pre></td></tr></table></figure>

<p>创建链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure>

<h2 id="2-3-升级-pip"><a href="#2-3-升级-pip" class="headerlink" title="2.3 升级 pip"></a>2.3 升级 pip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装最新的 Git</title>
    <url>/2016/07/30/CentOS-7-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84-Git/</url>
    <content><![CDATA[<blockquote>
<p>yum 源仓库里的 Git 版本更新不及时，最新版本的 Git 是 1.8.3.1，但是官方最新版本已经到了 2.9.2。想要安装最新版本的的 Git，只能下载源码进行安装。</p>
</blockquote>
<h1 id="1-查看-yum-源仓库的-Git-信息："><a href="#1-查看-yum-源仓库的-Git-信息：" class="headerlink" title="1. 查看 yum 源仓库的 Git 信息："></a>1. 查看 yum 源仓库的 Git 信息：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum info git</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160730222608.png" alt=""></p>
<p>可以看出，截至目前，yum 源仓库中最新的 Git 版本才 1.8.3.1，而查看最<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">新的 Git 发布版本</a>，已经 2.9.2 了。</p>
<a id="more"></a>

<h1 id="2-依赖库安装"><a href="#2-依赖库安装" class="headerlink" title="2. 依赖库安装"></a>2. 依赖库安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span></span><br><span class="line"><span class="comment"># yum install  gcc perl-ExtUtils-MakeMaker</span></span><br></pre></td></tr></table></figure>

<h1 id="3-卸载低版本的-Git"><a href="#3-卸载低版本的-Git" class="headerlink" title="3. 卸载低版本的 Git"></a>3. 卸载低版本的 Git</h1><p>通过命令：<code>git –-version</code> 查看系统带的版本，Git 版本是： <code>1.8.3.1</code>，所以先要卸载低版本的 Git，命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum remove git</span></span><br></pre></td></tr></table></figure>

<h1 id="4-下载新版的-Git-源码包"><a href="#4-下载新版的-Git-源码包" class="headerlink" title="4. 下载新版的 Git 源码包"></a>4. 下载新版的 Git 源码包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/git/git/archive/v2.9.2.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>也可以离线下载，然后传到 CentOS 系统中指定的目录下。</p>
<h1 id="5-解压到指定目录"><a href="#5-解压到指定目录" class="headerlink" title="5. 解压到指定目录"></a>5. 解压到指定目录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -xzvf v2.9.2.tar.gz -C ~/app/</span></span><br></pre></td></tr></table></figure>

<h1 id="6-安装-Git"><a href="#6-安装-Git" class="headerlink" title="6. 安装 Git"></a>6. 安装 Git</h1><p>分别执行以下命令进行编译安装，编译过程可能比较漫长，请耐心等待完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd git-2.9.2</span></span><br><span class="line"><span class="comment"># make prefix=/usr/local/git all</span></span><br><span class="line"><span class="comment"># make prefix=/usr/local/git install</span></span><br></pre></td></tr></table></figure>

<h1 id="7-添加到环境变量"><a href="#7-添加到环境变量" class="headerlink" title="7. 添加到环境变量"></a>7. 添加到环境变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo "export PATH=$PATH:/usr/local/git/bin" &gt;&gt; /etc/bashrc</span></span><br><span class="line"><span class="comment"># source /etc/bashrc # 实时生效</span></span><br></pre></td></tr></table></figure>

<h1 id="8-查看版本号"><a href="#8-查看版本号" class="headerlink" title="8. 查看版本号"></a>8. 查看版本号</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git --version</span></span><br><span class="line">git version 2.9.2</span><br></pre></td></tr></table></figure>

<p>至此，CentOS 就安装上了最新版本的 Git。</p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 中配置 Git 命令自动补全</title>
    <url>/2016/09/04/CentOS-%E4%B8%AD%E9%85%8D%E7%BD%AE-Git-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    <content><![CDATA[<h1 id="1-Step-1"><a href="#1-Step-1" class="headerlink" title="1. Step 1"></a>1. Step 1</h1><p>保存以下文件的内容为：<code>git-completion.bash</code></p>
<p><a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash" target="_blank" rel="noopener">git-completion.bash</a></p>
<h1 id="2-Step-2"><a href="#2-Step-2" class="headerlink" title="2.  Step 2"></a>2.  Step 2</h1><p>将上述文件 <code>git-completion.bash</code> copy 至个人 <code>home</code> 目录，可设为隐藏文件以免后续被误删。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp git-completion.bash ~/.git-completion.bash</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h1><p>编辑环境变量文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>在最后加入下面内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.git-completion.bash</span><br></pre></td></tr></table></figure>

<p>完成以上步骤后，重启 <code>shell</code>，就可以通过 <code>tab</code> 键自动补全 <code>Git</code> 命令了。</p>
<hr>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装 Nginx</title>
    <url>/2016/12/23/CentOS-%E5%AE%89%E8%A3%85-Nginx/</url>
    <content><![CDATA[<h1 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h1><p>首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install gcc-c++</span><br><span class="line">$ yum install pcre pcre-devel</span><br><span class="line">$ yum install zlib zlib-devel</span><br><span class="line">$ yum install openssl openssl--devel</span><br></pre></td></tr></table></figure>

<h1 id="二、安装-Nginx"><a href="#二、安装-Nginx" class="headerlink" title="二、安装 Nginx"></a>二、安装 Nginx</h1><p>安装之前，最好检查一下是否已经安装有 Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find -name nginx</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果系统已经安装了 Nginx，那么就先卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove nginx</span><br></pre></td></tr></table></figure>

<p>首先进入 /usr/local 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<p>从官网下载最新版的 Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.9.6.tar.gz</span><br><span class="line">$ tar -zxvf nginx-1.9.6.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.9.6</span><br></pre></td></tr></table></figure>

<p>接下来安装，使用 <code>--prefix</code> 参数指定 Nginx 安装的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx <span class="comment"># 指定 Nginx 安装的目录 /usr/local/nginx</span></span><br><span class="line">$ make prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">$ make install prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure>

<p>如果没有报错，顺利完成后，最好看一下 nginx 的安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whereis nginx</span><br></pre></td></tr></table></figure>
<p>安装完毕后，进入安装后目录（/usr/local/nginx）便可以启动或停止它了。</p>
<h1 id="二、基本操作命令"><a href="#二、基本操作命令" class="headerlink" title="二、基本操作命令"></a>二、基本操作命令</h1><h2 id="2-1-启动命令"><a href="#2-1-启动命令" class="headerlink" title="2.1 启动命令"></a>2.1 启动命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<h2 id="2-2-重启命令"><a href="#2-2-重启命令" class="headerlink" title="2.2 重启命令"></a>2.2 重启命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure>

<h2 id="2-3-停止命令"><a href="#2-3-停止命令" class="headerlink" title="2.3 停止命令"></a>2.3 停止命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf  -s stop</span><br></pre></td></tr></table></figure>

<p><code>-c</code> 制定配置文件的路径，如果不加 Nginx 会自动加载默认路径的配置文件。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装 rar、zip 解压缩</title>
    <url>/2016/12/22/CentOS-%E5%AE%89%E8%A3%85-rar%E3%80%81zip-%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。</p>
<h1 id="一、rar-安装使用"><a href="#一、rar-安装使用" class="headerlink" title="一、rar 安装使用"></a>一、rar 安装使用</h1><p>Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：<a href="http://www.rarsoft.com/download.htm。" target="_blank" rel="noopener">http://www.rarsoft.com/download.htm。</a></p>
<h2 id="1-1-下载系统对应的版本"><a href="#1-1-下载系统对应的版本" class="headerlink" title="1.1 下载系统对应的版本"></a>1.1 下载系统对应的版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="1-2-解压、安装"><a href="#1-2-解压、安装" class="headerlink" title="1.2 解压、安装"></a>1.2 解压、安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf rarlinux-x64-5.4.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> rar</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>看见下面这些信息就是安装成功了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/bin</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/lib</span><br><span class="line">cp rar unrar /usr/<span class="built_in">local</span>/bin</span><br><span class="line">cp rarfiles.lst /etc</span><br><span class="line">cp default.sfx /usr/<span class="built_in">local</span>/lib</span><br></pre></td></tr></table></figure>

<h2 id="1-3-常用-rar-命令"><a href="#1-3-常用-rar-命令" class="headerlink" title="1.3 常用 rar 命令"></a>1.3 常用 rar 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rar x centos.rar <span class="comment"># 解压 centos.rar 到当前目录</span></span><br><span class="line">$ rar centos.rar ./piaoyi.org/ <span class="comment"># 将 piaoyi.org 目录打包为 centos.rar</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-常见错误原因分析"><a href="#1-4-常见错误原因分析" class="headerlink" title="1.4 常见错误原因分析"></a>1.4 常见错误原因分析</h2><h3 id="1-4-1-如果在运行命令-rar-时-出现下面这个问题"><a href="#1-4-1-如果在运行命令-rar-时-出现下面这个问题" class="headerlink" title="1.4.1 如果在运行命令 rar 时,出现下面这个问题"></a>1.4.1 如果在运行命令 rar 时,出现下面这个问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rar: /lib/i686/nosegneg/libc.so.6: version <span class="string">'GLIBC_2.7'</span> not found (required by rar)</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp rar_static /usr/<span class="built_in">local</span>/bin/rar</span><br></pre></td></tr></table></figure>

<h3 id="1-4-2-使用-rar-的时候出现错误"><a href="#1-4-2-使用-rar-的时候出现错误" class="headerlink" title="1.4.2 使用 rar 的时候出现错误"></a>1.4.2 使用 rar 的时候出现错误</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash: /usr/<span class="built_in">local</span>/bin/rar: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</span><br></pre></td></tr></table></figure>

<p>因为 64 位系统中安装了 32 位程序，解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install glibc.i686</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-重新安装-glibc-i686-以后还有如下类似错误"><a href="#1-4-3-重新安装-glibc-i686-以后还有如下类似错误" class="headerlink" title="1.4.3 重新安装 glibc.i686 以后还有如下类似错误"></a>1.4.3 重新安装 glibc.i686 以后还有如下类似错误</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error <span class="keyword">while</span> loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>再继续安装包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install libstdc++.so.6</span><br></pre></td></tr></table></figure>

<h1 id="二、zip-unzip-安装使用"><a href="#二、zip-unzip-安装使用" class="headerlink" title="二、zip/unzip 安装使用"></a>二、zip/unzip 安装使用</h1><h2 id="2-1-检查是否有包含-zip（unzip）-的软件包"><a href="#2-1-检查是否有包含-zip（unzip）-的软件包" class="headerlink" title="2.1 检查是否有包含 zip（unzip） 的软件包"></a>2.1 检查是否有包含 zip（unzip） 的软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum provides zip</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cqu.edu.cn</span><br><span class="line"> * extras: mirrors.cqu.edu.cn</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</span><br><span class="line">Repo        : base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</span><br><span class="line">Repo        : @base</span><br></pre></td></tr></table></figure>

<h2 id="2-2-安装-zip、unzip"><a href="#2-2-安装-zip、unzip" class="headerlink" title="2.2 安装 zip、unzip"></a>2.2 安装 zip、unzip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install zip</span><br><span class="line">$ yum install unzip</span><br></pre></td></tr></table></figure>

<h2 id="2-3-常用命令"><a href="#2-3-常用命令" class="headerlink" title="2.3 常用命令"></a>2.3 常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zip -r myfile.zip ./*</span><br><span class="line"><span class="comment"># 将当前目录下的所有文件和文件夹全部压缩成 myfile.zip 文件，-r 表示递归压缩子目录下所有文件.</span></span><br><span class="line"></span><br><span class="line">$ unzip -o -d /home/sunny myfile.zip</span><br><span class="line"><span class="comment"># 把 myfile.zip 文件解压到 /home/sunny/</span></span><br><span class="line"><span class="comment"># -o ：不提示的情况下覆盖文件</span></span><br><span class="line"><span class="comment"># -d：将文件解压缩到指定目录下</span></span><br><span class="line"></span><br><span class="line">$ zip -d myfile.zip smart.txt</span><br><span class="line"><span class="comment"># 删除压缩文件中 smart.txt 文件</span></span><br><span class="line"></span><br><span class="line">$ zip -m myfile.zip ./rpm_info.txt</span><br><span class="line"><span class="comment"># 向压缩文件中 myfile.zip 中添加 rpm_info.txt 文件</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>rar</tag>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 系统下 GitLab 搭建与基本配置</title>
    <url>/2016/07/31/CentOS-%E7%B3%BB%E7%BB%9F%E4%B8%8B-GitLab-%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab 是一个开源的版本管理系统，提供了类似于 GitHub 的源代码浏览，管理缺陷和注释等功能，你可以将代码免费托管到 GitLab.com，而且不限项目数量和成员数。最吸引人的一点是，可以在自己的服务器上搭建 GitLab CE （社区免费版）版本，方便内部团队协作开发和代码管理。</a></p>
</blockquote>
<p>下面介绍如何在 CentOS 服务器上搭建 GitLab CE 版本，以及一些基本的配置。</p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>GitLab 提供了两种安装方式：源码手动编译安装和软件包管理安装。</p>
<p>源码手动编译安装虽然配置灵活，但过程比较麻烦，不容易安装成功，所以我这里选择软件包管理安装的形式。</p>
<h2 id="1-1-使用-GitLab-提供仓库在线安装"><a href="#1-1-使用-GitLab-提供仓库在线安装" class="headerlink" title="1.1 使用 GitLab 提供仓库在线安装"></a>1.1 使用 GitLab 提供仓库在线安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br><span class="line">yum install gitlab-ce</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>国外的 GitLab 仓库访问速度较慢，可以使用国内的站点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash</span><br><span class="line">yum install gitlab-ce</span><br></pre></td></tr></table></figure>

<h2 id="1-2-下载离线软件包安装"><a href="#1-2-下载离线软件包安装" class="headerlink" title="1.2 下载离线软件包安装"></a>1.2 下载离线软件包安装</h2><p>如果网络速度不理想，可以使用离线软件包 rpm 的方式进行安装，下面提供了几个站点的下载地址。</p>
<ul>
<li>GitLab 官方：<a href="https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms" target="_blank" rel="noopener">https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms</a></li>
<li>清华大学TUNA开源镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></li>
<li>浙大开源镜像站：<a href="http://mirrors.lifetoy.org/gitlab-ce/yum/el7/" target="_blank" rel="noopener">http://mirrors.lifetoy.org/gitlab-ce/yum/el7/</a></li>
</ul>
<p>下载好 rpm 软件安装包后上传到服务器指定的目录下，通过以下命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh　gitlab-ce-8.9.6-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>记录一下 rpm 卸载软件安装包命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps gitlab-ce-8.9.6-ce.0.el7.x86_64</span><br></pre></td></tr></table></figure>

<h1 id="2-启动-GitLab"><a href="#2-启动-GitLab" class="headerlink" title="2. 启动 GitLab"></a>2. 启动 GitLab</h1><p>安装完成之后，打开配置文件 <code>/etc/gitlab/gitlab.rb</code> 将 <code>external_url = &#39;http://git.example.com&#39;</code> 修改为自己的 IP 地址：<code>external_url &#39;http://ip_address&#39;</code> ，然后执行下面的命令，对 GitLab 进行编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>完成后，使用浏览器访问：<a href="http://ip_address" target="_blank" rel="noopener">http://ip_address</a> 可进入 GitLab 登录页面，首次访问系统会让你重新设置管理员的密码，默认的管理员账号是 root，如果你想更改默认管理员账号，登录系统后可以修改帐号名。</p>
<h1 id="3-GitLab-基本配置"><a href="#3-GitLab-基本配置" class="headerlink" title="3. GitLab 基本配置"></a>3. GitLab 基本配置</h1><p>GitLab 的相关参数配置都存在 <code>/etc/gitlab/gitlab.rb</code> 文件里。自 GitLab 7.6 开始的新安装包, 已经默认将所有的参数写入到 <code>/etc/gitlab/gitlab.rb</code> 配置文件中。</p>
<h2 id="3-1-配置端口"><a href="#3-1-配置端口" class="headerlink" title="3.1 配置端口"></a>3.1 配置端口</h2><p>GitLab 默认使用 80 端口对外提供服务，因为 80 端口被其他服务占用，所以需要更改。打开 <code>/etc/gitlab/gitlab.rb</code> 配置文件，修改 <code>external_url &#39;http://ip_address&#39;</code> 为 <code>external_url &#39;http://ip_address:new-port&#39;</code>，</p>
<p>重新编译配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<p>这时候就可以通更改后的 IP + 端口号码进行访问了。</p>
<h2 id="3-2-邮箱配置"><a href="#3-2-邮箱配置" class="headerlink" title="3.2 邮箱配置"></a>3.2 邮箱配置</h2><p>以下是 163 邮箱的配置参考，打开　<code>/etc/gitlab/gitlab.rb</code> 配置文件，添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.163.com"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_port'</span>] = 25</span><br><span class="line">gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"test@163.com"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"password"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">"test@163.com"</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> <code>test@163.com</code> 和 <code>password</code> 更新为自己邮箱地址和密码；邮箱需要开启 SMTP 协议。</p>
<p>重新编译配置即可生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>其它邮箱的配置可参考：<a href="https://doc.gitlab.cc/omnibus/settings/smtp.html" target="_blank" rel="noopener">https://doc.gitlab.cc/omnibus/settings/smtp.html</a></p>
<h2 id="3-3-头像配置"><a href="#3-3-头像配置" class="headerlink" title="3.3 头像配置"></a>3.3 头像配置</h2><p>GitLab 默认使用的是 Gravatar 头像服务，不过现在貌似 Gravatar 国内好像访问不了，导致 GitLab 默认头像破裂，无法显示，可以替换为多说 Gravatar 服务器。打开 <code>/etc/gitlab/gitlab.rb</code> 配置文件，增加下面这一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'gravatar_plain_url'</span>] = <span class="string">'http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon'</span></span><br></pre></td></tr></table></figure>

<p>再分别执行以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-rake cache:clear RAILS_ENV=production</span><br></pre></td></tr></table></figure>

<p>也可以关闭 Gravatar 头像显示配置，登录 GitLab 管理员账户，进入设置界面（路径地址：<code>http://ip:port/admin/application_settings</code> ），取消以下选项即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160731201717.png" alt=""></p>
<h2 id="3-4-用户注册配置"><a href="#3-4-用户注册配置" class="headerlink" title="3.4 用户注册配置"></a>3.4 用户注册配置</h2><p>管理员设置界面（路径地址：<code>http://ip:port/admin/application_settings</code> ）以下选项可以控制用户注册配置，包括是否允许登录、注册和注册邮箱验证等选项。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160731202214.png" alt=""></p>
<h2 id="3-5-常用命令"><a href="#3-5-常用命令" class="headerlink" title="3.5 常用命令"></a>3.5 常用命令</h2><p>GitLab 服务启动、停止、状态查询、修改配置生效等命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl start/stop/status/reconfigure  <span class="comment"># 服务启动、停止、状态查询、修改配置生效</span></span><br></pre></td></tr></table></figure>

<p>也可以查看帮助文档获取更多命令信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>CentOS</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 利用数据卷容器来备份、恢复、迁移数据</title>
    <url>/2017/01/09/Docker-%E5%88%A9%E7%94%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8%E6%9D%A5%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D%E3%80%81%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>在 Docker 容器之间如果需要共享数据，可以创建一个数据卷容器来实现，并且可以方便的通过数据卷容器来备份、恢复、迁移数据。</p>
</blockquote>
<h1 id="创建数据卷容器"><a href="#创建数据卷容器" class="headerlink" title="创建数据卷容器"></a>创建数据卷容器</h1><p>创建一个名为：dbdata 的数据卷容器；设置挂载点为 <code>/vdata</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -d -v /vdata --name dbdata alpine sh</span><br></pre></td></tr></table></figure>

<p>数据卷容器是一个普通的 Docker 容器，可以不需要启动。</p>
<a id="more"></a>
<h1 id="使用数据卷容器"><a href="#使用数据卷容器" class="headerlink" title="使用数据卷容器"></a>使用数据卷容器</h1><p>使用命令 <code>--volumes-from</code> 创建挂载数据卷容器 dbdata 的容器：db1、db2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -it --volumes-from dbdata --name db1 alpine sh</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it --volumes-from dbdata --name db1 alpine sh</span><br></pre></td></tr></table></figure>

<p>在容器 db1 的挂载目录 <code>/vdata</code> 目录下，创建文件 1.txt 等测试数据，查看容器 db2 的挂载目录 <code>/vdata</code> 目录，就可以看到创建的文件数据了。</p>
<h1 id="备份数据卷数据"><a href="#备份数据卷数据" class="headerlink" title="备份数据卷数据"></a>备份数据卷数据</h1><p>使用一个临时容器，完成备份数据容器操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from dbdata -v $(<span class="built_in">pwd</span>):/backup alpine tar cvf /backup/vdata-bak.tar /vdata</span><br></pre></td></tr></table></figure>

<p>使用 <code>tar cvf</code> 命令，备份数据卷容器 dbdata 中的目录 <code>/vdata</code> 为 <code>vdata-bak.tar</code>，并挂载到宿主机的当前目录下。</p>
<h1 id="恢复数据卷数据"><a href="#恢复数据卷数据" class="headerlink" title="恢复数据卷数据"></a>恢复数据卷数据</h1><p>创建数据卷容器：dbdata2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -d -v /vdata --name dbdata2 alpine sh</span><br></pre></td></tr></table></figure>

<p>使用一个临时容器，恢复备份数据 <code>vdata-bak.tar</code> 到 dbdata2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from dbdata2 -v $(<span class="built_in">pwd</span>):/backup alpine tar xvf /backup/vdata-bak.tar</span><br></pre></td></tr></table></figure>

<p>使用一个临时容器，查看 dbdata2 恢复的数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from dbdata2 alpine /bin/ls /vdata</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装 Gitea/Gogs 与主机共享 22 端口</title>
    <url>/2021/01/06/docker-gitea-share-port-22-with-host/</url>
    <content><![CDATA[<p>如果主机的 22 端口已被使用，使用 <code>Docker</code> 安装 <code>Gitea</code> 时只能把容器的 22 端口映射到主机的其它端口（如：10022），这是没有任何问题的。但是以 <code>SSH</code> 方式 <code>clone</code> 项目时，<code>URL</code> 长这样<br><code>ssh://git@git.example.com:10022:username/project.git</code></p>
<p>如果我们想要类似以下这样的 <code>URL</code> 时就需要把 <code>Gitea</code> 容器的和主机共享 22 端口<br><code>git@git.example.com:username/project.git</code></p>
<p>下面总结一下使用 <code>Docker</code> 安装 <code>Gitea</code> 共享主机 22 端口的主要步骤，<code>Gogs</code> 应该是同理。</p>
<h3 id="创建-git-用户"><a href="#创建-git-用户" class="headerlink" title="创建 git 用户"></a>创建 git 用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create git user</span></span><br><span class="line">adduser git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure user has UID and GID 1000</span></span><br><span class="line">usermod -u 1000 -g 1000 git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create docker group</span></span><br><span class="line">groupadd docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add git user to docker group</span></span><br><span class="line">usermod -aG docker git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the gitea data directory</span></span><br><span class="line"></span><br><span class="line">mkdir -p /home/git/gitea/data</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="安装-Gitea"><a href="#安装-Gitea" class="headerlink" title="安装 Gitea"></a>安装 Gitea</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /home/git/gitea/data:/data --restart=always gitea/gitea:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a symlink between the container authorized_keys and the host git user authorized_keys</span></span><br><span class="line">ln -s /home/git/gitea/data/git/.ssh /home/git/</span><br></pre></td></tr></table></figure>

<h3 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u git ssh-keygen -t rsa -b 4096 -C <span class="string">"Gitea Host Key"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty <span class="variable">$(cat /home/git/.ssh/id_rsa.pub)</span>"</span> &gt;&gt; /home/git/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h3 id="配置-SSH-passthrough"><a href="#配置-SSH-passthrough" class="headerlink" title="配置 SSH passthrough"></a>配置 SSH passthrough</h3><p>配置 <code>passthrough</code> 连接到 <code>Gitea</code> 容器的 <code>SSH</code> 映射端口 10022</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /app/gitea/</span><br><span class="line"></span><br><span class="line">cat &gt;/app/gitea/gitea &lt;&lt;<span class="string">'END'</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ssh -p 10022 -o StrictHostKeyChecking=no git@127.0.0.1 \</span><br><span class="line"><span class="string">"SSH_ORIGINAL_COMMAND=\"<span class="variable">$SSH_ORIGINAL_COMMAND</span>\" <span class="variable">$0</span> <span class="variable">$@</span>"</span></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">chmod +x /app/gitea/gitea</span><br></pre></td></tr></table></figure>

<h3 id="Caddy-反向代理配置"><a href="#Caddy-反向代理配置" class="headerlink" title="Caddy 反向代理配置"></a>Caddy 反向代理配置</h3><p>这里使用 <code>Caddy</code> 反向代理配置域名，<code>Caddyfile</code> 配置信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git.example.com &#123;</span><br><span class="line">    encode zstd gzip</span><br><span class="line"></span><br><span class="line">    reverse_proxy localhost:10080</span><br><span class="line">    header &#x2F; Strict-Transport-Security &quot;max-age&#x3D;31536000;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完域名之后，输入域名进行安装，现在就可以修改 【SSH 服务域名】 为 <code>git.example.com</code>，【Gitea 基本 URL】 为 <code>https://git.example.com/</code>，也可以后通过 <code>/home/git/gogs/data/gogs/conf/app.ini</code> 配置文件修改相关配置。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><p>由于 <code>docker</code> 启动容器的默认 <code>uid</code> 和 <code>gid</code> 是 1000，所以 <code>git</code> 用户的 <code>uid</code>、<code>gid</code> 必须为 1000，如果 <code>git</code> 用户的 <code>uid</code> 和 <code>gid</code> 不是 1000（比如：1002），尝试通过 <code>docker run --user 1002:1002</code>、 <code>docker run -e &quot;PUID=1002&quot; -e &quot;PGID=1002&quot;</code> 等方式启动 <code>docker</code> 容器都不管用。</p>
</li>
<li><p>保证 <code>git</code> 用户下的所有文件都属于 <code>git</code> 用户和 <code>git</code> 组</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[git]$ ls -la /home/git/gitea/data</span><br><span class="line">total 20</span><br><span class="line">drwxrwxr-x  5 git git 4096 Jan  5 14:14 .</span><br><span class="line">drwxrwxr-x  3 git git 4096 Jan  5 13:56 ..</span><br><span class="line">drwxr-xr-x  5 git git 4096 Jan  5 14:20 git</span><br><span class="line">drwxr-xr-x 10 git git 4096 Jan  5 14:40 gitea</span><br><span class="line">drwx------  2 git git 4096 Jan  5 14:14 ssh</span><br></pre></td></tr></table></figure>

<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://raincal.com/post/gogs-share-22-port" target="_blank" rel="noopener">Gogs 与主机共享 22 端口</a></li>
<li><a href="https://gitea.com/jwobith/docker-gitea#additional-steps" target="_blank" rel="noopener">docker-gitea</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Gogs</tag>
        <tag>Git</tag>
        <tag>Docker</tag>
        <tag>Gitea</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 Keepalived 实现 Nginx 双机热备</title>
    <url>/2022/07/10/docker-keepalived-nginx-ha/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/keepalived-nginx-ha.jpg" alt="keepalived Nginx HA"></p>
<p>docker 搭建 keepalived 实现 nginx 双机热备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker run --privileged -d --name node1 debian:11 top -b</span><br><span class="line">❯ docker run --privileged -d --name node2 debian:11 top -b</span><br></pre></td></tr></table></figure>

<p><code>–-privileged</code> 是指以特权模式启动容器，否则 keepalived 无法成功生成虚拟 IP</p>
<p>分别进入 node1、node2 容器节点（<code>docker exec -it node1 /bin/bash</code> 和 <code>docker exec -it node2 /bin/bash</code> ）</p>
<p>安装以下软件 <code>apt update &amp;&amp; apt install curl vim iproute2 inetutils-ping psmisc net-tools systemctl nginx keepalived -y</code></p>
<a id="more"></a>

<p>创建以下两个文件：</p>
<blockquote>
<p><code>vi /etc/keepalived/chk_nginx.sh</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo $(date) "start check nginx..." &gt;&gt; /etc/keepalived/check_nginx.log</span><br><span class="line"></span><br><span class="line">counter=$(systemctl status nginx | grep running | wc -l)</span><br><span class="line">if [ "$&#123;counter&#125;" = "0"  ]; then</span><br><span class="line">   echo $(date)  "nginx is not running, restarting..." &gt;&gt; /etc/keepalived/check_nginx.log</span><br><span class="line">   systemctl start nginx</span><br><span class="line">   sleep 2</span><br><span class="line">   counter=$(systemctl status nginx | grep running | wc -l)</span><br><span class="line">   if [ "$&#123;counter&#125;" =  "0" ]; then</span><br><span class="line">      echo $(date) "nginx is down, kill all keepalived..." &gt;&gt; /etc/keepalived/check_nginx.log</span><br><span class="line">      killall keepalived</span><br><span class="line">   fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>脚本作用是查看是否存在 nginx 进程，不存在就重启 nginx，然后再查看一次，还不存在就杀掉 keepalived 进程（这样备既就会自动上线）<br>脚本权限需设置为 755（<code>chmod 755 /etc/keepalived/chk_nginx.sh</code>），否则 keepalived 会认为它不安全<br>注意首行一定是 <code>#!/bin/bash</code>，而不是 <code>#/bin/bash</code>，否则脚本不会被 keepalived 执行</p>
<p>node1 容器节点为虚拟 IP <code>172.17.0.201</code> 的主节点、虚拟IP <code>172.17.0.202</code> 的备用节点， keepalived 配置文件如下：</p>
<blockquote>
<p><code>vi /etc/keepalived/keepalived.conf</code></p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">! Configuration File for keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_defs</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">router_id</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">script_user</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">enable_script_security</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_script</span> <span class="string">chk_http_port &#123;</span></span><br><span class="line">    <span class="attr">script</span> <span class="string">/etc/keepalived/chk_nginx.sh</span></span><br><span class="line">    <span class="attr">interval</span> <span class="string">10 # 间隔几秒执行脚本（注意最好大于脚本的执行时间）</span></span><br><span class="line">    <span class="attr">weight</span> <span class="string">-20</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_1 &#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">MASTER # 1、备机改为：BACKUP</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">eth0 # 2、替换为实际网卡名称，可使用 ifconfig 或 ip addr 查看</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">51</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">100 # 3、备机优先级设置小一点，例如：90</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">track_script</span> <span class="string">&#123;</span></span><br><span class="line">       <span class="attr">chk_http_port</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">172.17.0.201</span> <span class="string"># 虚拟 IP（和 node1、node2 容器节点在同一网段的任意闲置 IP 即可）</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_2 &#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">BACKUP</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">eth0 #</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">52</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">90</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">track_script</span> <span class="string">&#123;</span></span><br><span class="line">       <span class="attr">chk_http_port</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">172.17.0.202</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>node2 容器节点为虚拟 IP <code>172.17.0.202</code> 的主节点、虚拟IP <code>172.17.0.201</code> 的备用节点， keepalived 配置文件如下：</p>
<blockquote>
<p><code>vi /etc/keepalived/keepalived.conf</code></p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">! Configuration File for keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_defs</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">router_id</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">script_user</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">enable_script_security</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_script</span> <span class="string">chk_http_port &#123;</span></span><br><span class="line">    <span class="attr">script</span> <span class="string">/etc/keepalived/chk_nginx.sh</span></span><br><span class="line">    <span class="attr">interval</span> <span class="string">10</span></span><br><span class="line">    <span class="attr">weight</span> <span class="string">-20</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_1 &#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">BACKUP</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">eth0</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">51</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">90</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">track_script</span> <span class="string">&#123;</span></span><br><span class="line">       <span class="attr">chk_http_port</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">172.17.0.201</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_2 &#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">MASTER</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">eth0</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">52</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">100</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">track_script</span> <span class="string">&#123;</span></span><br><span class="line">       <span class="attr">chk_http_port</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">172.17.0.202</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>node1 和 node2 容器节点互为主备， keepalived 配置文件除过注释标注的 3 处不同外，其余配置项保持一致即可<br>可使用 <code>keepalived -t</code> 检测配置文件是否有误</p>
<p>为了验证主备切换效果，可分别在主备 nginx 默认界面添加不同信息加以区分（<code>vi /var/www/html/index.nginx-debian.html</code>）</p>
<p>1、分别启动 node1 和 node2 容器节点的 keepalived（<code>systemctl start keepalived</code>）</p>
<p>2、在 node1 节点容器使用 ifconfig 或 ip addr 命令可看到绑定的虚拟 IP <code>172.17.0.201</code>，此时通过访问虚拟 IP：<code>curl http://172.17.0.201</code> 展示的是 node1 节点的 nginx 信息</p>
<p>3、在 node2 节点容器使用 ifconfig 或 ip addr 命令可看到绑定的虚拟 IP <code>172.17.0.202</code>，此时通过访问虚拟 IP：<code>curl http://172.17.0.202</code> 展示的是 node2 节点的 nginx 信息</p>
<p>4、故意改错 node1 上的 nginx 配置文件让其无法启动，并且停止 nginx（<code>systemctl stop nginx</code>）（模拟宕机情况），node1 节点的 keepalived 检测到 nginx 进程不存在，然后尝试启动 nginx，发现启动失败，所以会杀掉 keepalived 进程，释放虚拟 IP <code>172.17.0.201</code></p>
<p>5、node2 节点 keepalived 感知到 node1 节点下线后会绑定虚拟 IP <code>172.17.0.201</code> 接管请求，完成主备切换。此时在 node2 节点容器使用 ifconfig 或 ip addr 命令可看到绑定的虚拟 IP <code>172.17.0.201</code> 和 <code>172.17.0.202</code>，此时通过访问 <code>curl http://172.17.0.201</code> 和 <code>curl http://172.17.0.201</code> 展示的都是 node2 节点的 nginx 信息</p>
<p>6、当恢复 node1 节点 nginx 配置文件并重新加载，然后启动 keepalived，在 node1 容器节点使用 ifconfig 或 ip addr 命令可再次看到绑定的虚拟 IP <code>172.17.0.201</code>，此时通过访问 <code>curl http://172.17.0.201</code> 展示的又是 node1 节点的 nginx 信息，访问 <code>curl http://172.17.0.201</code> 展示的是 node2 节点的 nginx 信息</p>
<hr>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Docker</tag>
        <tag>Keepalived</tag>
        <tag>HA</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 同时 push 到多个远程仓库</title>
    <url>/2016/07/24/Git-%E5%90%8C%E6%97%B6-push-%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>如果一个本地仓库添加多个远程仓库，不想 git push 多次，可以修改 .git/config 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .git/config</span><br></pre></td></tr></table></figure>

<p>比如以下信息表示在 git@OSC 和 GitHub 两个远程托管</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724193534.png" alt=""></p>
<a id="more"></a>

<p>修改为以下信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724190056.png" alt=""></p>
<p>则可同时 push 到两个远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">Everything up-to-date</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>添加第二个远程地址时使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --add origin git@github.com:ehlxr/ehlxr-Hexo.git</span><br></pre></td></tr></table></figure>

<p>查看远程分支 origin：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@git.oschina.net:ehlxr/ehlxr-Hexo.git (fetch)</span><br><span class="line">origin  git@git.oschina.net:ehlxr/ehlxr-Hexo.git (push)</span><br><span class="line">origin  git@github.com:ehlxr/ehlxr-Hexo.git (push)</span><br></pre></td></tr></table></figure>
<p>也可以同时 push 到多个远程地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">Everything up-to-date</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 更新已经 fork 的项目</title>
    <url>/2016/07/28/update-from-github-fork/</url>
    <content><![CDATA[<blockquote>
<p>GitHub 上有个很方便的功能叫 fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你 fork 的分支并不会一起更新，需要自己手动去更新，下面记录下网上找到的更新的开发方法。</p>
</blockquote>
<h3 id="1-在本地装好-GitHub-客户端，或者-Git-客户端"><a href="#1-在本地装好-GitHub-客户端，或者-Git-客户端" class="headerlink" title="1. 在本地装好 GitHub 客户端，或者 Git 客户端"></a>1. 在本地装好 GitHub 客户端，或者 Git 客户端</h3><h3 id="2-clone-自己的-fork-分支到本地"><a href="#2-clone-自己的-fork-分支到本地" class="headerlink" title="2. clone 自己的 fork 分支到本地"></a>2. clone 自己的 fork 分支到本地</h3><p>可以直接使用 GitHub 客户端，clone 到本地，如果使用命令行，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:ehlxr/strman-java.git</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="3-增加源分支地址到你项目远程分支列表中"><a href="#3-增加源分支地址到你项目远程分支列表中" class="headerlink" title="3. 增加源分支地址到你项目远程分支列表中"></a>3. 增加源分支地址到你项目远程分支列表中</h3><p>此处是关键，先得将原来的仓库指定为 upstream，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add upstream git@github.com:shekhargulati/strman-java.git</span><br></pre></td></tr></table></figure>

<p>此处可使用 git remote -v 查看远程分支列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:ehlxr/strman-java.git (fetch)</span><br><span class="line">origin  git@github.com:ehlxr/strman-java.git (push)</span><br><span class="line">upstream  git@github.com:shekhargulati/strman-java.git (fetch)</span><br><span class="line">upstream  git@github.com:shekhargulati/strman-java.git (push)</span><br></pre></td></tr></table></figure>

<h3 id="4-fetch-源分支的新版本到本地"><a href="#4-fetch-源分支的新版本到本地" class="headerlink" title="4. fetch 源分支的新版本到本地"></a>4. fetch 源分支的新版本到本地</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch upstream</span><br></pre></td></tr></table></figure>

<h3 id="5-合并两个版本的代码"><a href="#5-合并两个版本的代码" class="headerlink" title="5. 合并两个版本的代码"></a>5. 合并两个版本的代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge upstream/master</span><br></pre></td></tr></table></figure>

<h3 id="6-将合并后的代码-push-到-GitHub-上去"><a href="#6-将合并后的代码-push-到-GitHub-上去" class="headerlink" title="6. 将合并后的代码 push 到 GitHub 上去"></a>6. 将合并后的代码 push 到 GitHub 上去</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<hr>
<p>参考网址：</p>
<p><a href="https://help.github.com/articles/fork-a-repo" target="_blank" rel="noopener">https://help.github.com/articles/fork-a-repo</a></p>
<p><a href="http://www.makaidong.com/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E7%89%9B/14167.shtml" target="_blank" rel="noopener">原文出处</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 常用代码块</title>
    <url>/2017/12/06/go-commons-code-snippets/</url>
    <content><![CDATA[<blockquote>
<p>总结备忘一下常用的的 Go 代码片段</p>
</blockquote>
<h2 id="遍历目录下的文件"><a href="#遍历目录下的文件" class="headerlink" title="遍历目录下的文件"></a>遍历目录下的文件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFilelist</span><span class="params">(r <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    err := filepath.Walk(r, <span class="function"><span class="keyword">func</span><span class="params">(p <span class="keyword">string</span>, f os.FileInfo, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> f == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> p == r || f.IsDir() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"filepath.Walk() returned %v\n"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">duration := <span class="number">2</span> * time.Second</span><br><span class="line">timer := time.NewTimer(duration)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">            fmt.Println(<span class="string">"here"</span>)</span><br><span class="line">            timer.Reset(duration)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<h2 id="定时执行任务"><a href="#定时执行任务" class="headerlink" title="定时执行任务"></a>定时执行任务</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> INTERVAL_PERIOD time.Duration = <span class="number">24</span> * time.Hour</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOUR_TO_TICK <span class="keyword">int</span> = <span class="number">23</span></span><br><span class="line"><span class="keyword">const</span> MINUTE_TO_TICK <span class="keyword">int</span> = <span class="number">00</span></span><br><span class="line"><span class="keyword">const</span> SECOND_TO_TICK <span class="keyword">int</span> = <span class="number">03</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ticker := updateTicker()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        &lt;-ticker.C</span><br><span class="line">        fmt.Println(time.Now(), <span class="string">"- just ticked"</span>)</span><br><span class="line">        ticker = updateTicker()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateTicker</span><span class="params">()</span> *<span class="title">time</span>.<span class="title">Ticker</span></span> &#123;</span><br><span class="line">    n := time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(),</span><br><span class="line">        HOUR_TO_TICK, MINUTE_TO_TICK, SECOND_TO_TICK, <span class="number">0</span>, time.Local)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !n.After(time.Now()) &#123;</span><br><span class="line">        n = n.Add(INTERVAL_PERIOD)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(n, <span class="string">"- next tick"</span>)</span><br><span class="line">    diff := n.Sub(time.Now())</span><br><span class="line">    <span class="keyword">return</span> time.NewTicker(diff)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"/test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">fd, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(fd))</span><br></pre></td></tr></table></figure>

<h2 id="map-转-json"><a href="#map-转-json" class="headerlink" title="map 转 json"></a>map 转 json</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m[<span class="string">"show"</span>] = <span class="string">"1"</span></span><br><span class="line">m[<span class="string">"content"</span>] = <span class="string">"test"</span></span><br><span class="line">j, err := json.Marshal(m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(j))</span><br></pre></td></tr></table></figure>

<h2 id="json-转-map"><a href="#json-转-map" class="headerlink" title="json 转 map"></a>json 转 map</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "show": 1,</span></span><br><span class="line"><span class="string">    "content": "test"</span></span><br><span class="line"><span class="string">&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(result, &amp;r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(r)</span><br></pre></td></tr></table></figure>

<h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(path <span class="keyword">string</span>, b []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    file, err := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, <span class="number">0777</span>)</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.Write(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单的获取-IP"><a href="#简单的获取-IP" class="headerlink" title="简单的获取 IP"></a>简单的获取 IP</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPulicIP</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    conn, _ := net.Dial(<span class="string">"udp"</span>, <span class="string">"8.8.8.8:80"</span>)</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    localAddr := conn.LocalAddr().String()</span><br><span class="line">    idx := strings.LastIndex(localAddr, <span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">return</span> localAddr[<span class="number">0</span>:idx]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 反射使用总结</title>
    <url>/2018/01/26/golang-reflect/</url>
    <content><![CDATA[<p>Go 语言中反射的操作主要定义在标准库 <a href="https://golang.org/pkg/reflect/" target="_blank" rel="noopener"><code>reflect</code></a> 中，在标准库中定义了两种类型来表现运行时的对象信息，分别是：<a href="https://golang.org/pkg/reflect/#Value" target="_blank" rel="noopener"><code>reflect.Value</code></a>（反射对象的类型）和 <a href="https://golang.org/pkg/reflect/#Type" target="_blank" rel="noopener"><code>reflect.Type</code></a>（反射对象的值），Go 语言中所有反射操作都是基于这两个类型进行的。</p>
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/golang-reflect.jpg" class="" width="350">
<!-- ![golang-reflect][1] -->

<p>为了方便演示操作（<a href="https://github.com/ehlxr/go-utils/blob/master/common/reflect/main.go" target="_blank" rel="noopener">完整代码示例</a>），首先定义以下结构体以及字段、方法：</p>
<a id="more"></a>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">    Age  <span class="keyword">int</span>    <span class="string">`json:"age" default:"18"`</span></span><br><span class="line">    addr <span class="keyword">string</span> <span class="string">`json:"addr"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">Do</span><span class="params">(in <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s Name is %s, Age is %d \n"</span>, in, u.Name, u.Age)</span><br><span class="line">    <span class="keyword">return</span> u.Name, u.Age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一、反射对象-Value-和-Type"><a href="#一、反射对象-Value-和-Type" class="headerlink" title="一、反射对象 Value 和 Type"></a>一、反射对象 Value 和 Type</h2><p>既然 Go 语言中所有反射操作都是基于 <code>Value</code> 和 <code>Type</code> 进行的，那么想要进行反射操作，首先就要获取到反射对象的这两个类型对象才可以。</p>
<p><code>reflect</code> 包提供了两个函数：<code>reflect.ValueOf()</code> 和 <code>reflect.TypeOf()</code>，通过这两个函数就可以方便的获取到任意类型（用 <code>interface{}</code> 表示任意类型）的 <code>Value</code> 对象和 <code>Type</code> 对象。例如：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">u := User&#123;<span class="string">"tom"</span>, <span class="number">27</span>, <span class="string">"beijing"</span>&#125;</span><br><span class="line"></span><br><span class="line">v := reflect.ValueOf(u)</span><br><span class="line">fmt.Println(v)</span><br><span class="line"></span><br><span class="line">t := reflect.TypeOf(u)</span><br><span class="line">fmt.Println(t)</span><br></pre></td></tr></table></figure>

<p>知道 <code>Value</code> 对象后，也可以通过 <code>Value.Type()</code> 方法获取到 <code>Type</code> 对象。例如：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">t1 := v.Type()</span><br><span class="line">fmt.Println(t == t1)</span><br></pre></td></tr></table></figure>

<p>可以看到输出结果为 <code>true</code>。</p>
<p>通过 <code>Type</code> 类型对象也可以获取到 <code>Value</code> 类型对象，不过是零值的指针。例如：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">v1 := reflect.New(t)</span><br><span class="line">fmt.Println(v1)</span><br></pre></td></tr></table></figure>

<p>结果为：<code>&amp;{ 0}</code></p>
<h2 id="二、反射对象的-Kind"><a href="#二、反射对象的-Kind" class="headerlink" title="二、反射对象的 Kind"></a>二、反射对象的 Kind</h2><p><code>Kind</code> 表示反射对象的类型 <code>Type</code> 所代表的具体类型，零值表示无效的类型，具体有以下类型值：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Kind <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Invalid Kind = <span class="literal">iota</span></span><br><span class="line">    Bool</span><br><span class="line">    Int</span><br><span class="line">    Int8</span><br><span class="line">    Int16</span><br><span class="line">    Int32</span><br><span class="line">    Int64</span><br><span class="line">    Uint</span><br><span class="line">    Uint8</span><br><span class="line">    Uint16</span><br><span class="line">    Uint32</span><br><span class="line">    Uint64</span><br><span class="line">    Uintptr</span><br><span class="line">    Float32</span><br><span class="line">    Float64</span><br><span class="line">    Complex64</span><br><span class="line">    Complex128</span><br><span class="line">    Array</span><br><span class="line">    Chan</span><br><span class="line">    Func</span><br><span class="line">    Interface</span><br><span class="line">    Map</span><br><span class="line">    Ptr</span><br><span class="line">    Slice</span><br><span class="line">    String</span><br><span class="line">    Struct</span><br><span class="line">    UnsafePointer</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>Value.Kind()</code> 或者 <code>Type.Kind()</code> 函数获得。例如：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 Kind 类型</span></span><br><span class="line">k := t.Kind()</span><br><span class="line">fmt.Println(k)</span><br><span class="line">k1 := v.Kind()</span><br><span class="line">fmt.Println(k1)</span><br><span class="line">fmt.Println(k == k1)</span><br><span class="line">fmt.Println()</span><br></pre></td></tr></table></figure>

<p>可以看到两种方式获取的结果是一样的，都是 <code>struct</code>。</p>
<h2 id="三、反射对象的字段"><a href="#三、反射对象的字段" class="headerlink" title="三、反射对象的字段"></a>三、反射对象的字段</h2><p>反射能够操作的字段和方法必须是可导出（首字母大写）的。</p>
<p>反射对象的字段值修改要通过调用 <code>Value</code> 类型的方法 <code>Elem()</code> 后返回的 <code>Value</code> 对象值来操作。</p>
<p><code>Elem()</code> 方法定义：<code>func (v Value) Elem() Value</code>，返回 <code>v</code> 包含的值或指针 <code>v</code> 指向的值，<code>v</code> 的 <code>Kind</code> 如果不是 <code>Interface</code> 或 <code>Ptr</code>，则会 panic。</p>
<p><code>reflect.Indirect()</code> 函数的如果参数是指针的 <code>Value</code>，则相当于调用了 <code>Elem()</code> 方法返回的值，否则返回 <code>Value</code> 自身值。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改反射对象的值</span></span><br><span class="line">i := <span class="number">20</span></span><br><span class="line">fmt.Println(<span class="string">"before i ="</span>, i)</span><br><span class="line">e := reflect.Indirect(reflect.ValueOf(&amp;i))</span><br><span class="line"><span class="comment">// e := reflect.ValueOf(&amp;i).Elem()</span></span><br><span class="line"><span class="keyword">if</span> e.CanSet() &#123;</span><br><span class="line">    e.SetInt(<span class="number">22</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"after i ="</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射字段操作</span></span><br><span class="line"><span class="comment">// elem := reflect.Indirect(reflect.ValueOf(&amp;u))</span></span><br><span class="line">elem := reflect.ValueOf(&amp;u).Elem()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; t.NumField(); i++ &#123;</span><br><span class="line">    <span class="comment">// 反射获取字段的元信息，例如：名称、Tag 等</span></span><br><span class="line">    ft := t.Field(i)</span><br><span class="line">    fmt.Println(<span class="string">"field name:"</span>, ft.Name)</span><br><span class="line">    tag := ft.Tag</span><br><span class="line">    fmt.Println(<span class="string">"Tag:"</span>, tag)</span><br><span class="line">    fmt.Println(<span class="string">"Tag json:"</span>, tag.Get(<span class="string">"json"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射修改字段的值</span></span><br><span class="line">    fv := elem.Field(i)</span><br><span class="line">    <span class="keyword">if</span> fv.CanSet() &#123;</span><br><span class="line">        <span class="keyword">if</span> fv.Kind() == reflect.Int &#123;</span><br><span class="line">            fmt.Println(<span class="string">"change age to 30"</span>)</span><br><span class="line">            fv.SetInt(<span class="number">30</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> fv.Kind() == reflect.String &#123;</span><br><span class="line">            fmt.Println(<span class="string">"change name to jerry"</span>)</span><br><span class="line">            fv.SetString(<span class="string">"jerry"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"after user:"</span>, u)</span><br></pre></td></tr></table></figure>

<h2 id="四、反射对象的方法"><a href="#四、反射对象的方法" class="headerlink" title="四、反射对象的方法"></a>四、反射对象的方法</h2><p>可以通过 <code>Value</code> 的 <code>Method()</code> 方法或 <code>Type</code> 的 <code>Method()</code> 方法，两种形式获取对象方法信息进行反射调用，略有不同，示例如下：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反射方法操作</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v.NumMethod(); i++ &#123;</span><br><span class="line">    method := t.Method(i) <span class="comment">// 获取方法信息对象，方法 1</span></span><br><span class="line">    mt := method.Type     <span class="comment">// 获取方法信息 Type 对象，方法 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// m := v.Method(i) // 获取方法信息对象，方法 2</span></span><br><span class="line">    <span class="comment">// mt := m.Type()   // 获取方法信息 Type 对象，方法 2</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"method name:"</span>, method.Name)</span><br><span class="line"></span><br><span class="line">    in := []reflect.Value&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取方法入参类型</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; mt.NumIn(); j++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">"method in type:"</span>, mt.In(j))</span><br><span class="line">        <span class="keyword">if</span> mt.In(j).Kind() == reflect.String &#123;</span><br><span class="line">            in = <span class="built_in">append</span>(in, reflect.ValueOf(<span class="string">"welcome"</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法 1 获取的方法信息对象会把方法的接受者也当着入参之一</span></span><br><span class="line">        <span class="keyword">if</span> mt.In(j).Name() == t.Name() &#123;</span><br><span class="line">            in = <span class="built_in">append</span>(in, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取方法返回类型</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; mt.NumOut(); j++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">"method out type:"</span>, mt.Out(j))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射方法调用</span></span><br><span class="line">    <span class="comment">// out := m.Call(in) // 方法 1 获取的 Method 对象反射调用方式</span></span><br><span class="line">    out := method.Func.Call(in) <span class="comment">// 方法 1 获取的 Method 对象反射调用方式</span></span><br><span class="line">    <span class="keyword">for</span> _, o := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(<span class="string">"out:"</span>, o)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、反射对象-Value-还原"><a href="#五、反射对象-Value-还原" class="headerlink" title="五、反射对象 Value 还原"></a>五、反射对象 Value 还原</h2><p>通过 <code>reflect.ValueOf()</code> 可以把任意类型对象转换为 <code>Value</code> 类型对象，也可以通过 <code>Value</code> 类型的方法 <code>Interface()</code> 把 <code>Value</code> 类型对象还原为原始数据类型对象。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Value 转原始类型</span></span><br><span class="line"><span class="keyword">if</span> u1, ok := v.Interface().(User); ok &#123;</span><br><span class="line">    fmt.Println(<span class="string">"after:"</span>, u1.Name, u1.Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Good bye 2016...</title>
    <url>/2016/12/31/Good-bye-2016/</url>
    <content><![CDATA[<p>时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…</p>
<p>印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…</p>
<a id="more"></a>
<p>总结 2016，收获，知足，感恩…眼前的要珍惜，来之不易的拥有更要珍惜。</p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" height= "90%" width="100%" src="https://music.daoapp.io/iframe?song=35307971&qssl=1&qlrc=1&qnarrow=0&autoplay=1"></iframe> -->

<hr>
]]></content>
      <categories>
        <category>年末总结</category>
      </categories>
      <tags>
        <tag>年末总结</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS 笔记</title>
    <url>/2020/03/11/https-note/</url>
    <content><![CDATA[<p>随着互联网的迅速发展，网络安全问题日益凸显，现在 Chrome 浏览器已经开始阻止非 https 网站的访问了。对于 https 的流程一直不是十分清晰，借着还没有完全复工有时间，大概画了个图总结一下。</p>
<p>想要了解 https 流程，CA 的相关知识，加密方式（对称加密、非对称加密），以及哈希计算（例如：MD5、sha256）等技术必须得掌握，这里先不做介绍，后续有时间再进行归纳总结。</p>
<p>https 是在 http 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。</p>
<a id="more"></a>
<h2 id="HTTPS-的验证流程"><a href="#HTTPS-的验证流程" class="headerlink" title="HTTPS 的验证流程"></a>HTTPS 的验证流程</h2><p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/https.jpg" alt="https"></p>
<ol>
<li>客户端发起 https 请求</li>
<li>服务端返回数字证书文件（X.509 格式）</li>
<li>客户端验证数字证书，并且提取服务端公钥</li>
<li>如果客户端验证数字证书通过，则随机生成一个对称加密的 key，并使用服务器公钥对 key 加密</li>
<li>客户端发送加密后的 key 到服务端</li>
<li>服务端使用私钥解密拿到 key</li>
<li>客户端与服务端使用该 key 对称加解密通讯信息</li>
</ol>
<h2 id="客户端验证数字证书"><a href="#客户端验证数字证书" class="headerlink" title="客户端验证数字证书"></a>客户端验证数字证书</h2><ol>
<li>浏览器安装后会自带一些权威 CA 公钥</li>
<li>使用相匹配的 CA 公钥对数字证书中的数字签名解密，如果能够解密则得到数字证书的摘要，由此证明数字证书是可信的</li>
<li>根据数字证书中的散列算法对网站信息进行哈希运算，将得到的结果与上一步得到的摘要对比，如果两者一致，就证明证书未被修改过</li>
</ol>
<h2 id="数字证书的签发过程"><a href="#数字证书的签发过程" class="headerlink" title="数字证书的签发过程"></a>数字证书的签发过程</h2><p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/digital_signature.jpg" alt="digital signature"></p>
<hr>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM TLAB</title>
    <url>/2021/07/27/jvm-tlab/</url>
    <content><![CDATA[<p><strong>TLAB（Thread Local Allocation Buffer）</strong> 线程本地分配缓存区</p>
<ol>
<li>由于对象一般分配在堆上，而堆是线程共用的，因此可能会有多个线程在堆上申请空间，而每一次的<strong>对象分配都必须加锁保证线程同步</strong>，会使分配的效率下降。考虑到对象分配几乎是 <code>Java</code> 中最常用的操作，因此 <code>JVM</code> 使用了 <code>TLAB</code> 这样的线程专有区域来避免多线程冲突，提高对象分配的效率。</li>
<li>我们说 <code>TLAB</code> 是线程独享的，但是只是在 <strong>“分配”</strong> 这个动作上是线程独享的，至于在读取、垃圾回收等动作上都是线程共享的。而且在使用上也没有什么区别</li>
<li><code>JVM</code> 为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间 <code>TLAB</code>，其大小由 <code>JVM</code> 根据运行的情况计算而得，在 <code>TLAB</code> 上分配对象时不需要加锁，因此 <strong>JVM 在给线程的对象分配内存时会尽量的在 TLAB 上分配</strong>，在这种情况下 JVM 中分配对象内存的性能和 <code>C</code> 基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配</li>
<li>在 <code>TLAB</code> 分配之后，并不影响对象的移动和回收，也就是说，虽然对象刚开始可能通过 <code>TLAB</code> 分配内存，存放在 <code>Eden</code> 区，但是还是会被垃圾回收或者被移到 <code>Survivor Space、Old Gen</code> 等。</li>
<li><strong>“堆是线程共享的内存区域” 这句话并不完全正确</strong>，因为 <code>TLAB</code> 是堆内存的一部分，它在读取上确实是线程共享的，但是在内存分配上，是线程独享的。</li>
<li><code>TLAB</code> 的空间其实并不大（默认是 <code>eden</code> 区空间的 <code>1%</code>），所以大对象还是可能需要在堆内存中直接分配。那么，对象的内存分配步骤就是先尝试 <code>TLAB</code> 分配，空间不足之后，再判断是否应该直接进入老年代，然后再确定是再 <code>eden</code> 分配还是在老年代分配。<a id="more"></a>

</li>
</ol>
<p><code>TLAB</code> 对象分配过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/92dcfb688fa1414c9480e423efdd27d5.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/41eb453d8c00439aa719d6c5396db3ad.png" alt=""></p>
<p>参考链接</p>
<ul>
<li><a href="http://www.atguigu.com/download_detail.shtml?v=279" target="_blank" rel="noopener">尚硅谷-宋红康-详解 Java 虚拟机</a></li>
<li><a href="https://www.cnblogs.com/myseries/p/12884249.html" target="_blank" rel="noopener">JVM 关于对象分配在堆、栈、TLAB 的理解</a></li>
<li><a href="https://blog.csdn.net/QGhurt/article/details/107289843" target="_blank" rel="noopener">TLAB（Thread Local Allocation Buffer）</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>TLAB</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-垃圾回收（二）</title>
    <url>/2018/08/23/jvm-gc2/</url>
    <content><![CDATA[<blockquote>
<p>接着上次 JVM 中 GC 机制的总结，这次主要复习一下垃圾收集的常用算法和 Minor GC、Full GC 相关的一些知识点。</p>
</blockquote>
<h2 id="一、垃圾收集算法"><a href="#一、垃圾收集算法" class="headerlink" title="一、垃圾收集算法"></a>一、垃圾收集算法</h2><h3 id="1-1-标记-清除（Mark-Sweep）"><a href="#1-1-标记-清除（Mark-Sweep）" class="headerlink" title="1.1 标记 - 清除（Mark-Sweep）"></a>1.1 标记 - 清除（Mark-Sweep）</h3><p>算法分成 “标记”、“清除” 两个阶段：首先标记出所有需要回收的对象（两次标记），在标记完成后统一回收所有被标记的对象。如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1ftwah4c7cxj20gv07b0sz.jpg" alt=""></p>
<a id="more"></a>
<p>标记－清除算法的不足主要有以下两点：</p>
<ul>
<li><strong>空间问题</strong>，会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li>
<li><strong>效率问题</strong>，因为内存碎片的存在，操作会变得更加费时，因为查找下一个可用空闲块已不再是一个简单操作。</li>
</ul>
<h3 id="1-2-标记-整理（Mark-Compact）"><a href="#1-2-标记-整理（Mark-Compact）" class="headerlink" title="1.2 标记 - 整理（Mark-Compact）"></a>1.2 标记 - 整理（Mark-Compact）</h3><p>此算法的标记过程与标记－清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。具体示意图如下所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1ftwamib399j20hq06f0t0.jpg" alt=""></p>
<h3 id="1-3-复制（Copying）"><a href="#1-3-复制（Copying）" class="headerlink" title="1.3 复制（Copying）"></a>1.3 复制（Copying）</h3><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。主要不足是只使用了内存的一半。</p>
<p>复制算法过程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1ftwao1yh4wj20j00670t3.jpg" alt=""></p>
<h3 id="1-4-分代收集"><a href="#1-4-分代收集" class="headerlink" title="1.4 分代收集"></a>1.4 分代收集</h3><p>JVM 采用分代收集（Generational Collection）算法，此算法相较于前几种没有什么新的特征，主要思想为：根据对象存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适合的收集算法：</p>
<ul>
<li><strong>新生代使用复制算法</strong> 在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</li>
<li><strong>老年代使用标记 - 清理 或者 标记 - 整理 算法</strong> 在老年代中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 “标记 - 清除” 或 “标记 - 整理” 算法来进行回收。</li>
</ul>
<h2 id="二、Minor-GC-和-Full-GC"><a href="#二、Minor-GC-和-Full-GC" class="headerlink" title="二、Minor GC 和 Full GC"></a>二、Minor GC 和 Full GC</h2><h3 id="2-1-Minor-GC"><a href="#2-1-Minor-GC" class="headerlink" title="2.1 Minor GC"></a>2.1 Minor GC</h3><p>发生在新生代上，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。</p>
<p>Minor GC 会使用复制收集算法进行垃圾回收，但是并不是将内存划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。</p>
<h3 id="2-2-Full-GC"><a href="#2-2-Full-GC" class="headerlink" title="2.2 Full GC"></a>2.2 Full GC</h3><p>发生在老年代上，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。</p>
<h3 id="2-3-Full-GC-的触发条件"><a href="#2-3-Full-GC-的触发条件" class="headerlink" title="2.3 Full GC 的触发条件"></a>2.3 Full GC 的触发条件</h3><p>对于 Minor GC，其触发条件非常简单，当 Eden 区空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p>
<h4 id="2-3-1-调用-System-gc"><a href="#2-3-1-调用-System-gc" class="headerlink" title="2.3.1 调用 System.gc()"></a>2.3.1 调用 <code>System.gc()</code></h4><p>此方法的调用是建议 JVM 进行 Full GC，虽然只是建议而非一定，但很多情况下它会触发 Full GC，从而增加 Full GC 的频率，也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存，可通过 <code>-XX:+ DisableExplicitGC</code> 虚拟机参数来禁止 RMI 调用 <code>System.gc()</code>。</p>
<h4 id="2-3-2-老年代空间不足"><a href="#2-3-2-老年代空间不足" class="headerlink" title="2.3.2 老年代空间不足"></a>2.3.2 老年代空间不足</h4><p>老年代空间不足的常见场景为大对象直接进入老年代、长期存活的对象进入老年代等。</p>
<p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 <code>-Xmn</code> 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 <code>-XX:MaxTenuringThreshold</code> 虚拟机参数调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p>
<h4 id="2-3-3-空间分配担保失败"><a href="#2-3-3-空间分配担保失败" class="headerlink" title="2.3.3 空间分配担保失败"></a>2.3.3 空间分配担保失败</h4><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。</p>
<h4 id="2-3-4-JDK-1-7-及以前的永久代空间不足"><a href="#2-3-4-JDK-1-7-及以前的永久代空间不足" class="headerlink" title="2.3.4 JDK 1.7 及以前的永久代空间不足"></a>2.3.4 JDK 1.7 及以前的永久代空间不足</h4><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS 垃圾收集器的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 <code>java.lang.OutOfMemoryError</code>。</p>
<p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS 垃圾收集器。</p>
<p>在 JDK 1.8 中用元空间替换了永久代作为方法区的实现，元空间是本地内存，因此减少了一种 Full GC 触发的可能性。</p>
<h4 id="2-3-5-Concurrent-Mode-Failure"><a href="#2-3-5-Concurrent-Mode-Failure" class="headerlink" title="2.3.5 Concurrent Mode Failure"></a>2.3.5 Concurrent Mode Failure</h4><p>使用 CMS 垃圾收集器执行的过程中，同时有对象要放入老年代，而此时老年代空间不足（有时候 “<strong>空间不足</strong>” 是指 CMS GC 当前的浮动垃圾过多导致暂时性的空间不足），便会报 <code>Concurrent Mode Failure</code> 错误，并触发 Full GC。</p>
<hr>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java List与数组之间的转换</title>
    <url>/2016/07/20/Java-List%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="1-数组转换为List"><a href="#1-数组转换为List" class="headerlink" title="1. 数组转换为List"></a>1. 数组转换为List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> String[] &#123;<span class="string">"str1"</span>, <span class="string">"str2"</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="2-List转换为数组"><a href="#2-List转换为数组" class="headerlink" title="2 .List转换为数组"></a>2 .List转换为数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"str1"</span>);</span><br><span class="line">list.add(<span class="string">"str2"</span>);</span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line">String[] arr = list.toArray(<span class="keyword">new</span> String[size]);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 位运算笔记</title>
    <url>/2018/08/02/java-positional-operator/</url>
    <content><![CDATA[<p>一些零碎的知识点总是似懂非懂，用法老是模棱两可，每次都要去网络上查询，长时间不用又忘记了。比如 Java 中的位运算。今天抽空归纳总结一下，加强一下记忆。</p>
<h2 id="一、原码、反码和补码"><a href="#一、原码、反码和补码" class="headerlink" title="一、原码、反码和补码"></a>一、原码、反码和补码</h2><h3 id="1-1-原码"><a href="#1-1-原码" class="headerlink" title="1.1 原码"></a>1.1 原码</h3><p>一个数在计算机中的二进制表示形式，叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为 0, 负数为 1。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
<p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如 8 位二进制:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+1] 原 &#x3D; 0000 0001</span><br><span class="line">[-1] 原 &#x3D; 1000 0001</span><br></pre></td></tr></table></figure>

<p>第一位是符号位，因为第一位是符号位，所以 8 位二进制数的取值范围就是：[1111 1111 , 0111 1111]，即：[-127 , 127]</p>
<a id="more"></a>

<h3 id="1-2-反码"><a href="#1-2-反码" class="headerlink" title="1.2 反码"></a>1.2 反码</h3><p>反码的表示方法是：正数的反码是其本身，负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+1] &#x3D; [00000001] 原 &#x3D; [00000001] 反</span><br><span class="line">[-1] &#x3D; [10000001] 原 &#x3D; [11111110] 反</span><br></pre></td></tr></table></figure>

<h3 id="1-3-补码"><a href="#1-3-补码" class="headerlink" title="1.3 补码"></a>1.3 补码</h3><p>补码的表示方法是：正数的补码就是其本身，负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后 + 1。(即在反码的基础上 + 1)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+1] &#x3D; [00000001] 原 &#x3D; [00000001] 反 &#x3D; [00000001] 补</span><br><span class="line">[-1] &#x3D; [10000001] 原 &#x3D; [11111110] 反 &#x3D; [11111111] 补</span><br></pre></td></tr></table></figure>

<h2 id="二、左移运算（-lt-lt-）"><a href="#二、左移运算（-lt-lt-）" class="headerlink" title="二、左移运算（&lt;&lt;）"></a>二、左移运算（&lt;&lt;）</h2><p><code>value &lt;&lt; num</code></p>
<blockquote>
<p>num 指定要移位值；value 移动的位数。</p>
</blockquote>
<p>将左操作数（value）转为二进制数后向左边移动 num 位，并且在低位补 0，高位丢弃。</p>
<p>例如：<code>5 &lt;&lt; 2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     5 的补码（同原码）</span><br><span class="line">0000 0000 0000 0000 0000 0000 0001 0100     左移 2 位后，低位补 0。换算成 10 进制为 20</span><br></pre></td></tr></table></figure>

<p>如果移动的位数超过了该类型的最大位数，那么编译器会对移动的位数取模。如：对 int 类型（最大位数 32）的数值移动 33 位，实际上只移动了 <code>33 % 32 = 1</code> 位。</p>
<blockquote>
<p>注：n 位二进制，最高位为符号位，因此表示的数值范围：$ -2^{(n-1)} $ —— $ 2^{(n-1)}-1 $，所以模为：$ 2^{(n-1)} $。</p>
</blockquote>
<p>在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以 2 的 1 次方，左移 n 位就相当于乘以 2 的 n 次方。如：<code>5 &lt;&lt; 2</code> 相当于 $ 5 * 2^2 = 20 $。</p>
<p>如果移进高阶位（int 31 或 long 63 位），那么该值将变为负值。如：<code>1 &lt;&lt; 31 = -2147483648</code></p>
<h2 id="三、右移运算（-gt-gt-）"><a href="#三、右移运算（-gt-gt-）" class="headerlink" title="三、右移运算（&gt;&gt;）"></a>三、右移运算（&gt;&gt;）</h2><p><code>value &gt;&gt; num</code></p>
<blockquote>
<p>num 指定要移位值；value 移动的位数。</p>
</blockquote>
<p>将左操作数（value）转为二进制数后向右边移动 num 位，符号位不变，高位补上符号位（若左操作数是正数，则高位补 0，若左操作数是负数，则高位补 1），低位丢弃。</p>
<p>右移时，被移走的最高位（最左边的位）由原来最高位的数字补充，这叫做符号位扩展（保留符号位）（sign extension），在进行右移操作时用来保持负数的符号。</p>
<p>例如：<code>7 &gt;&gt; 2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0111     7 的补码（同原码）</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0001     右移 2 位后，高位补 0。换算成 10 进制为 1</span><br></pre></td></tr></table></figure>

<p>例如：<code>-7 &gt;&gt; 2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000 0000 0000 0000 0000 0000 0000 0111     -7 的原码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1000     -7 的反码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1001     -7 的补码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1110     右移 2 位后，高位补 1</span><br><span class="line">1000 0000 0000 0000 0000 0000 0000 0010     补码转原码。换算成 10 进制为 -2</span><br></pre></td></tr></table></figure>

<p>正数右移 n 位相当于除以 2 的 n 次方并且舍弃了余数。如：<code>7 &gt;&gt; 2</code> 相当于： $ 7 / 2^2 = 1 $。</p>
<p>负数右移 n 位相当于除以 2 的 n 次方，如果有余数 -1。如：<code>-7 &gt;&gt; 2</code> 相当于： $ 7 * 2^2 -1= -2 $。</p>
<h2 id="四、无符号右移（-gt-gt-gt-）"><a href="#四、无符号右移（-gt-gt-gt-）" class="headerlink" title="四、无符号右移（&gt;&gt;&gt;）"></a>四、无符号右移（&gt;&gt;&gt;）</h2><p><code>value &gt;&gt;&gt; num</code></p>
<blockquote>
<p>num 指定要移位值；value 移动的位数。</p>
</blockquote>
<p>将左操作数（value）转为二进制数后向右边移动 num 位，0 补最高位（忽略了符号位扩展）。</p>
<p>无符号右移运算只是对 32 位和 64 位的值有意义。</p>
<p>例如：<code>-7 &gt;&gt;&gt; 2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000 0000 0000 0000 0000 0000 0000 0111     -7 的原码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1001     -7 的补码</span><br><span class="line">0011 1111 1111 1111 1111 1111 1111 1110     右移 2 位后，高位补 0。换算成 10 进制为 1073741822</span><br></pre></td></tr></table></figure>

<h2 id="五、位逻辑运算符"><a href="#五、位逻辑运算符" class="headerlink" title="五、位逻辑运算符"></a>五、位逻辑运算符</h2><h3 id="5-1-与运算（-amp-）"><a href="#5-1-与运算（-amp-）" class="headerlink" title="5.1 与运算（&amp;）"></a>5.1 与运算（<strong>&amp;</strong>）</h3><p>与运算：两个运算数比较位都是 1，则结果为 1，否则为 0。例如：<code>5 &amp; 3 = 1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     5 转换为二进制</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0011     3 转换为二进制</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0001     换算成 10 进制为 1</span><br></pre></td></tr></table></figure>

<h3 id="5-2-或运算（-）"><a href="#5-2-或运算（-）" class="headerlink" title="5.2 或运算（|）"></a>5.2 或运算（<strong>|</strong>）</h3><p>或运算：两个运算数比较位有一个为 1，则结果为 1，否则为 0。例如：<code>5 | 3 = 7</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     5 转换为二进制</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0011     3 转换为二进制</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0111     换算成 10 进制为 7</span><br></pre></td></tr></table></figure>

<h3 id="5-3-异或运算（-）"><a href="#5-3-异或运算（-）" class="headerlink" title="5.3 异或运算（^）"></a>5.3 异或运算（<strong>^</strong>）</h3><p>异或运算：两个运算数比较位不同时，其结果是 1，否则为 0。例如：<code>5 ^ 3 = 6</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     5 转换为二进制</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0011     3 转换为二进制</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0110     换算成 10 进制为 6</span><br></pre></td></tr></table></figure>

<h3 id="5-4-非运算（-）"><a href="#5-4-非运算（-）" class="headerlink" title="5.4 非运算（~）"></a>5.4 非运算（<strong>~</strong>）</h3><p>非运算：也叫做补，一元运算符，对其运算数的每一位取反。例如：<code>~5 = -6</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     5 转换为二进制</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1010     取非后的原码</span><br><span class="line">1000 0000 0000 0000 0000 0000 0000 0110     转换补码，换算成 10 进制为 -6</span><br></pre></td></tr></table></figure>

<h2 id="六、其它"><a href="#六、其它" class="headerlink" title="六、其它"></a>六、其它</h2><ul>
<li><p>Java 中整数类型（byte、short、int 和 long）在内存中是以有符号的二进制补码表示。所以位运算时，首先要转换为原码。</p>
</li>
<li><p>补码转原码：补码转原码和原码转补码的方法是一样的，取反 + 1（补码的补码是原码）。</p>
</li>
<li><p>当位运算数是 byte 和 short 类型时，将自动把这些类型扩大为 int 型（32 位）。</p>
</li>
<li><p>计算出 n 位二进制数所能表示的最大十进制数位移算法：<code>-1L ^ (-1L &lt;&lt; n)</code> 或 <code>~(-1L &lt;&lt; n)</code>。</p>
</li>
<li><p>byte 和 int 相互转换</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">234</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i; <span class="comment">// 结果：b = -22</span></span><br><span class="line"><span class="comment">// 转换过程：</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0000 0000 0000 1110 1010      # int 234 的补码（与原码相等）</span></span><br><span class="line"><span class="comment">//                               1110 1010      # byte 低位截取</span></span><br><span class="line"><span class="comment">//                               1001 0110      # 求得补码，转为 10 进制为 -22</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = b ; <span class="comment">// 结果为：x = -22；8 位 byte 的转 32 的 int，值不变。</span></span><br><span class="line"><span class="keyword">int</span> y = b &amp; <span class="number">0xff</span>; <span class="comment">// 结果为：x = 234； 可以通过将其和 0xff 进行位与（&amp;）得到它的无符值</span></span><br><span class="line"><span class="comment">// 转换过程：</span></span><br><span class="line"><span class="comment">// 1001 0110                                    # byte -22 的原码</span></span><br><span class="line"><span class="comment">// 1000 0000 0000 0000 0000 0000 0001 0110      # int -22 的原码</span></span><br><span class="line"><span class="comment">// 1111 1111 1111 1111 1111 1111 1110 1010      # int -22 补码</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0000 0000 0000 1111 1111      # 0xff 的二进制数</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0000 0000 0000 1110 1010      # 和 0xff 进与操作的结果，转换为 10 进制为 234</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 获取系统的配置信息</title>
    <url>/2017/03/29/Java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p><code>System.getProperty()</code> 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 <code>System.getProperty(&quot;java.io.tmpdir&quot;)</code> 可以获取不同操作系统平台下的临时目录。比如：</p>
<p>在 <code>windows</code> 中的目录是：<code>C:\Users\登录用户~1\AppData\Local\Temp\</code></p>
<p>在 <code>linux</code> 下的目录是：<code>/tmp</code></p>
<p>在 <code>Mac</code> 下目录是 <code>/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/</code> （我感觉是不同电脑应该不一样）</p>
<a id="more"></a>

<p>借此机会总结一下 <code>System.getProperty()</code> 可以获取那些系统信息:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.version    <span class="comment">// Java运行时环境版本</span></span><br><span class="line">java.vendor <span class="comment">// Java运行时环境供应商</span></span><br><span class="line">java.vendor.url <span class="comment">// Java供应商的 URL</span></span><br><span class="line">java.home   <span class="comment">// Java安装目录</span></span><br><span class="line">java.vm.specification.version   <span class="comment">// Java虚拟机规范版本</span></span><br><span class="line">java.vm.specification.vendor    <span class="comment">// Java虚拟机规范供应商</span></span><br><span class="line">java.vm.specification.name  <span class="comment">// Java虚拟机规范名称</span></span><br><span class="line">java.vm.version <span class="comment">// Java虚拟机实现版本</span></span><br><span class="line">java.vm.vendor  <span class="comment">// Java虚拟机实现供应商</span></span><br><span class="line">java.vm.name    <span class="comment">// Java虚拟机实现名称</span></span><br><span class="line">java.specification.version  <span class="comment">// Java运行时环境规范版本</span></span><br><span class="line">java.specification.vendor   <span class="comment">// Java运行时环境规范供应商</span></span><br><span class="line">java.specification.name <span class="comment">// Java运行时环境规范名称</span></span><br><span class="line">java<span class="class">.<span class="keyword">class</span>.<span class="title">version</span>  // <span class="title">Java</span>类格式版本号</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">class</span>.<span class="title">path</span> // <span class="title">Java</span>类路径</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">library</span>.<span class="title">path</span>   // 加载库时搜索的路径列表</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">io</span>.<span class="title">tmpdir</span>  // 默认的临时文件路径</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">compiler</span>   // 要使用的 <span class="title">JIT</span> 编译器的名称</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">ext</span>.<span class="title">dirs</span>   // 一个或多个扩展目录的路径</span></span><br><span class="line"><span class="class"><span class="title">os</span>.<span class="title">name</span> // 操作系统的名称</span></span><br><span class="line"><span class="class"><span class="title">os</span>.<span class="title">arch</span> // 操作系统的架构</span></span><br><span class="line"><span class="class"><span class="title">os</span>.<span class="title">version</span>  // 操作系统的版本</span></span><br><span class="line"><span class="class"><span class="title">file</span>.<span class="title">separator</span>  // 文件分隔符（在 <span class="title">UNIX</span> 系统中是“/”）</span></span><br><span class="line">path.separator  // 路径分隔符（在 UNIX 系统中是“:”）</span><br><span class="line">line.separator  <span class="comment">// 行分隔符（在 UNIX 系统中是“/n”）</span></span><br><span class="line">user.name   <span class="comment">// 用户的账户名称</span></span><br><span class="line">user.home   <span class="comment">// 用户的主目录</span></span><br><span class="line">user.dir    <span class="comment">// 用户的当前工作目录</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 学习笔记之 MiniKube 安装</title>
    <url>/2018/01/12/kubernetes-minikube-installation/</url>
    <content><![CDATA[<p>Kubernetes 集群的搭建是有一定难度的，尤其是对于初学者来说，好多概念和原理不懂，即使有现成的教程也会出现很多不可预知的问题，很容易打击学习的积极性，就此弃坑。好在 Kubernetes 社区提供了可以在本地开发和体验的极简集群安装 MiniKube，对于入门学习来说很方便。</p>
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1fo7n00rkl6j20b40b4goj.jpg" class="" width="300">
<!-- ![minikube][1] -->

<p>MiniKube 官方安装介绍已经非常详细了，可以参考 <a href="https://github.com/kubernetes/minikube#installation" target="_blank" rel="noopener">installation</a>。但是在国内由于网络访问原因（懂的），即使有梯子也很折腾，所以记录一下阿里修改后的 MiniKube 安装。使用阿里修改后的 MiniKube 就可以从阿里云的镜像地址来获取所需 Docker 镜像和配置，其它的并没有差异，下文着重介绍。</p>
<a id="more"></a>

<h2 id="一、kubectl-安装"><a href="#一、kubectl-安装" class="headerlink" title="一、kubectl 安装"></a>一、kubectl 安装</h2><p>MiniKube 的安装需要先安装 kubectl 及相关驱动，这没什么好说的，参考<a href="https://github.com/kubernetes/minikube#requirements" target="_blank" rel="noopener">官方介绍</a>。</p>
<p>另 kubectl 也可通过源代码编译安装，编译源码需要有 Git、Golang 环境的支撑。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ git <span class="built_in">clone</span> https://github.com/kubernetes/kubernetes.git</span><br><span class="line">➜ <span class="built_in">cd</span> kubernetes</span><br><span class="line">➜ make</span><br><span class="line">➜ sudo cp _output/bin/kubectl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">➜ sudo chmod +x /usr/<span class="built_in">local</span>/bin/kubectl</span><br></pre></td></tr></table></figure>

<h2 id="二、MiniKube-安装"><a href="#二、MiniKube-安装" class="headerlink" title="二、MiniKube 安装"></a>二、MiniKube 安装</h2><p>MiniKube 是使用 Go 语言开发的，所以安装其实很方便，一是通过下载基于不同平台早已编译好的二级制文件安装，二是可以编译源文件安装。</p>
<h3 id="2-1-二级制文件安装"><a href="#2-1-二级制文件安装" class="headerlink" title="2.1 二级制文件安装"></a>2.1 二级制文件安装</h3><ul>
<li>Mac OSX 平台</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.24.1/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure>

<ul>
<li>Linux 平台</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.24.1/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure>

<ul>
<li>Windows 平台</li>
</ul>
<p>下载 <a href="http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.24.1/minikube-windows-amd64.exe" target="_blank" rel="noopener">minikube-windows-amd64.exe</a> 文件，并重命名为 <code>minikube.exe</code>，然后加入到环境变量路径下即可。</p>
<h3 id="2-2-源码编译安装"><a href="#2-2-源码编译安装" class="headerlink" title="2.2 源码编译安装"></a>2.2 源码编译安装</h3><p>编译源码需要有 Git、Golang 环境的支撑。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ git <span class="built_in">clone</span> https://github.com/AliyunContainerService/minikube</span><br><span class="line">➜ <span class="built_in">cd</span> minikube</span><br><span class="line">➜ git checkout aliyun-v0.24.1</span><br><span class="line">➜ make</span><br><span class="line">➜ sudo cp out/minikube /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">➜ sudo chmod +x /usr/<span class="built_in">local</span>/bin/minikube</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例版本是 <code>v0.24.1</code>，可更改为<a href="https://github.com/AliyunContainerService/minikube/branches/all" target="_blank" rel="noopener">其它版本</a>。</p>
</blockquote>
<h2 id="三、简单使用"><a href="#三、简单使用" class="headerlink" title="三、简单使用"></a>三、简单使用</h2><h3 id="3-1-启动"><a href="#3-1-启动" class="headerlink" title="3.1 启动"></a>3.1 启动</h3><p>默认启动使用的是 VirtualBox 驱动，使用 <code>--vm-driver</code> 参数可以指定其它驱动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 docker 加速镜像</span></span><br><span class="line">➜ minikube start --registry-mirror=https://registry.docker-cn.com</span><br><span class="line">Starting <span class="built_in">local</span> Kubernetes v1.8.0 cluster...</span><br><span class="line">Starting VM...</span><br><span class="line">Getting VM IP address...</span><br><span class="line">Moving files into cluster...</span><br><span class="line">Setting up certs...</span><br><span class="line">Connecting to cluster...</span><br><span class="line">Setting up kubeconfig...</span><br><span class="line">Starting cluster components...</span><br><span class="line">Kubectl is now configured to use the cluster.</span><br><span class="line">Loading cached images from config file.</span><br></pre></td></tr></table></figure>

<h3 id="3-2-检测状态"><a href="#3-2-检测状态" class="headerlink" title="3.2 检测状态"></a>3.2 检测状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ minikube status</span><br><span class="line">minikube: Running</span><br><span class="line">cluster: Running</span><br><span class="line">kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.100</span><br></pre></td></tr></table></figure>

<h3 id="3-3-启动-kubernetes-dashboard"><a href="#3-3-启动-kubernetes-dashboard" class="headerlink" title="3.3 启动 kubernetes dashboard"></a>3.3 启动 kubernetes dashboard</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ minikube dashboard</span><br><span class="line">Opening kubernetes dashboard <span class="keyword">in</span> default browser...</span><br></pre></td></tr></table></figure>

<p>输入以上命令，浏览器中应该就会显示以下界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/minikube-dashboard.jpg" alt="minikube-dashboard"></p>
<h3 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h3><ul>
<li>运行一个 nginx 的 pod</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ kubectl run hello --image=nginx --port=80</span><br><span class="line">deployment <span class="string">"hello"</span> created</span><br></pre></td></tr></table></figure>

<ul>
<li>导出运行的 nginx 服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ kubectl expose deployment hello --<span class="built_in">type</span>=NodePort</span><br><span class="line">service <span class="string">"hello"</span> exposed</span><br></pre></td></tr></table></figure>

<ul>
<li>查看一下运行情况，需要等一会才会显示状态为 <code>Running</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ kubectl get pod</span><br><span class="line">NAME                    READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-6dbbbb95d-4cqwz   1/1       Running   0          2m</span><br></pre></td></tr></table></figure>

<ul>
<li>curl 访问测试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ curl $(minikube service hello --url)</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-其它"><a href="#3-5-其它" class="headerlink" title="3.5 其它"></a>3.5 其它</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集群的所有资源</span></span><br><span class="line">➜ kubectl get all</span><br><span class="line">➜ kubectl get all -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入节点服务器</span></span><br><span class="line">➜ minikube ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行节点服务器命令，例如查看节点 docker info</span></span><br><span class="line">➜ minikube ssh -- docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集群</span></span><br><span class="line">➜ minikube delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭集群</span></span><br><span class="line">➜ minikube stop</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://yq.aliyun.com/articles/221687" target="_blank" rel="noopener">Minikube - Kubernetes本地实验环境</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>minikube</tag>
        <tag>kubernetes</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中 fg、bg、jobs 等指令</title>
    <url>/2017/01/18/Linux-%E4%B8%AD-fg%E3%80%81bg%E3%80%81jobs%E3%80%81-%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>记录总结一下 <code>Linux</code> 中 <code>fg</code>、<code>bg</code>、<code>jobs</code>、<code>&amp;</code>、<code>ctrl + z</code> 等相关指令对任务进程的操作。</p>
</blockquote>
<h1 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h1><h2 id="1-1-amp-和-jobs-指令"><a href="#1-1-amp-和-jobs-指令" class="headerlink" title="1.1 &amp; 和 jobs 指令"></a>1.1 <code>&amp;</code> 和 <code>jobs</code> 指令</h2><p><code>&amp;</code> 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。</p>
<p><code>jobs</code> 查看当前终端有多少在后台运行的进程。</p>
<ul>
<li><p><code>jobs</code> 命令执行的结果，<code>＋</code> 表示是一个当前的作业，<code>-</code> 减号表示是一个当前作业之后的一个作业。</p>
</li>
<li><p><code>jobs -l</code> 选项可显示所有任务的进程号 <code>pid</code></p>
</li>
<li><p><code>jobs</code> 的状态可以是 <code>running</code>，<code>stopped</code>，<code>terminated</code>。但是如果任务进程被终止了（<code>kill</code>），当前的终端环境中也就删除了任务的进程标识；也就是说 <strong>jobs 命令显示的是当前 shell 环境中后台正在运行或者被挂起的任务进程信息</strong></p>
</li>
</ul>
<a id="more"></a>
<h2 id="1-3-fg-和-bg-指令"><a href="#1-3-fg-和-bg-指令" class="headerlink" title="1.3 fg 和 bg 指令"></a>1.3 <code>fg</code> 和 <code>bg</code> 指令</h2><p><code>fg</code> 将后台任务进程调至前台继续运行，如果后台中有多个任务进程，可以用 <code>fg %num</code> 将选中的任务进程调至前台。</p>
<p><code>bg</code> 将挂起的任务进程重新启动运行，如果有多个暂停的任务进程，可以用 <code>bg %num</code> 将选中的任务进程启动运行。</p>
<blockquote>
<p><code>%num</code> 是通过 <code>jobs</code> 命令查到的后台正在执行的任务的序号（不是 <code>pid</code>）</p>
</blockquote>
<h1 id="二、进程的挂起"><a href="#二、进程的挂起" class="headerlink" title="二、进程的挂起"></a>二、进程的挂起</h1><h2 id="2-1-后台进程的挂起"><a href="#2-1-后台进程的挂起" class="headerlink" title="2.1 后台进程的挂起"></a>2.1 后台进程的挂起</h2><ul>
<li><p>在 <code>solaris</code> 中通过 <code>stop</code> 命令执行，通过 <code>jobs</code> 命令查看任务号（假设为 <code>num</code>），然后执行：<code>stop %num</code></p>
</li>
<li><p>在 <code>redhat</code> 中，不存在 <code>stop</code> 命令，可通过执行命令 <code>kill -stop PID</code>，将进程挂起</p>
</li>
</ul>
<h2 id="2-2-前台进程的挂起"><a href="#2-2-前台进程的挂起" class="headerlink" title="2.2 前台进程的挂起"></a>2.2 前台进程的挂起</h2><p><code>ctrl + z</code>：可以将一个正在前台执行的任务放到后台运行，并且挂起</p>
<h1 id="三、挂起进程重新运行"><a href="#三、挂起进程重新运行" class="headerlink" title="三、挂起进程重新运行"></a>三、挂起进程重新运行</h1><ul>
<li><p>通过 <code>bg %num</code> 即可将挂起的任务进程的状态由 <code>stopped</code> 改为 <code>running</code>，仍在后台运行</p>
</li>
<li><p>通过 <code>fg %num</code> 即可将挂起的任务进程转为前台执行</p>
</li>
</ul>
<h1 id="四、进程的终止"><a href="#四、进程的终止" class="headerlink" title="四、进程的终止"></a>四、进程的终止</h1><h2 id="4-1-后台进程的终止"><a href="#4-1-后台进程的终止" class="headerlink" title="4.1 后台进程的终止"></a>4.1 后台进程的终止</h2><ul>
<li><p>方法一： 通过 <code>jobs</code> 命令查看任务号（假设为 <code>num</code>），然后执行：<code>kill %num</code></p>
</li>
<li><p>方法二： 通过 <code>ps</code> 命令查看任务的进程号（<code>PID</code>，假设为 <code>pid</code>），然后执行：<code>kill pid</code></p>
</li>
</ul>
<h2 id="4-2-前台进程的终止"><a href="#4-2-前台进程的终止" class="headerlink" title="4.2 前台进程的终止"></a>4.2 前台进程的终止</h2><p>执行 <code>ctrl+c</code> 即可终止前台执行任务进程</p>
<blockquote>
<p>假设要后台运行 <code>xmms</code>，可通过命令：<code>xmms &amp;</code>。但万一你运行程序时忘记使用 <code>&amp;</code> 了，又不想重新执行，你可以先使用 <code>ctrl+z</code> 挂起任务进程，然后敲入<code>bg</code> 命令，这样任务进程就在后台继续运行了。</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 操作笔记</title>
    <url>/2017/04/14/Linux-%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>好记性不如烂笔头，记录一下日常工作学习中常使用的 Linux 命令。</p>
</blockquote>
<h1 id="安装磁盘分配"><a href="#安装磁盘分配" class="headerlink" title="安装磁盘分配"></a>安装磁盘分配</h1><ul>
<li><code>/boot</code> 用来存放与 Linux 系统启动有关的程序，比如启动引导装载程序等，建议大小为 100MB。</li>
<li><code>swap</code> 实现虚拟内存，建议大小是物理内存的1~2倍。</li>
<li><code>/</code> Linux系统的根目录，所有的目录都挂在这个目录下面，建议大小为5GB以上。</li>
<li><code>/home</code> 存放普通用户的数据，是普通用户的宿主目录，建议大小为剩下的空间。</li>
</ul>
<h1 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h1><ul>
<li><code>/</code>：存放系统程序，也就是 At&amp;t 开发的 Unix 程序。</li>
<li><code>/usr</code>：存放 Unix 系统商（比如 IBM 和 HP）开发的程序。</li>
<li><code>/usr/local</code>：存放用户自己安装的程序。</li>
<li><code>/opt</code>：在某些系统，用于存放第三方厂商开发的程序，所以取名为 option，意为 “选装”。</li>
</ul>
<a id="more"></a>

<h1 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h1><ul>
<li><code>ls</code> 列出当前目录下的文件 <code>ls ser*</code> 查找 ser 打头的文件</li>
<li><code>ls -l</code> （简化为：<code>ll</code>）列出当前目录下文件的详细信息</li>
<li><code>ls -a</code> 列出当前目录下的所有文件（包括隐藏文件）</li>
<li><code>ls -t</code> 依时间排序，而不是用档名</li>
<li><code>ls -S</code> 依大小排序，<code>ls -Sr</code> 按大小倒序</li>
<li><code>ls --full-time</code> 以完整时间模式 (包含年、月、日、时、分) 输出（ Mac 是 <code>ls -T</code>）</li>
<li><code>ll -d</code> 查看当前目录的详细信息</li>
<li><code>ll -a</code> 详细列出当前目录下的所有文件</li>
<li><code>ll 路径</code> 列出指定路径（可为相对或绝对路径）下的文件</li>
<li><code>ll -d 路径</code> 查看指定路径的详细信息</li>
<li>打开文件夹：<code>cd 路径</code><ul>
<li><code>cd /etc （相对路径）</code> 或 <code>cd xxx（绝对路径）</code></li>
<li>返回上一级目录：<code>cd ..</code></li>
</ul>
</li>
<li>查看当前目录：<code>pwd</code>（path where dir）</li>
<li>查看当前用户：<code>whoami</code></li>
<li>切换用户：<code>su -用户名</code> 或者 <code>su 用户名</code>（从其他用户切换到 root 用户需要密码，从 root 用户切换到任何其他用户不需要密码）<ul>
<li>切换到 root 用户：su</li>
<li>切换到 root 用户后使用命令：exit 切换到普通用户</li>
</ul>
</li>
<li>清屏：<code>clear</code> 或者 <code>Ctrl + L</code></li>
<li>关机：<code>halt</code> 或者 <code>shutdown -h now</code></li>
<li>修改密码：修改 root 自己的密码，直接输入 <code>passwd</code>，输入两遍新密码即可。若修改其他用户，如 oracle 的密码，可直接输入 <code>passwd oracle</code>，输入两遍性新密码即可。</li>
<li>查看系统编码：<code>locale</code></li>
<li>获取权限：<code>chmod 777 文件名</code></li>
<li>检索（例如检索 profile）：<code>ls -l | grep profile</code></li>
<li>文件拖拽软件安装：<code>yum install lrzsz</code></li>
<li>查看进程：<code>ps -ef</code>、<code>ps auxf</code></li>
<li>查看端口：<code>netstat -antlp | grep xx</code></li>
<li>查看资源占用情况：<code>top</code>（<code>Shit + &gt;</code> 切换排序列）</li>
<li>查看内存：<code>free -m/g</code></li>
<li>查看目录大小：<code>du -sh /opt/registry</code></li>
<li>修改配置文件后立即生效：<code>sysctl -p</code></li>
<li>查看系统环境变量：<code>env</code></li>
<li><code>dirname</code> 用于取指定路径所在的目录，如：<code>dirname /home/ikidou</code>，结果为：<code>/home</code></li>
<li><code>cd dirname $0</code>：一般用户 Shell 脚本中，切换到执行脚本所在的目录</li>
<li><code>tee</code>：在执行 Linux 命令时，我们可以把输出重定向到文件中，比如 <code>ls &gt; a.txt</code>，这时我们就不能看到输出了，如果我们既想把输出保存到文件中，又想在屏幕上看到输出内容，就可以使用 <code>tee</code> 命令</li>
<li><code>tree</code>：树形查看当前目录结构</li>
<li>系统负载查看：<code>uptime</code>、<code>w</code>、<code>top</code> 命令<ul>
<li>“load average”，它的意思是 “系统的平均负荷”，里面有三个数字表示 1分钟、5分钟、15分钟内系统的平均负荷。</li>
</ul>
</li>
<li>列出谁在使用 3306 端口：<code>lsof -i:3306</code></li>
</ul>
<h1 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h1><p>路径（绝对路径、相对路径）</p>
<ul>
<li><p>创建文件夹：<code>mkdir [路径] + 文件夹</code></p>
<ul>
<li><code>mkdir [路径] + 文件夹1 [路径] + 文件夹2</code>（可以同时创建多个文件夹，空格隔开）</li>
<li><code>mkdir -p [路径]/[路径]</code> (创建多层级目录)</li>
</ul>
</li>
<li><p>创建文件：<code>touch [路径] + 文件名</code></p>
<ul>
<li><code>touch [路径] + 文件名1 [路径] + 文件名2</code>（可以同时创建多个文件，空格隔开）</li>
</ul>
</li>
<li><p>如何区分是文件夹还是文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20170414001.png" alt=""></p>
</li>
<li><p>删除（remove）文件：<code>rm [路径] + 文件名</code> （可以删除多个文件，每个文件用空格隔开）</p>
<ul>
<li>删除文件夹：<code>rm -r 文件夹1 文件夹2</code>（递归 recursive 删除文件夹1和文件夹2下的所有内容，每删除一个会提示）</li>
<li><code>rm -rf 文件夹</code>（强制 force 删除文件夹下的所有内容，不提示删除）删除后无法还原</li>
<li>删除文件夹或者： <code>rmdir 文件夹</code>（文件夹必须为空）</li>
<li>删除所有内容：<code>rm -rf *</code></li>
</ul>
</li>
<li><p>复制（copy）文件：<code>cp 源文件 目标文件夹</code>（正常情况下使用绝对路径） -复制文件夹：<code>cp -r 源文件 目标文件夹</code></p>
</li>
<li><p>移动（move）文件：<code>mv 源文件 目标文件夹</code>（正常情况下使用绝对路径）</p>
<ul>
<li>移动文件夹：<code>mv 源文件夹 目标文件夹</code></li>
<li>重命名：<code>mv aa.txt aaaa.txt</code></li>
</ul>
</li>
</ul>
<h1 id="文件读写命令"><a href="#文件读写命令" class="headerlink" title="文件读写命令"></a>文件读写命令</h1><ul>
<li><code>echo &quot;Hello World&quot; &gt;&gt; a.txt</code> 将字符串 Hello World <code>追加</code>到文件 a.txt 中。<ul>
<li><code>echo &quot;Hello World&quot; &gt; a.txt</code> 将文件 a.txt 中的内容<code>替换</code>为字符串 Hello World。</li>
</ul>
</li>
<li>查看文件内容：<code>cat a.txt</code><ul>
<li><code>more services</code> 分页查看 services 文件中的内容，按空格或 f 切换下一页，回车下一行,q 退出。（文件内容较多时使用）</li>
<li><code>head services</code> 查看 services 文件前 10 行的内容（默认前 10 行） <code>head -20 services</code> （前20行的内容）</li>
<li><code>tail services</code> 查看 services 文件结尾 10 行的内容 <code>tail -20f services</code>（滚动显示结尾 20 行的内容）</li>
<li><code>vi/vim services</code> vi 可以修改文件</li>
</ul>
</li>
<li>文件链接：<code>ln 文件 链接</code> 修改源文件或者链接文件，两者同时更新<ul>
<li><code>ln -s /test/a.txt /test/as.txt</code> 软链接 as.txt 就是针对 a.txt 的软链接（类似如 windows 的快捷方式）a.txt 删除后，as.txt无效</li>
<li><code>ln /test/a.txt /test/ah.txt</code> 硬链接 a.txt 删除后 ah.txt 仍然有效</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 的 nohup 命令的用法</title>
    <url>/2017/01/18/Linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 <code>nohup</code> 命令。</p>
</blockquote>
<h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nohup Command [ Arg … ] [ &amp; ]</span><br></pre></td></tr></table></figure>

<p>该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。<code>nohup</code> 就是不挂起的意思（<code>no hang up</code>）。</p>
<p><code>nohup</code> 运行由 <code>Command</code> 和相关的 <code>Arg</code> 参数指定的命令，忽略所有挂断（<code>SIGHUP</code>）信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示 <code>and</code> 的符号）到命令的尾部。</p>
<p>如果使用 <code>nohup</code> 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 <code>nohup.out</code> 的文件中，除非另外指定了输出文件。</p>
<a id="more"></a>
<h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，运行命令 <code>java -jar adapter-minisite.jar</code> 输入参数 <code>/tomcat-1</code> 和 <code>/tomcat-2</code>，输出被重定向到 <code>logs.txt</code> 文件中。</p>
<h1 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h1><p>如果运行的任务在当前 <code>shell</code> 终端，可以通过 <code>jobs</code> 命令查询相关信息，并且杀掉进程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前 shell 终端的后台运行任务进程信息</span></span><br><span class="line">$ <span class="built_in">jobs</span></span><br><span class="line">[1]+ Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉任务号</span></span><br><span class="line">$ <span class="built_in">kill</span> %1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或着找到 pid</span></span><br><span class="line">$ <span class="built_in">jobs</span> -l</span><br><span class="line">[1]+ 11076 Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">kill</span> 11076</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或着</span></span><br><span class="line">$ <span class="built_in">fg</span> %n <span class="comment"># 置为前端运行</span></span><br><span class="line"></span><br><span class="line">Ctrl + c <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure>

<p>如果非当前 <code>shell</code> 终端，可以通过 <code>ps auxf | grep &#39;adapter-minisite&#39;</code> 获取 <code>pid</code> 然后 <code>kill pid</code>。</p>
<hr>
<p><a href="http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>nohup</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 使用技巧总结</title>
    <url>/2017/02/21/Mac-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>Mac 系统日常使用技巧归纳总结。</p>
</blockquote>
<h1 id="一、Mac-中-Finder-显示、关闭隐藏文件"><a href="#一、Mac-中-Finder-显示、关闭隐藏文件" class="headerlink" title="一、Mac 中 Finder 显示、关闭隐藏文件"></a>一、Mac 中 Finder 显示、关闭隐藏文件</h1><h2 id="1-1-终端命令模式"><a href="#1-1-终端命令模式" class="headerlink" title="1.1 终端命令模式"></a>1.1 终端命令模式</h2><ul>
<li><p>打开终端，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 此命令显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此命令关闭显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令运行之后需要重新加载 Finder</p>
<p>快捷键 <code>Option + Command + ESC</code>，选中 <code>Finder</code>，重新启动即可</p>
</li>
</ul>
<h2 id="1-2-Finder-快捷键"><a href="#1-2-Finder-快捷键" class="headerlink" title="1.2 Finder 快捷键"></a>1.2 Finder 快捷键</h2><p>在 macOS Sierra（10.12） 版本的系统中，我们可以使用快捷键<code>⌘⇧.</code>(<code>Command + Shift + .</code>) 来快速（在 Finder 中）显示和隐藏隐藏文件了。</p>
<a id="more"></a>

<h1 id="二、Terminal-中使用-Sublime-打开文件"><a href="#二、Terminal-中使用-Sublime-打开文件" class="headerlink" title="二、Terminal 中使用 Sublime 打开文件"></a>二、Terminal 中使用 Sublime 打开文件</h1><h2 id="2-1-如果使用默认-Shell"><a href="#2-1-如果使用默认-Shell" class="headerlink" title="2.1 如果使用默认 Shell"></a>2.1 如果使用默认 Shell</h2><p>在 <code>Terminal</code> 输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl" /usr/bin/subl</span><br></pre></td></tr></table></figure>

<h2 id="2-2-如果使用-zsh"><a href="#2-2-如果使用-zsh" class="headerlink" title="2.2 如果使用 zsh"></a>2.2 如果使用 zsh</h2><p>在文件 <code>~/.zshrc</code> 最后添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias subl="'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'"</span><br><span class="line"></span><br><span class="line">alias nano="subl"</span><br><span class="line"></span><br><span class="line">export EDITOR="subl"</span><br></pre></td></tr></table></figure>

<p>然后在 <code>Terminal</code> 中使用 <code>subl</code> 就可以打开 <code>Sublime</code> 了。</p>
<h2 id="2-3-使用-Sublime-打开指定的文件"><a href="#2-3-使用-Sublime-打开指定的文件" class="headerlink" title="2.3 使用 Sublime 打开指定的文件"></a>2.3 使用 Sublime 打开指定的文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open -a Sublime\ Text .m2/settings.xml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用 <code>Tab</code> 自定补全应用名称</p>
</blockquote>
<h1 id="三、多屏切换-dock-显示"><a href="#三、多屏切换-dock-显示" class="headerlink" title="三、多屏切换 dock 显示"></a>三、多屏切换 dock 显示</h1><p>如果 <code>dock</code> 在屏幕底部显示，移动鼠标到要显示 <code>dock</code> 的屏幕上，单击使屏幕处于选中状态，在屏幕底部中间部位向下滑动鼠标即可移动 <code>dock</code> 到当前屏幕上显示。</p>
<h1 id="四、Terminal-重启-Finder、dock-等命令"><a href="#四、Terminal-重启-Finder、dock-等命令" class="headerlink" title="四、Terminal 重启 Finder、dock 等命令"></a>四、Terminal 重启 Finder、dock 等命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Finder 崩溃重启</span></span><br><span class="line">killall -kill Finder</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dock 崩溃重启</span></span><br><span class="line">killall -kill Dock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 菜单栏崩溃重启</span></span><br><span class="line">killall -kill SystemUIServer</span><br></pre></td></tr></table></figure>

<h1 id="五、Terminal-中用打开当前路径的文件夹"><a href="#五、Terminal-中用打开当前路径的文件夹" class="headerlink" title="五、Terminal 中用打开当前路径的文件夹"></a>五、Terminal 中用打开当前路径的文件夹</h1><p>在 <code>Terminal</code> 中输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure>

<h1 id="六、剪贴文件"><a href="#六、剪贴文件" class="headerlink" title="六、剪贴文件"></a>六、剪贴文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 复制</span></span><br><span class="line">Command + c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 剪切到当前目录</span></span><br><span class="line">Command + Option + v</span><br></pre></td></tr></table></figure>

<h1 id="七、快速打开最小化程序"><a href="#七、快速打开最小化程序" class="headerlink" title="七、快速打开最小化程序"></a>七、快速打开最小化程序</h1><p><code>Command + Tab</code> 切换程序的时候，最小化的程序不自动弹出窗口，解决办法如下：</p>
<ul>
<li>用 <code>Command + Tab</code> 切换到要打开的程序</li>
<li>先松开 <code>Tab</code> 键，不要松开 <code>Command</code> 键</li>
<li>然后按住 <code>Option</code> 键</li>
<li>然后依次松开 <code>Command</code> 和 <code>Option</code> 键</li>
</ul>
<p>如上操作就可以快速打开最小化的程序了。</p>
<h1 id="八、常用快捷键"><a href="#八、常用快捷键" class="headerlink" title="八、常用快捷键"></a>八、常用快捷键</h1><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">Mac 键盘快捷键官方参考</a></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>预览文件</td>
<td><code>空格</code></td>
</tr>
<tr>
<td>重命名</td>
<td><code>Enter</code></td>
</tr>
<tr>
<td>打开文件</td>
<td><code>Command + o</code>、<code>Command + ↓</code></td>
</tr>
<tr>
<td>显示桌面</td>
<td><code>F11</code></td>
</tr>
<tr>
<td>切换窗口全屏状态</td>
<td><code>Ctrl + Cmmad + f</code></td>
</tr>
<tr>
<td>影藏/显示 Dock</td>
<td><code>Command + Option + d</code></td>
</tr>
<tr>
<td>输入 emoji 表情</td>
<td><code>Ctrl + Cmmad + 空格</code></td>
</tr>
</tbody></table>
<h1 id="九、-DS-Store-文件处理"><a href="#九、-DS-Store-文件处理" class="headerlink" title="九、.DS_Store 文件处理"></a>九、.DS_Store 文件处理</h1><p><a href="https://zh.wikipedia.org/wiki/.DS_Store" target="_blank" rel="noopener">.DS_Store (英文全称 Desktop Services Store) 是一种由苹果公司的 Mac OS X 操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。</a></p>
<h2 id="9-1-清除文件"><a href="#9-1-清除文件" class="headerlink" title="9.1 清除文件"></a>9.1 清除文件</h2><p>清除命令：</p>
<p><code>sudo find / -name &quot;.DS_Store&quot; -depth -exec rm {} \;</code></p>
<h2 id="9-2-禁用或启用自动生成"><a href="#9-2-禁用或启用自动生成" class="headerlink" title="9.2 禁用或启用自动生成"></a>9.2 禁用或启用自动生成</h2><p>执行以下命令，回车执行，重启 Mac 即可生效。</p>
<ul>
<li>禁止.DS_store生成：</li>
</ul>
<p><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></p>
<ul>
<li>恢复.DS_store生成：</li>
</ul>
<p><code>defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></p>
<h1 id="十、NTFS-格式移动盘写入文件"><a href="#十、NTFS-格式移动盘写入文件" class="headerlink" title="十、NTFS 格式移动盘写入文件"></a>十、NTFS 格式移动盘写入文件</h1><p>一般来说，MacOS 是不支持 NTFS 格式磁盘的写入，可以借助三方工具，例如：Tuxera NTFS，不过收费还挺高的。这里介绍一种方法，不需要借助三方工具也可以实现 NTFS 格式磁盘写入。（基于系统版本 <code>macOS Sierra 10.12.4</code>  亲测可行）</p>
<ul>
<li><p>插入移动硬盘，终端输入命令：<code>$ diskutil list</code> 查看移动硬盘名称。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ diskutil list</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#x2F;dev&#x2F;disk2 (external, physical):</span><br><span class="line">   #:                       TYPE NAME            SIZE       IDENTIFIER</span><br><span class="line">   0:     FDisk_partition_scheme                 *500.1 GB   disk2</span><br><span class="line">   1:               Windows_NTFS EHLXR           500.1 GB   disk2s4</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>编辑系统文件 <code>sudo vim /etc/fstab</code> ，写入以下内容，然后保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LABEL&#x3D;EHLXR none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure>

<p>其中 <code>EHLXR</code> 为移动硬盘名称。</p>
</li>
<li><p>推出硬盘重新插入，这时候桌面已不再显示移动硬盘图标。</p>
</li>
<li><p>在 Finder 中通过快捷键 <code>Command + Shift + g</code> 输入<code>/Volumes</code> 就可以重新看到移动硬盘，这时候打开移动硬盘就可以写入文件了。</p>
</li>
<li><p>为了方便起见，可以通过命令：<code>sudo ln -s /Volumes ~/Desktop/Volumes</code> 在桌面建立快捷方式，方便查看。</p>
</li>
</ul>
<hr>
<p><em>未完待续…</em></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 实用小工具</title>
    <url>/2018/03/30/mac-utility-tools/</url>
    <content><![CDATA[<blockquote>
<p>记录备忘一下 Mac 系统下一些实用的小工具</p>
</blockquote>
<h2 id="收费"><a href="#收费" class="headerlink" title="收费"></a>收费</h2><ul>
<li><code>Bartender</code> : 菜单栏管理工具，可以将菜单放进 Bartender 的二级菜单</li>
<li><code>SizeUp</code> : 实用分屏小工具</li>
<li><code>Proxifier</code> :  配合 ss/ssr 可以实现真正的全局代理软件</li>
<li><code>iStat Menus</code> : 能够在系统菜单栏实时监控 CPU、内存、硬盘、网络、温度、电池以及系统时间等</li>
<li><code>CleanMyMac</code> : 系统清理工具，可以清除 mac 系统多余的语言包、系统缓存、应用程序等</li>
<li><code>KeyCue</code> : 快捷键辅助工具，忘记一些快捷键的时候按住 Command 就会出现快捷键大全的菜单</li>
<li><code>Araxis Merge</code> : 可视化文件合并以及数据同步工具</li>
<li><code>BetterZip</code> : 功能非常强大的压缩解压缩软件</li>
<li><code>Parallels Desktop</code> : 最佳 Mac 虚拟机解决方案</li>
<li><code>TinyCal</code> : 小历 - 小而美的日历 (OS X)</li>
</ul>
<a id="more"></a>
<h2 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h2><ul>
<li><code>Vanilla</code> : <code>Bartender</code> 的免费替代 APP <a href="https://matthewpalmer.net/vanilla/" target="_blank" rel="noopener">官网</a></li>
<li><code>Hidden Bar</code> : 隐藏 macOS 菜单栏不常用的应用图标，替代 Bartender 3 <a href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener">github</a></li>
<li><code>AccessMenuBarApps</code> : 影藏菜单栏的左侧部分内容。配合 Hidden Bar 使用（设置为同一个快捷键） <a href="http://www.ortisoft.de/en/accessmenubarapps/" target="_blank" rel="noopener">官网</a></li>
<li><code>Rectangle</code> : <code>SizeUp</code> 的免费替代 APP <a href="https://github.com/rxhanson/Rectangle" target="_blank" rel="noopener">github</a></li>
<li><code>Alfred</code> : Mac 效率神器，Spotlight 完美替代产品（需要付费购买部分功能）<a href="https://www.alfredapp.com/" target="_blank" rel="noopener">官网</a></li>
<li><code>iTerm2</code> : 是一款完全免费的，专为 Mac OS 用户打造的命令行应用 <a href="https://iterm2.com/" target="_blank" rel="noopener">官网</a></li>
<li><code>Typora</code> : 极致简洁的 markdown 编辑器 <a href="https://www.typora.io/" target="_blank" rel="noopener">官网</a></li>
<li><code>Kap</code> : 免费开源的屏幕录像软件 <a href="https://github.com/wulkano/kap" target="_blank" rel="noopener">github</a></li>
<li><code>Karabiner Elements</code> : 修改键位映射软件 <a href="https://github.com/pqrs-org/Karabiner-Elements" target="_blank" rel="noopener">github</a></li>
<li><code>Gas Mask</code> : 免费开源的 hosts 管理软件 <a href="https://github.com/2ndalpha/gasmask" target="_blank" rel="noopener">github</a></li>
<li><code>KeePassX</code> : 免费开源的密码管理软件 <a href="https://github.com/keepassx/keepassx" target="_blank" rel="noopener">github</a></li>
<li><code>Keka</code> : 丑到极致的压缩、解压软件（不换图标不忍直视）<a href="https://github.com/aonez/Keka" target="_blank" rel="noopener">github</a></li>
<li><code>The Unarchiver</code> : 承诺会永久免费全能的解压缩软件 <a href="https://theunarchiver.com/" target="_blank" rel="noopener">官网</a></li>
<li><code>Android 文件传输</code> : 安卓手机数据线传输助手 <a href="https://www.android.com/filetransfer/" target="_blank" rel="noopener">官网</a></li>
<li><code>AppCleaner</code> : 应用程序卸载助手 <a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="noopener">官网</a></li>
<li><code>Tencent Lemon</code> : 腾讯出品的 Mac 清理工具 <a href="https://lemon.qq.com/" target="_blank" rel="noopener">官网</a></li>
<li><code>IINA</code> : 很好用的本地视频播放器 <a href="https://github.com/iina/iina" target="_blank" rel="noopener">github</a></li>
<li><code>OpenInTerminal</code> : 在终端（或编辑器）中打开当前目录 <a href="https://github.com/Ji4n1ng/OpenInTerminal" target="_blank" rel="noopener">github</a></li>
<li><code>FileZilla</code> : 跨平台 FTP 客户端工具 <a href="https://filezilla-project.org/" target="_blank" rel="noopener">官网</a></li>
<li><code>Mos</code> : 平滑鼠标滚动效果或单独设置滚动方向的小工具 <a href="https://github.com/Caldis/Mos" target="_blank" rel="noopener">github</a></li>
<li><code>Another.Redis.Desktop.Manager</code> :  <a href="https://github.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">github</a></li>
<li><code>Draw.io</code> : 强大简洁的在线的绘图网站，也提供了多平台的离线桌面版可供下载 <a href="https://github.com/jgraph/drawio" target="_blank" rel="noopener">github</a></li>
<li><code>eZip</code> : 简洁易用的免费压缩软件 <a href="https://ezip.awehunt.com/" target="_blank" rel="noopener">官网</a></li>
<li><code>iRightMouse</code> : 超级右键，强大的右键菜单工具 <a href="https://www.better365.cn/" target="_blank" rel="noopener">官网</a></li>
<li><code>Bob</code> : Bob 是一款 Mac 端翻译软件 <a href="https://github.com/ripperhe/Bob" target="_blank" rel="noopener">github</a></li>
<li><code>ImageOptim</code> : 是一款小巧免费且开源的 Mac 图片无损压缩优化工具 <a href="https://imageoptim.com/mac" target="_blank" rel="noopener">官网</a></li>
<li><code>Sourcetree</code> : SourceTree 是 Windows 和 Mac OS X 下免费的 Git 客户端 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">官网</a></li>
<li><code>BitWarden</code> : 免费的开源密码管理服务 <a href="https://github.com/bitwarden" target="_blank" rel="noopener">github</a> ，自我托管服务搭建<a href="https://github.com/dani-garcia/bitwarden_rs" target="_blank" rel="noopener">github</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日期函数</title>
    <url>/2016/07/20/MySQL%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="1-取得当天"><a href="#1-取得当天" class="headerlink" title="1. 取得当天"></a>1. 取得当天</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT curdate();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| curdate()  |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 2013-07-29 |</span><br><span class="line">+<span class="comment">------------+</span></span><br></pre></td></tr></table></figure>

<h4 id="2-取得当前日期"><a href="#2-取得当前日期" class="headerlink" title="2. 取得当前日期"></a>2. 取得当前日期</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sysdate();</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| sysdate()           |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 2016-05-30 13:58:17 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">now</span>();</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| now()               |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 2016-05-30 13:58:29 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h4 id="3-取得当前时间"><a href="#3-取得当前时间" class="headerlink" title="3. 取得当前时间"></a>3. 取得当前时间</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select curtime();</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| curtime() |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| 13:54:31  |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span></span><br></pre></td></tr></table></figure>

<h4 id="4-取得前一天"><a href="#4-取得前一天" class="headerlink" title="4. 取得前一天"></a>4. 取得前一天</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select date_sub(curdate(),interval 1 day);</span><br><span class="line">+<span class="comment">------------------------------------+</span></span><br><span class="line">| date_sub(curdate(),interval 1 day) |</span><br><span class="line">+<span class="comment">------------------------------------+</span></span><br><span class="line">| 2013-07-28                         |</span><br><span class="line">+<span class="comment">------------------------------------+</span></span><br></pre></td></tr></table></figure>

<h4 id="5-取得下一天"><a href="#5-取得下一天" class="headerlink" title="5. 取得下一天"></a>5. 取得下一天</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_ADD(NOW(),INTERVAL 1 DAY);</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">| DATE_ADD(NOW(),INTERVAL 1 DAY) |</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">| 2016-05-31 14:09:16            |</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span></span><br></pre></td></tr></table></figure>

<p>括号中为当天时间的前一天，如果统计前几天就将括号中的’1’改成相应的天数。如果要算月或年，直接将day改为month或year即可</p>
<h4 id="6-取得前一天的年份"><a href="#6-取得前一天的年份" class="headerlink" title="6. 取得前一天的年份"></a>6. 取得前一天的年份</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT YEAR(DATE_SUB(CURDATE(),INTERVAL 1 DAY));</span><br><span class="line">+<span class="comment">------------------------------------------+</span></span><br><span class="line">| YEAR(DATE_SUB(CURDATE(),INTERVAL 1 DAY)) |</span><br><span class="line">+<span class="comment">------------------------------------------+</span></span><br><span class="line">|                                     2013 |</span><br><span class="line">+<span class="comment">------------------------------------------+</span></span><br></pre></td></tr></table></figure>

<h4 id="7-SYSDATE-为：2016-05-30-周一"><a href="#7-SYSDATE-为：2016-05-30-周一" class="headerlink" title="7. SYSDATE()为：2016-05-30 周一"></a>7. SYSDATE()为：2016-05-30 周一</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEK</span>(<span class="keyword">SYSDATE</span>()); <span class="comment">-- 22</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEKOFYEAR</span>(<span class="keyword">SYSDATE</span>()); <span class="comment">-- 22</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEKDAY</span>(<span class="keyword">SYSDATE</span>()); <span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="keyword">SYSDATE</span>()); <span class="comment">-- 30</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">SYSDATE</span>()); <span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">SYSDATE</span>()); <span class="comment">-- 2016</span></span><br></pre></td></tr></table></figure>

<h4 id="8-date-sub-函数的例子"><a href="#8-date-sub-函数的例子" class="headerlink" title="8. date_sub()函数的例子"></a>8. date_sub()函数的例子</h4><p>今天是2013年5月20日</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">date_sub('2012-05-25', INTERVAL 1 DAY) <span class="comment">-- 表示 2012-05-24</span></span><br><span class="line">date_sub('2012-05-25', INTERVAL 0 DAY) <span class="comment">-- 表示 2012-05-25</span></span><br><span class="line">date_sub('2012-05-25', INTERVAL - 1 DAY) <span class="comment">-- 表示 2012-05-26</span></span><br><span class="line">date_sub('2012-05-31', INTERVAL - 1 DAY) <span class="comment">-- 表示 2012-06-01</span></span><br><span class="line">date_sub(curdate(), INTERVAL 1 DAY) <span class="comment">-- 表示 2013-05-19</span></span><br><span class="line">date_sub(curdate(), INTERVAL - 1 DAY) <span class="comment">-- 表示 2013-05-21</span></span><br><span class="line">date_sub(curdate(), INTERVAL 1 MONTH) <span class="comment">-- 表示 2013-04-20</span></span><br><span class="line">date_sub(curdate(), INTERVAL - 1 MONTH) <span class="comment">-- 表示 2013-06-20</span></span><br><span class="line">date_sub(curdate(), INTERVAL 1 YEAR) <span class="comment">-- 表示 2012-05-20</span></span><br><span class="line">date_sub(curdate(), INTERVAL - 1 YEAR) <span class="comment">-- 表示 2014-05-20</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Naruto-Pictures</title>
    <url>/2016/09/02/Naruto-Pictures/</url>
    <content><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cice6j218g0p0zpv.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7ch9rvj218g0p0jvi.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cj8xej218g0p0gqw.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cg745j218g0p0juj.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cgf88j218g0p0ju3.jpg" alt=""></div></div></div></div>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=0 height=0 src="//music.163.com/outchain/player?type=0&id=83568232&auto=1&height=90"></iframe>]]></content>
      <categories>
        <category>图片</category>
      </categories>
      <tags>
        <tag>picture</tag>
        <tag>naruto</tag>
      </tags>
  </entry>
  <entry>
    <title>Poker 机械键盘入手记</title>
    <url>/2017/04/09/Poker-%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E5%85%A5%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<p>作为一个码农，天天和键盘打交道，没有一款称心如意的键盘怎么能行了？要说那一款键盘堪称神器，我想大多数程序员首推 HHKB ，怎奈囊中羞涩，只能找一款 HHKB 的替代品，于是，Poker 浮现我的眼中，经济实惠，小巧玲珑，深得我心…</p>
<p>关注这款键盘其实很久了，虽说相对于 HHKB 来说便宜很多，但也有点儿心疼，迟迟没能入手。最近过生日，女朋友很民主的征求我的意见，问我想要什么礼物，嘿嘿</p>
<a id="more"></a>

<p>昨天下午京东入手，399 大洋，白色茶轴，今天上午就到了，嘻嘻！</p>
<h1 id="先来两张，亮亮相！"><a href="#先来两张，亮亮相！" class="headerlink" title="先来两张，亮亮相！"></a>先来两张，亮亮相！</h1><p>包装盒，”The keyboard to cheer you up“，简洁、大气！</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxxjovv60j22fm0zdjtr.jpg" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxxjox8goj22io0y2acx.jpg" alt="2"></p>
<p>PBT 材质的键帽手感棒棒的！</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxxjoxyf6j22io1w0aeg.jpg" alt="3"></p>
<p>带了六个键帽，换上之后的效果。有没有显得很有灵气(女朋友反而觉得还是全白色的好看)</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxxjoxqlgj22io0v5dir.jpg" alt="4"></p>
<p>真的很小，都不够一个手的宽度，长度比 MBP 自带键盘稍长一点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxxjp0ithj22io17p0xb.jpg" alt="5"></p>
<p>ikbc 正品，妥妥的！</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/ehlxr-poker-0.jpg" alt="6"></p>
<h1 id="修改键位"><a href="#修改键位" class="headerlink" title="修改键位"></a>修改键位</h1><p>键盘的背面有 4 个拨动开关的，他们的功能分别是：</p>
<ul>
<li>开关 1：Caps 与左 Win 切换</li>
<li>开关 2：右 Ctrl 与 ` ~ 切换</li>
<li>开关 3：左 Win 与 Fn 切换</li>
<li>开关 4：键盘写保护，键位编程</li>
</ul>
<p>这是默认的键盘布局：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxxjot7gbj20m807r75x.jpg" alt="7"></p>
<ol>
<li>将开关 1 和 3 都拨到 ON 的位置，效果：Caps 变成了 Fn，左 Win 变成了 Caps，右 Fn 还是 Fn</li>
<li>打开 Mac 的系统偏好设置，在键盘的修饰键修改中，选择 Poker</li>
<li>更改修饰键，如下：<ul>
<li>Caps Lock -&gt; Option</li>
<li>Control -&gt; Control</li>
<li>Option -&gt; Command</li>
<li>Command -&gt; Option<br><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/ehlxr-poker-3.jpg" alt="8"></li>
</ul>
</li>
<li>搞定，然后用拔键器把左侧的 Alt 和 Win 键帽互换个位置，这样就更接近 Mac 的标准布局了。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/ehlxr-poker-1.jpg" alt="9"></p>
<p>这样，左手按住 Fn + w、s、a、d 方便的实现上、下、左、右的操作了。</p>
<p>其实还有个方便使用方向键的方法，按一下<code>fn</code> + <code>空格</code>， <code>w</code>, <code>a</code>, <code>s</code>, <code>d</code>就是方向键了，再按一次则恢复到基本模式。</p>
<p>唯一的问题就是现在 <code>Caps Lock</code> 键消失了，只不过不常用。后期可以研究一下如何通过编程的方式实现其他组合键。</p>
<hr>
<p>参考：</p>
<p><a href="https://segmentfault.com/a/1190000000585559" target="_blank" rel="noopener">Poker II 机械键盘键位改造记</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 中字符串总结</title>
    <url>/2019/08/04/string-in-rust/</url>
    <content><![CDATA[<p><code>Rust</code> 中字符串和 <code>Java</code> 和 <code>Go</code> 中的表示有很大的区别，刚开始接触的时候有点儿懵，今天花点时间总结备忘一下。</p>
<p><code>Rust</code> 字符串有两种形式：<code>str</code> 和 <code>String</code>，<code>str</code> 是内置的原始数据类型，通常是以借用的形式（<code>&amp;str</code> 字符串 <code>slice</code>）使用，而 <code>String</code> 是标准库提供的一种结构体，内部存储一个 <code>u8</code> 类型的 <code>Vec</code>：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span></span> &#123;</span><br><span class="line">    vec: <span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="str"><a href="#str" class="headerlink" title="str"></a>str</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">"hello world!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let s: &amp;'static str = "hello world!";</span></span><br></pre></td></tr></table></figure>

<p><code>s</code> 变量是一个 <code>&amp;str</code> 类型，不可变的字符串，也可称为字面量，文本被直接储存在程序的二进制文件中，拥有固态生命周期（<code>&#39;static</code>），是 <code>let s: &amp;&#39;static str = &quot;hello world!&quot;;</code> 的简写定义方式。</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s1 = <span class="built_in">String</span>::new();</span><br><span class="line"><span class="comment">// let mut s1 = String::from("hello world!");</span></span><br><span class="line">s1.push_str(<span class="string">"hello world!"</span>);</span><br><span class="line">s1.push_str(<span class="string">" welcome."</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s1);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// hello world! welcome.</span></span><br></pre></td></tr></table></figure>

<p><code>String</code> 是可变的、有所有权的、堆上分配的 <code>UTF-8</code> 的字节缓冲区。</p>
<h2 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h2><ul>
<li>&amp;str -&gt; String</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">"hello world!"</span>; <span class="comment">// variable s: &amp;str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(s); <span class="comment">// variable s1: String</span></span><br><span class="line"><span class="keyword">let</span> s1 = s.to_string();</span><br><span class="line"><span class="keyword">let</span> s1 = s.to_owned();</span><br></pre></td></tr></table></figure>

<ul>
<li>String -&gt; &amp;str</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello world!"</span>); <span class="comment">// variable s: String</span></span><br><span class="line"><span class="keyword">let</span> s1 = s.as_str(); <span class="comment">// variable s1: &amp;str</span></span><br><span class="line"><span class="keyword">let</span> s1 = &amp;s[..]; <span class="comment">// 相当于：&amp;s[0..s.len()];</span></span><br></pre></td></tr></table></figure>

<p><code>&amp;String</code> 可以当做是 <code>&amp;str</code>，例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello world!"</span>);</span><br><span class="line">    foo(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(s: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="号运算"><a href="#号运算" class="headerlink" title="+ 号运算"></a>+ 号运算</h2><p>字符串 <code>+</code> 号运算是 <code>String</code> 的一个内联函数，定义如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Add&lt;&amp;<span class="built_in">str</span>&gt; <span class="keyword">for</span> <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Output</span></span> = <span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[inline]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(<span class="keyword">mut</span> <span class="keyword">self</span>, other: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.push_str(other);</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以两个字面量字符串（<code>&amp;str</code>）不能使用 <code>+</code>，例如：<code>&quot;hello &quot; + &quot;world&quot;;</code> 会报错误： <code>&#39;+&#39; cannot be used to concatenate two &#39;&amp;str&#39; strings</code>。</p>
<p>根据 <code>+</code> 的定义，一个可变的 <code>String</code> 字符串进行 <code>+</code> 后会失去所有权，例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello world!"</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = s + <span class="string">" welcome."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// println!("&#123;&#125;, &#123;&#125;", s, s1);</span></span><br><span class="line"><span class="comment">//                    ^ value borrowed here after move</span></span><br></pre></td></tr></table></figure>

<p>以上代码会出现以下警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;   |</span><br><span class="line">&#x2F;&#x2F;   |     let mut s &#x3D; String::from(&quot;hello world!&quot;);</span><br><span class="line">&#x2F;&#x2F;   |         ----^</span><br><span class="line">&#x2F;&#x2F;   |         |</span><br><span class="line">&#x2F;&#x2F;   |         help: remove this &#96;mut&#96;</span><br><span class="line">&#x2F;&#x2F;   |</span><br><span class="line">&#x2F;&#x2F;   &#x3D; note: #[warn(unused_mut)] on by default</span><br></pre></td></tr></table></figure>
<p>查阅说是有 <code>#[warn(unused_mut)]</code> 注解后 <strong>variable does not need to be mutable</strong>。去掉以上代码中 <code>String</code> 定义时候用以标识可变的 <code>mut</code> 关键字就可以了。不太明白为啥可以这样，待日后详查。</p>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 事务隔离</title>
    <url>/2018/05/31/sql-transaction-isolation/</url>
    <content><![CDATA[<p>SQL 标准定义了 4 类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>
<h2 id="一、SQL-事务隔离级别说明"><a href="#一、SQL-事务隔离级别说明" class="headerlink" title="一、SQL 事务隔离级别说明"></a>一、SQL 事务隔离级别说明</h2><h3 id="1-1-Read-Uncommitted（读取未提交内容）"><a href="#1-1-Read-Uncommitted（读取未提交内容）" class="headerlink" title="1.1 Read Uncommitted（读取未提交内容）"></a>1.1 Read Uncommitted（读取未提交内容）</h3><p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>
<a id="more"></a>
<h3 id="1-2-Read-Committed（读取提交内容）"><a href="#1-2-Read-Committed（读取提交内容）" class="headerlink" title="1.2 Read Committed（读取提交内容）"></a>1.2 Read Committed（读取提交内容）</h3><p>这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的 commit，所以同一 select 可能返回不同结果。</p>
<h3 id="1-3-Repeatable-Read（可重读）"><a href="#1-3-Repeatable-Read（可重读）" class="headerlink" title="1.3 Repeatable Read（可重读）"></a>1.3 Repeatable Read（可重读）</h3><p>这是 MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的 “幻影” 行。InnoDB 和 Falcon 存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p>
<h3 id="1-4-Serializable（可串行化）"><a href="#1-4-Serializable（可串行化）" class="headerlink" title="1.4 Serializable（可串行化）"></a>1.4 Serializable（可串行化）</h3><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>
<h2 id="二、事务隔离带来的问题"><a href="#二、事务隔离带来的问题" class="headerlink" title="二、事务隔离带来的问题"></a>二、事务隔离带来的问题</h2><p>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</p>
<h3 id="2-1-脏读（Drity-Read）"><a href="#2-1-脏读（Drity-Read）" class="headerlink" title="2.1 脏读（Drity Read）"></a>2.1 脏读（Drity Read）</h3><p>一个事务读取到另一事务未提交的更新数据。当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中（这个数据在有可能会回滚），这时，另外一个事务也访问这个数据，然后使用了这个数据。</p>
<h3 id="2-2-不可重复读-Non-repeatable-read）"><a href="#2-2-不可重复读-Non-repeatable-read）" class="headerlink" title="2.2 不可重复读 (Non-repeatable read）"></a>2.2 不可重复读 (Non-repeatable read）</h3><p>在一个事务内，前后两次读到的数据是不一样。在 T1 事务两次读取同一数据之间，T2 事务对该数据进行了修改，就会发生 T1 事务中的两次数据读取不一样的结果。相反， <strong>可重复读</strong>：在同一事务中多次读取数据时，能够保证所读数据一样，也就是后续读取不能读到另一事务已提交的更新数据。</p>
<h3 id="2-3-幻读-Phantom-Read）"><a href="#2-3-幻读-Phantom-Read）" class="headerlink" title="2.3 幻读 (Phantom Read）"></a>2.3 幻读 (Phantom Read）</h3><p>指当事务不是独立执行时发生的一种现象，例如：T1 事务对表中的 “全部数据行” 进行了修改，同时 T2 事务向表中插入了一行 “新数据”，操作 T1 事务的用户发现表中<strong>还存在没有修改</strong>的数据行，就好象发生了幻觉一 样。一般解决幻读的方法是增加范围锁 RangeS，锁定检锁范围为只读，这样就避免了幻读。</p>
<h3 id="2-4-不可重复读和幻读的异同"><a href="#2-4-不可重复读和幻读的异同" class="headerlink" title="2.4 不可重复读和幻读的异同"></a>2.4 不可重复读和幻读的异同</h3><ul>
<li>两者都表现为两次读取的结果不一致</li>
<li>不可重复读是由于另一个事务对数据的更改所造成的，第二次读到了不一样的记录</li>
<li>幻读是由于另一个事务插入或删除引起的，第二次查询的结果发生了变化</li>
<li>对于不可重复读，只需要锁住满足条件的记录</li>
<li>对于幻读，要锁住满足条件及其相近的记录</li>
</ul>
<h2 id="三、MySQL-隔离级别"><a href="#三、MySQL-隔离级别" class="headerlink" title="三、MySQL 隔离级别"></a>三、MySQL 隔离级别</h2><table>
<thead>
<tr>
<th align="left">隔离级别</th>
<th align="left">脏读（Dirty Read）</th>
<th align="left">不可重复读（NonRepeatable Read）</th>
<th align="left">幻读（Phantom Read）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">未提交读（Read uncommitted）</td>
<td align="left">可能</td>
<td align="left">可能</td>
<td align="left">可能</td>
</tr>
<tr>
<td align="left">已提交读（Read committed）</td>
<td align="left">不可能</td>
<td align="left">可能</td>
<td align="left">可能</td>
</tr>
<tr>
<td align="left">可重复读（Repeatable read）</td>
<td align="left">不可能</td>
<td align="left">不可能</td>
<td align="left">可能</td>
</tr>
<tr>
<td align="left">可串行化（SERIALIZABLE）</td>
<td align="left">不可能</td>
<td align="left">不可能</td>
<td align="left">不可能</td>
</tr>
</tbody></table>
<h2 id="四、MySQL-事务隔离级别设置"><a href="#四、MySQL-事务隔离级别设置" class="headerlink" title="四、MySQL 事务隔离级别设置"></a>四、MySQL 事务隔离级别设置</h2><h3 id="4-1-InnoDB-默认是可重复读的（REPEATABLE-READ）"><a href="#4-1-InnoDB-默认是可重复读的（REPEATABLE-READ）" class="headerlink" title="4.1 InnoDB 默认是可重复读的（REPEATABLE READ）"></a>4.1 InnoDB 默认是可重复读的（REPEATABLE READ）</h3><p>修改全局默认的事务级别，在 my.inf 文件的 [mysqld] 节里类似如下设置该选项（不推荐）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transaction-isolation &#x3D; &#123;READ-UNCOMMITTED | READ-COMMITTED | REPEATABLE-READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-改变单个会话或者所有新进连接的隔离级别（推荐使用）"><a href="#4-2-改变单个会话或者所有新进连接的隔离级别（推荐使用）" class="headerlink" title="4.2 改变单个会话或者所有新进连接的隔离级别（推荐使用）"></a>4.2 改变单个会话或者所有新进连接的隔离级别（推荐使用）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-查询全局和会话事务隔离级别方法"><a href="#4-3-查询全局和会话事务隔离级别方法" class="headerlink" title="4.3 查询全局和会话事务隔离级别方法"></a>4.3 查询全局和会话事务隔离级别方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询全局的事务隔离级别</span><br><span class="line">SELECT @@global.tx_isolation;</span><br><span class="line">#查询当前会话的事务级别</span><br><span class="line">SELECT @@session.tx_isolation;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>数据库事务</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text 插件安装</title>
    <url>/2016/07/25/Sublime-Text-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>Sublime Text 官方介绍：</p>
<blockquote>
<p>“Sublime Text is a sophisticated text editor for code, markup and prose.You’ll love the slick user interface, extraordinary features and amazing performance.”</p>
</blockquote>
</blockquote>
<p>Sublime Text 是一款优秀的轻量级编辑器，而且支持跨平台，支持Windows、Linux、Mac OS X 等主流操作系统。虽然是一款收费软件，但也允许人们<strong>无限期免费使用</strong>。（<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">官方下载地址</a>）</p>
<p>Sublime Text 具有漂亮的用户界面和强大可扩展插件功能，本文介绍如何安装 Sublime Text 插件。</p>
<a id="more"></a>

<p>打开 Sublime Text 编辑器的 Console（控制台）使用快捷键 <code>ctrl+`</code> 或者点击菜单 <code> View > Show Console menu </code> 打开 Console，如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160725212921.png" alt=""></p>
<p>Sublime Text 2 粘贴以下代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import urllib2,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); <span class="keyword">by</span> = urllib2.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); <span class="built_in">open</span>( os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>) <span class="keyword">if</span> dh == h <span class="keyword">else</span> None; print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure>

<p>Sublime Text 3 粘贴以下代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure>

<p>敲回车等待安装完成后重启 Sublime Text 即可，按下快捷键 <code> ctrl + shift + p </code> ,输入 <code>pci</code>（Package Control Install 简写）如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160725213757.png" alt=""></p>
<p>敲回车即可打开插件安装界面，输入想要安装插件的名称即可开始安装，如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160725214353.png" alt=""></p>
<p>Sublime Text 插件安装介绍完了，需要注意的是安装过程中要保持网络畅通。</p>
<p><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">参考网址</a></p>
<hr>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Test daocloud CI</title>
    <url>/2016/11/18/Test-daocloud-CI/</url>
    <content><![CDATA[<p>Test daocloud CI</p>
]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
      <tags>
        <tag>持续构建</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim Tab 设置为 4 个空格</title>
    <url>/2016/12/02/Vim-Tab-%E8%AE%BE%E7%BD%AE%E4%B8%BA-4-%E4%B8%AA%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<p>在 <code>vim</code> 的配置文件中（Liunx：<code>/etc/vimrc</code>）中添加以下代码后，重启 <code>vim</code> 即可实现按 <code>TAB</code> 产生 <code>4</code> 个空格：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> ts=4 <span class="comment"># 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格</span></span><br><span class="line"><span class="built_in">set</span> expandtab</span><br></pre></td></tr></table></figure>

<p>对于已保存的文件，可以使用下面的方法进行空格和 <code>TAB</code> 的替换：</p>
<p><code>TAB</code> 替换为空格：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> ts=4</span><br><span class="line">:<span class="built_in">set</span> expandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>空格替换为 <code>TAB</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> ts=4</span><br><span class="line">:<span class="built_in">set</span> noexpandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure>

<p>加 <code>!</code> 是用于处理非空白字符之后的 <code>TAB</code>，即所有的 <code>TAB</code>，若不加 <code>!</code>，则只处理行首的 <code>TAB</code>。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 删除、恢复资源管理器中“视频、图片”等文件夹</title>
    <url>/2016/10/25/Windows-10-%E5%88%A0%E9%99%A4%E3%80%81%E6%81%A2%E5%A4%8D%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E2%80%9C%E8%A7%86%E9%A2%91%E3%80%81%E5%9B%BE%E7%89%87%E2%80%9D%E7%AD%89%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<blockquote>
<p>Windows 10 资源管理器中的”视频、图片、文档、下载、音乐、桌面”等文件夹目前通过一般途径是删除不了的，只能通过注册表的删除删掉，本文介绍一种比较简单的删除、恢复方法。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161025111013.jpg" alt=""></p>
<a id="more"></a>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>打开注册表（<code>Win+R</code> 输入 <code>regedit</code>）找到以下键：<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\</code> 单击 <code>NameSpace</code> 右键 <code>导出</code>，保存文件后缀名为 <code>.reg</code>。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>用文本编辑器打开该文件，只保留类似以下内容，并且在行首添加 <code>-</code> 号，然后保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;088e3905-0323-4b02-9826-5d99428e115f&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;1CF1260C-4DD0-4ebb-811F-33C572699FDE&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;24ad3ad4-a569-4530-98e1-ab02f9417aa8&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;374DE290-123F-4565-9164-39C4925E467B&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;3dfdf296-dbec-4fb4-81d1-6a3438bcf4de&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;A0953C92-50DC-43bf-BE83-3742FED03C9C&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;A8CDFF1C-4878-43be-B5FD-F8091C1C60D0&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;d3162b92-9365-467a-956b-92703aca08af&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;f86fa3ab-70d2-4fc7-9c99-fcbf05467f3a&#125;]</span><br></pre></td></tr></table></figure>

<p>双击该文件即可删除。</p>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>想要恢复，编辑文件，删除行首 <code>-</code> 号，保存，双击运行即可恢复。</p>
<hr>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Windows 10</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/07/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>三十而立之年</title>
    <url>/2019/12/31/thirty-years-old/</url>
    <content><![CDATA[<p>又一年即将结束，时间过得真的很快，快到不敢静下来细细回忆。小时候觉得二十多岁的人年纪好大，再后来觉得三十岁应该离自己很远吧，没想到自己的三十而立之年来的这么“快”，总感觉自己还很是个小孩，总感觉自己还没长大，实际已经到了上有老下有小的年纪…</p>
<p>19 年最开心的事儿就是当了爸爸，真心的感谢媳妇艰辛付出，感激上天给我们最好的礼物。最不幸的事是父亲得了一场大病，家人辛苦奔波不说父亲也是受尽了病痛的折磨，医院真是最不愿意去的地方。有时候天真的想，如果能让家人健健康康无病无痛，付出多少都会有人愿意吧！</p>
<a id="more"></a>
<p>在北京已经整整 8 年了，虽不说劳苦奔波，但每天也很疲惫，一直想着回西安去好好安顿自己的家，尤其是面对不管奋斗多久也在这个城市安不了一个家的现实的时候。但有孩子之后经济压力徒增，回去之后恐怕入不敷出，一年一年的过的很快，那就再在北京待一年再看情况吧！为了能够不焦虑的回西安 20 年得让自己有点儿改观了。</p>
<p>19 年最后一天也快下班了，20 年继续加油吧！</p>
]]></content>
      <categories>
        <category>年末总结</category>
      </categories>
      <tags>
        <tag>年末总结</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Lambda 优雅的处理 Java 异常</title>
    <url>/2020/12/06/replace-java-try-catch-with-lambda/</url>
    <content><![CDATA[<p>使用过 <code>Java</code> 的函数接口，就会被简介的语法深深的吸引，苦于代码中大量的 <code>try...catch</code> 繁琐代码，最近借鉴 <code>java.util.Optional</code> 的实现写了个简化的小工具。</p>
<p>以 <code>Long.valueOf()</code> 为例，假如需要把一个字符串转换为<code>long</code>，如果转换失败则设置默认值为 <code>-1</code>，一般会作如下处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String param = <span class="string">"10s"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> result;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    result = Long.parseLong(param);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// 捕获异常处理</span></span><br><span class="line"></span><br><span class="line">    result = -<span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用简化工具：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long result = Try.of(() -&gt; Long.valueOf(param)).trap(e -&gt; &#123;</span><br><span class="line">    <span class="comment">// 自行异常处理</span></span><br><span class="line">&#125;).get(-<span class="number">1L</span>);</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long result = Try.&lt;String, Long&gt;of(Long::valueOf).trap(Throwable::printStackTrace).apply(param).get(-<span class="number">1L</span>);</span><br></pre></td></tr></table></figure>

<p>如果不需要异常处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long result = Try.of(() -&gt; Long.valueOf(param)).get(-<span class="number">1L</span>);</span><br><span class="line"><span class="comment">// Long result = Try.&lt;String, Long&gt;of(Long::valueOf).apply(param).get(-1L);</span></span><br></pre></td></tr></table></figure>

<p>如果处理没有返回值的代码，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Try.&lt;String&gt;of(v -&gt; list.add(<span class="number">10</span>, v))</span><br><span class="line">        .trap(e -&gt; System.out.println(e.getMessage()))</span><br><span class="line">        .accept(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>其它情况的简单使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 有返回值，无入参</span></span><br><span class="line">    String param = <span class="string">"s"</span>;</span><br><span class="line">    Long result = Try.of(() -&gt; Long.valueOf(param)).get(<span class="number">0L</span>);</span><br><span class="line">    System.out.println(<span class="string">"Long.valueOf 1: "</span> + result);</span><br><span class="line"></span><br><span class="line">    result = Try.of(() -&gt; Long.valueOf(param)).get();</span><br><span class="line">    System.out.println(<span class="string">"Long.valueOf 2: "</span> + result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有返回值，有入参</span></span><br><span class="line">    result = Try.&lt;String, Long&gt;of(s -&gt; Long.valueOf(s))</span><br><span class="line">            .apply(param)</span><br><span class="line">            .trap((e) -&gt; System.out.println(<span class="string">"Long.valueOf exception: "</span> + e.getMessage()))</span><br><span class="line">            .andFinally(() -&gt; System.out.println(<span class="string">"Long.valueOf finally run code."</span>))</span><br><span class="line">            .finallyTrap((e) -&gt; System.out.println(<span class="string">"Long.valueOf finally exception: "</span> + e.getMessage()))</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">"Long.valueOf 3: "</span> + result);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无返回值，无入参</span></span><br><span class="line">    Try.of(() -&gt; Thread.sleep(-<span class="number">1L</span>))</span><br><span class="line">            .andFinally(() -&gt; list.clear())</span><br><span class="line">            <span class="comment">// .andFinally(list::clear) //https://stackoverflow.com/questions/37413106/java-lang-nullpointerexception-is-thrown-using-a-method-reference-but-not-a-lamb</span></span><br><span class="line">            .run();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无返回值，有入参</span></span><br><span class="line">    Try.&lt;String&gt;of(v -&gt; list.add(<span class="number">0</span>, v)).accept(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/ehlxr/budd/blob/master/src/main/java/io/github/ehlxr/utils/Try.java" target="_blank" rel="noopener"><strong>小工具的实现链接</strong></a></p>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo基于GitHub Pages搭建个人博客（一）</title>
    <url>/2016/07/23/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p><code>GitHub Pages</code> 是 <code>GitHub</code> 提供的免费开源的静态站点托管服务，利用这个服务可以搭建轻量级的博客系统，本文介绍了如何使用 <code>Hexo</code> 结合 <code>GitHub Pages</code> 服务搭建个人博客。</p>
</blockquote>
<h1 id="一、安装配置-Git"><a href="#一、安装配置-Git" class="headerlink" title="一、安装配置 Git"></a>一、安装配置 <code>Git</code></h1><h2 id="1-1-安装-Git"><a href="#1-1-安装-Git" class="headerlink" title="1.1 安装 Git"></a>1.1 安装 <code>Git</code></h2><p>使用 <code>GitHub</code> 首先要安装 <code>Git</code>，可根据操作系统下载不同版本的 <code>Git</code>，<code>Windows</code> 下载地址：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> 安装过程比较简单，选择默认选项配置即可下一步，不再叙述。</p>
<h2 id="1-2-配置-Git"><a href="#1-2-配置-Git" class="headerlink" title="1.2 配置 Git"></a>1.2 配置 <code>Git</code></h2><p>设置本地机器默认 <code>commit</code> 的昵称与 <code>Email</code>，姓名与 <code>Email</code> 只用于日志标识，实际推送到远程仓库时，要用有操作权限的账号登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"ehlxr"</span></span><br><span class="line">git config --global user.email <span class="string">"ehlxr@qq.com"</span></span><br></pre></td></tr></table></figure>

<h1 id="二、生成-SSH-keys"><a href="#二、生成-SSH-keys" class="headerlink" title="二、生成 SSH keys"></a>二、生成 <code>SSH keys</code></h1><p><code>SSH Keys</code> 是 <code>GitHub</code> 推荐的公钥、秘钥形式验证用户合法性的机制，添加 <code>SSH Keys</code> 可以省去每次都要输入密码的步骤，下面将演示如何在本地计算机生成 <code>SSH Keys</code> 的公钥、秘钥。</p>
<a id="more"></a>

<h2 id="2-1-首先打开安装的-Git-Bash"><a href="#2-1-首先打开安装的-Git-Bash" class="headerlink" title="2.1 首先打开安装的 Git Bash"></a>2.1 首先打开安装的 <code>Git Bash</code></h2><p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723141920.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723142100.png" alt=""></p>
<h2 id="2-2-运行-ssh-keygen-命令"><a href="#2-2-运行-ssh-keygen-命令" class="headerlink" title="2.2 运行 ssh-keygen 命令"></a>2.2 运行 <code>ssh-keygen</code> 命令</h2><p>输入以下命令：（替换 <code>&quot;your_email@example.com&quot;</code> 为注册时候的邮箱）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-保存秘钥文件"><a href="#2-3-保存秘钥文件" class="headerlink" title="2.3 保存秘钥文件"></a>2.3 保存秘钥文件</h2><p>当出现以下提示时，直接敲回车键选择默认地址即可（保存私钥文件位置，默认保存在当前用户文件夹下的 <code>.ssh</code> 文件夹中，文件名称为 <code>id_rsa</code> ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/lt/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<p>如果已经存在会提示，输入：y 敲回车替换即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/c/Users/lt/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)?</span><br></pre></td></tr></table></figure>

<p>出现以下提示设置密码提示，不用设置密码，敲回车键即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br></pre></td></tr></table></figure>

<p>再次确认密码提示，不用设密码敲回车即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure>

<p>出现以下提示，表明已经成功生成了 <code>SSH Keys</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/lt/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/lt/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:dBtq6OOJs1JQat630kGqh420Y0JSb7smaR6c9jjo7h0 your_email@example.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|    .            |</span></span><br><span class="line"><span class="string">|   o    . o      |</span></span><br><span class="line"><span class="string">|  =   .o o o     |</span></span><br><span class="line"><span class="string">| + + o. S .      |</span></span><br><span class="line"><span class="string">|.oo.*.o.         |</span></span><br><span class="line"><span class="string">|oo=E +oo         |</span></span><br><span class="line"><span class="string">|o.#+Oooo         |</span></span><br><span class="line"><span class="string">|+OoO==o          |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">Github 官网 SSH Keys 生成教程</a></p>
<h1 id="三、开启-GitHub-Pages-服务"><a href="#三、开启-GitHub-Pages-服务" class="headerlink" title="三、开启 GitHub Pages 服务"></a>三、开启 <code>GitHub Pages</code> 服务</h1><p><code>GitHub</code> 账户注册比较简单，注册免费使用的账户就可以了，这里就不细说了，需要注意的是尽量不要使用 <code>126/163</code> 邮箱注册，我在测试的时候收不到验证码，等收到验证码的时候已经第二天了，早就过期了，我使用 <code>Gmail</code> 和 <code>QQ</code> 邮箱都能很快收到验证码。</p>
<h2 id="3-1-添加生成的-SSH-Keys-到-GitHub"><a href="#3-1-添加生成的-SSH-Keys-到-GitHub" class="headerlink" title="3.1 添加生成的 SSH Keys 到 GitHub"></a>3.1 添加生成的 <code>SSH Keys</code> 到 <code>GitHub</code></h2><p>打开生成的 <code>SSH Keys</code> 公钥</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723144829.png" alt=""></p>
<p>登录注册的 <code>GitHub</code> 账户，按照以下图示 <code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>、<code>5</code>、<code>6</code>、<code>7</code> 步骤操作，复制公钥内容粘贴到下图 <code>步骤 5</code> 的 <code>Key</code> 输入框中，在 <code>步骤 6</code> 输入一个标题，点击 <code>步骤 7</code> 的 <code>Add SSH key</code> 按钮，这时候会提示你输入 <code>GitHub</code> 账号密码，输入密码确认即可添加成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723142019.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723142036.png" alt=""></p>
<h2 id="3-2-创建-GitHub-仓库"><a href="#3-2-创建-GitHub-仓库" class="headerlink" title="3.2 创建 GitHub 仓库"></a>3.2 创建 <code>GitHub</code> 仓库</h2><p>按照下图所示操作，仓库名称按照：<code>yourname.github.io</code> 格式创建，这样就可以通过 <code>yourname.github.io</code> 方式访问你的博客。如果创建名称为：<code>myblog</code> ,则博客的访问路径为 <code>yourname.github.io/myblog</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723165328.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723171101.png" alt=""></p>
<p>填写完仓库名称，其他选项默认，点击 <code>Create repository</code> 即可完成创建。</p>
<h2 id="3-3-测试-GitHub-Pages-服务"><a href="#3-3-测试-GitHub-Pages-服务" class="headerlink" title="3.3 测试 GitHub Pages 服务"></a>3.3 测试 <code>GitHub Pages</code> 服务</h2><p>接下来在仓库根目录下创建一个 <code>index.html</code> 文件测试 <code>GitHub Pages</code> 服务是否开启成功。打开刚才创建的仓库，因为我们之前已经添加了 <code>SSH Keys</code>，所以选择复制如下图所示的 <code>SSH</code> 仓库连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723190223.png" alt=""></p>
<p>在电脑磁盘创建一个文件夹（我创建在：<code>D:/lxr</code>）在 <code>Git Bash</code> 分别输入以下两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/lxr/ <span class="comment"># 进入创建的文件夹</span></span><br><span class="line"></span><br><span class="line">git init <span class="comment"># 初始化本地仓库</span></span><br></pre></td></tr></table></figure>

<p>在本地文件夹中创建 <code>index.html</code> 文件，随便输入一些内容即可，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span> &gt;&gt; index.html <span class="comment"># 创建 index.html 文件</span></span><br></pre></td></tr></table></figure>

<p>然后分别执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add index.html <span class="comment"># 添加文件</span></span><br><span class="line">git commit -m <span class="string">"create index.html"</span> <span class="comment"># 提交文件</span></span><br><span class="line">git remote add origin git@github.com:ehlxr/ehlxr.github.io.git <span class="comment"># 添加 GitHub 仓库地址，注意地址填写自己注册的 GitHub 仓库地址</span></span><br><span class="line">git push -u origin master <span class="comment"># push 到 GitHub</span></span><br></pre></td></tr></table></figure>

<p>浏览器访问：<a href="http://ehlxr.github.io" target="_blank" rel="noopener">yourname.github.io</a> 如果出现 <code>index.html</code> 输入的内容，即 <code>GitHub Pages</code> 服务开启成功</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo基于GitHub Pages搭建个人博客（二）</title>
    <url>/2016/07/23/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>上一篇介绍了 GitHub Pages 服务开启，这篇文章将介绍 Hexo 的安装和使用以及将博客部署到 GitHub Pages 的操作。</p>
</blockquote>
<blockquote>
<blockquote class='blockquote-center'> [Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。][1] </blockquote>
</blockquote>
<h1 id="一、Node-js-安装"><a href="#一、Node-js-安装" class="headerlink" title="一、Node.js 安装"></a>一、Node.js 安装</h1><p>Hexo 是基于 Node.js 安装，所以安装 Hexo 之前首先要安装 Node.js。下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a> 根据自己的操作系统，下载对应版本即可。Windons 安装过程比较简单，一直下一步即可安装完成。</p>
<p><a href="http://ehlxr.me/2016/07/30/CentOS-7-%E5%AE%89%E8%A3%85-Node-js/">CentOS 7 安装 Node.js</a></p>
<a id="more"></a>

<h1 id="二、Hexo-安装"><a href="#二、Hexo-安装" class="headerlink" title="二、Hexo 安装"></a>二、Hexo 安装</h1><p>打开 Git Bash 输入以下命令开始安装 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>出现以下界面表示安装完成</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723214644.png" alt=""></p>
<h1 id="三、Hexo-建站"><a href="#三、Hexo-建站" class="headerlink" title="三、Hexo 建站"></a>三、Hexo 建站</h1><p>安装 Hexo 完成后，在本地磁盘创建一个目录用于存放 Hexo 配置文件和博客源代码，我的 Hexo 存放在 <code>D:/ehlxr</code> 目录下。</p>
<p>分别执行下列命令，Hexo 将会在 <code>D:/ehlxr/Hexo</code> 新建所需要的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 D:/ehlxr 目录</span></span><br><span class="line"><span class="built_in">cd</span> /d/ehlxr/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化所需要的文件到 Hexo 文件夹</span></span><br><span class="line">hexo init Hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 Hexo 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> Hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>分别执行以下命令在本地进行预览</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译生成博文</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Hexo服务器</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>出现以下画面表示服务启动成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723225446.png" alt=""></p>
<p>打开浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 便可以看到最原始的博客了</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724123205.jpg" alt=""></p>
<h1 id="四、Hexo-部署到-GitHub-Pages"><a href="#四、Hexo-部署到-GitHub-Pages" class="headerlink" title="四、Hexo 部署到 GitHub Pages"></a>四、Hexo 部署到 GitHub Pages</h1><p>更新 Hexo 安装文件夹中 <code>_config.yml</code> 文件，如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160723231000.png" alt=""></p>
<p>更新 <code>_config.yml</code> 文件中的 <code>deploy</code> 节点，如图所示，可添加多个地址（如一个 GitHub、Coding、oschina）</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724182310.png" alt=""></p>
<p>分别执行以下命令即可完成部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save <span class="comment"># 安装 hexo-deployer-git</span></span><br><span class="line"></span><br><span class="line">hexo clean <span class="comment"># 可简写为 hexo cl</span></span><br><span class="line">hexo generate <span class="comment"># 可简写为 hexo g</span></span><br><span class="line">hexo deploy <span class="comment"># 可简写为 hexo d</span></span><br></pre></td></tr></table></figure>

<p>访问 <a href="https://ehlxr.github.io/" target="_blank" rel="noopener">https://yourname.github.io</a> 即可看到博客模板的内容，对于 Hexo 的一些详细设置可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a> 。本站使用的 Hexo 主题是 NexT，详细设置可参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题官方网站</a>。</p>
<p>使用以下命令就可以新建一篇博客文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"开始blog，哈哈"</span></span><br></pre></td></tr></table></figure>

<p>打开 Hexo 目录下的 <code>source\_posts</code> 目录就可以看见创建的文章了，如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724093526.png" alt="enter description here"></p>
<p>文章是 MarkDown 格式文件（关于 Markdown 语法可参考<a href="http://www.appinn.com/markdown/basic.html" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a>），编辑文章后保存，可以先启动本地 Hexo Server 查看效果，然后执行部署命令就完成了博客文章的发布</p>
<p>Markdown 编辑器我推荐使用 <a href="http://soft.xiaoshujiang.com/" target="_blank" rel="noopener">小书匠</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724100055.png" alt="enter description here"></p>
<p>至此，使用 Hexo 基于 GitHub Pages 搭建个人博客就介绍完了。</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于跑步</title>
    <url>/2019/04/21/run/</url>
    <content><![CDATA[<p>天气暖和了，19 年的跑步计划已经在心中盘算好久了，本打算昨天生日的时候去开始的，结果天公不作美，一直在下小雨。</p>
<p>关于跑步，一开始为了减肥，现在慢慢喜欢上了这项运动。其实跑步很折磨人，总得有个目标才能坚持下来，或是为了能够在朋友圈炫耀，或是享受跑完步之后的大汗淋漓。</p>
<p>我会下载一个跑步软件，戴上耳机，每完成一公里就会提醒我，我也会心中默默给自己设定个目标，十公里或一个小时，每次跑步过程中我都在和自己较劲，想要放弃的时候心中总会默念，再坚持一下，已经完成了三分之二了，已经完成五分之四了……设了一个目标，总会能够达成，即使过程很艰难，但更喜欢达标后的小小满足感。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>占用端口、PID 查询总结</title>
    <url>/2017/05/24/query-port-pid/</url>
    <content><![CDATA[<blockquote>
<p>总结一下日常工作学习中常用的查询占用端口、PID相关命令。主要有命令 ps、lsof、netstat 等命令。</p>
</blockquote>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><code>ps -ef</code> 或者 <code>ps aux</code></p>
<p>根据命令（IntelliJIDEALicenseServer）搜索 PID（17107）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep IntelliJIDEALicenseServer | grep -v <span class="string">"grep"</span></span></span><br><span class="line">  501 17017 12203   0 10:01上午 ttys000    0:00.02 IntelliJIDEALicenseServer -p 21014</span><br></pre></td></tr></table></figure>

<h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>根据 PID（17107）搜索占用端口（21014）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof -p 17017 -nP | grep TCP</span><br><span class="line">COMMAND     PID  USER   FD     TYPE             DEVICE SIZE/OFF    NODE NAME</span><br><span class="line">IntelliJI 17017 ehlxr    3u    IPv4 0xc0df10496212b0e3      0t0     TCP *:21014 (LISTEN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line">$ lsof -nP -iTCP -sTCP:LISTEN | grep 17017</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>-n 表示不显示主机名</li>
<li>-P 表示不显示端口俗称</li>
</ul>
</blockquote>
<a id="more"></a>
<p>根据端口（21014）搜索  PID（17107）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof -i:21014</span><br><span class="line">COMMAND     PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">IntelliJI 17017 ehlxr    3u  IPv4 0xc0df10496212b0e3      0t0  TCP *:21014 (LISTEN)</span><br></pre></td></tr></table></figure>

<h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><strong>仅 Linux 系统下好使，Mac 下无效</strong></p>
<p>端口（21017），PID（1847）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -antlp | grep IntelliJIDEA</span><br><span class="line">tcp        0      0 0.0.0.0:21017           0.0.0.0:*               LISTEN      1847/./IntelliJIDEA</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>又是一年岁末时...</title>
    <url>/2017/12/31/summary-in-2017/</url>
    <content><![CDATA[<p>2017 年最后一天了，北京的天气很好，阳光明媚，关键是没有雾霾。说起雾霾，今年北京可是”治理”的很有效果，截止目前雾霾天和去年的好天气一样多，买了个空气净化器还没怎么派上用场，哈哈。</p>
<p>步入了婚姻的殿堂，享受幸福的同是多了一份责任。进入人生下一个阶段，需要处理的关系更多，新的一年需要勉励自己不断前行…</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1fodlad6j39g20dw06i4qp.gif" alt=""></p>
<p>奋斗在一线的程序猿，到了一定的阶段，就不得不审视一下自己的未来。作为碌碌无为低端程序猿的我，此刻对未来感到深深的迷茫。少了年少时的拼劲，多了肩膀上的重担，不知作为下一个低端人群的我在北京还能拼搏多久。</p>
<a id="more"></a>

<p>更为可悲的是，每当危机到来的时候才发觉自己已经快退化的让自己害怕了，偶尔看到一句话：“六年开发经验？还是学习了一年，重复工作了五年”，值得深思。</p>
<p>2017 已经逝去，2018 任道而重远…</p>
<hr>
]]></content>
      <categories>
        <category>年末总结</category>
      </categories>
      <tags>
        <tag>年末总结</tag>
      </tags>
  </entry>
  <entry>
    <title>可靠消息最终一致性分布式事务实现方案</title>
    <url>/2019/01/25/eventually-consistency/</url>
    <content><![CDATA[<p>提到分布式应用，就不得不考虑分布式事务。在分布式事务中，常见的有 <code>CAP</code>，<code>BASE</code> 理论，解决方案也有很多种，比如：<code>2PC</code>、<code>TCC</code> 、最终一致性等。</p>
<p><code>2PC</code>（两阶段提交）比较适合单块应用，跨多个库的分布式事务。因为严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景，而且，对于微服务而言，不推荐一个服务出现跨多个数据库操作， 如果需要操作其它数据库数据，推荐通过调用别的服务接口来实现。</p>
<p><code>TCC</code> 属于强一致性事务的方案，适用资金流转业务相关业务，比如：支付、交易等场景。根据 <code>CAP</code> 理论，这种实现需要牺牲可用性。</p>
<p>如果是一般的分布式事务场景，比如：订单插入之后要调用库存服务更新库存，库存数据没有资金那么的敏感，可以用可靠消息最终一致性方案。</p>
<p>下面是一种可靠消息最终一致性事务方案的实现流程：</p>
<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/eventually-consistency.png" alt="Eventually Consistency"></p>
<p>正常流程：</p>
<ol>
<li><p><strong>A 系统</strong>发送<code>预发送</code>消息给<strong>消息服务系统</strong>。</p>
</li>
<li><p><strong>消息服务系统</strong>存储预发送的消息到消息数据库。</p>
</li>
<li><p><strong>消息服务系统</strong>返回存储预发送消息的结果到 <strong>A 系统</strong>。</p>
</li>
<li><p>如果第 3 步返回的结果是成功的， <strong>A 系统</strong>则执行业务操作，否则不执行。</p>
</li>
<li><p><strong>A 系统</strong>业务操作成功后，通知<strong>消息服务系统</strong> 。</p>
</li>
<li><p><strong>消息服务系统</strong>发送消息到 <strong>MQ</strong> ，并且更新<code>预发送</code>消息状态为<code>已发送</code>（但不是<code>已消费</code>）。</p>
</li>
<li><p><strong>MQ</strong> 发送消息到 <strong>B 系统</strong>。</p>
</li>
<li><p><strong>B 系统</strong>执行业务操作，保证幂等性，防止同一个消息重复执行。</p>
</li>
<li><p><strong>B 系统</strong>向 <strong>MQ</strong>  ack 此条消息，并向<strong>消息服务系统</strong>进行确认成功消费消息，让<strong>消息服务系统</strong>将消息状态置为<code>已消费</code>。</p>
</li>
<li><p><strong>消息恢复系统</strong>定时去<strong>消息服务系统</strong>查一下消息数据，查看有没有状态为<strong>非</strong><code>已消费</code>（<code>预发送</code>和<code>已发送</code>）状态的<strong>超时</strong>（比如 2 分钟以上还未消费的）消息。</p>
</li>
<li><p>如果第 <strong>10</strong> 步发现有<strong>非</strong><code>已消费</code>状态的超时消息，调用 <strong>A 系统</strong>提供的查询接口，查询次条消息对应的业务数据是否为处理成功。</p>
</li>
<li><p>如果业务数据是处理成功的状态，那么就再次调用确认并发送消息，即进入第 <strong>6</strong> 步。如果业务数据是处理失败的，那么就调用<strong>消息服务系统</strong>进行删除该条消息数据。</p>
</li>
</ol>
<p>再来看看有错（比如说网络断了或者服务器挂了）的时候，这个系统是怎么保证一致性的：</p>
<ul>
<li>第 <strong>1</strong> 步失败，相当于什么都没做。</li>
<li>第 <strong>2</strong> 步失败，第 <strong>3</strong> 步会返回失败结果，<strong>A 系统</strong>不执行业务操作。</li>
<li>第 <strong>3</strong> 步失败，<strong>A 系统</strong>不执行业务操作，<strong>消息恢复系统</strong>在第 <strong>12</strong> 步判断业务处理失败。</li>
<li>第 <strong>4</strong> 步失败，<strong>A 系统</strong>回滚业务，同样<strong>消息恢复系统</strong>在第 <strong>12</strong> 步判断业务处理失败。</li>
<li>第 <strong>5、6、7、8、9</strong>  步失败，<strong>消息恢复系统</strong>在第 <strong>12</strong> 步判断业务处理成功，重试第 <strong>6</strong> 步直到成功为止。如果在第 <strong>9</strong> 步失败了，<strong>B 系统</strong>会重复消费某条消息，所以 <strong>B 系统</strong>要设计成幂等操作，对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次调用而产生了副作用。</li>
</ul>
<p>所以，只要消息数据持久化了，我们就可以假设后面一定会被消费，就算后面挂了一堆东西，但是我们把挂掉的服务再全部启动，这条消息还是会被消费，不会丢失，可以保证最终一致性。</p>
<p>这种实现方案弱化了对消息中间件（<strong>MQ</strong>）的依赖，选用 <code>RabbitMQ</code> 或者 <code>ActiveMQ</code> 就可以实现。如果使用支持消息事物的 <code>RocketMQ</code> 也可以简化消息恢复系统和消息服务系统。</p>
<hr>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>事务</tag>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序理解</title>
    <url>/2022/03/19/heap-sort/</url>
    <content><![CDATA[<p>堆排序的关键是构建大（小）顶堆，堆顶元素就是最大（小）的元素，然后堆顶元素和末尾元素交换位置，再次堆化除最后一个元素外的其它元素，循环次过程即可完成排序。</p>
<p>翻译成代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        buildHeap(a, i);</span><br><span class="line">        <span class="comment">// 堆顶元素和最后一个元素交换，除过最后一个元素外其它元素再次构建大顶堆</span></span><br><span class="line">        swap(a, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>堆化过程</strong></p>
<p>1、从序列最<strong>后一个非叶子节点</strong>开始<br>2、堆化规则：替换节点为当前节点和叶子节点中值最大的节点<br>3、倒序依次处理其它非叶子节点<br>4、须保证叶子节点也满足堆化规则</p>
<p><strong>前置知识</strong></p>
<p>1、堆是完全二叉树<br>2、满二叉树使用数组存储最省空间<br>3、若节点在数组中的下标为 <code>n</code>，其左叶子节点在数组中的下标为 <code>2 * n + 1</code>，右子节点下标为 <code>2 * n + 2</code>，父节点下标为 <code>(n - 2)/2</code></p>
<p><strong>堆化过程图解</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/heapify.jpg" alt="堆化过程"></p>
<p>翻译成代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建大顶堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 最后一个元素下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从最后一个非叶子节点开始，倒序依次处理其它非叶子节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (n -<span class="number">1</span>) / <span class="number">2</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(a, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 最后一个元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 需要调整的父节点下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 大顶堆规则：替换节点为当前节点和叶子节点中值最大的节点</span></span><br><span class="line">        <span class="keyword">int</span> maxPos = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[l] &gt; a[maxPos]) &#123;</span><br><span class="line">            maxPos = l;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[r] &gt; a[maxPos]) &#123;</span><br><span class="line">            maxPos = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前节点最大时退出</span></span><br><span class="line">        <span class="keyword">if</span> (maxPos == i) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap(a, maxPos, i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证叶子节点也满足堆化规则</span></span><br><span class="line">        i = maxPos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>开始blog，哈哈</title>
    <url>/2016/07/19/%E5%BC%80%E5%A7%8Bblog%EF%BC%8C%E5%93%88%E5%93%88/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>忙忙碌碌的十一月份</title>
    <url>/2016/11/30/%E5%BF%99%E5%BF%99%E7%A2%8C%E7%A2%8C%E7%9A%84%E5%8D%81%E4%B8%80%E6%9C%88%E4%BB%BD/</url>
    <content><![CDATA[<p>早就有计划在西安买房，一直觉得还早，主要是没钱，近期有人肯借钱就想看看市场。买房需要做很多准备工作，本想着慢慢先看着，一边从同学朋友那里打听消息，一边从网上看各个楼盘信息，怎奈越看越着急，就想一下子赶紧买了。看中的两个楼盘，价格其实都远远超过自己的预算和目前能承受的能力，不得不说我是一个容易被蛊惑的人，听着置业顾问的天花乱坠的描述，有好几次都差点都掉坑里了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161130202110.jpg" alt=""></p>
<a id="more"></a>

<p>不得不吐槽ZF的户口、档案制度，不知道坑了多少人。上大学的时候响应学校的号召，傻乎乎的把户口从老家迁到了学校，现在也没想明白把户口迁过去是为了什么。毕业后二不拉几的嫌麻烦就随大流没有及时把户口、档案迁回去。买房按揭要户口，才意识到这个大坑不尽早填上只会越来越麻烦。为了搞清楚怎样能把户口迁回去，我战战兢兢的打通了相关部门的服务电话号（还好还好，才打了几十次就有人接听了），服务态度和传说中的“为人民服务”一样，果然没让我失望，折腾了整整一天，总算搞明白了大概该怎么弄。还好有同学在，不用自己再去跑一趟，准备好相关的资料邮寄过去就只能祈祷了…</p>
<p>听说十二月份房价要涨，今天最后一天了，中介也“劝告”了我好几次赶紧出手，自己也心动了无数次。十一月份马上结束了，纠结的心该平静了些了，终究还是没有出手…</p>
<hr>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序理解</title>
    <url>/2022/03/19/quick-sort/</url>
    <content><![CDATA[<p>快速排序算法核心思想，取待排序序列中的某个元素作为分区点，大于分区点的元素挪到分区点右边（从小到大排序），小于分区点的元素挪到分区点左边。然后分区点左右两边的子序列循环以上操作，直至子序列长度为 <code>1</code>。</p>
<p><strong>左右指针法实现思路</strong></p>
<p>1、首先定义分区点（pivot）<code>p</code>，<code>p</code> 一般为数组 <code>a</code> 的第一个元素或最后一个元素<br>2、然后定义左（<code>l</code>）、右（<code>r</code>）两个指针分别指向数组的第一个元素（<code>a[0]</code>）和最后一个元素 (<code>a[a.length - 1]</code>)<br>3、如果 <code>a[l] &gt; a[p]</code>，<code>l、p</code> 下标元素互换，<code>l</code> 前进 <code>1</code> 位<br>4、如果 <code>a[r] &lt; a[p]</code>，<code>r、p</code> 下标元素互换，<code>r</code> 后退 <code>1</code> 位<br>5、如果 <code>l &gt;= r</code>，排序结束</p>
<a id="more"></a>

<p><strong>快速排序左右指针法图解过程</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/quick-sort.jpg" alt="快速排序左右指针法图解过程"></p>
<p><strong>代码实现</strong></p>
<p>以递归方式实现编码，首先找出分析出递归条件：</p>
<p>1、递归方程：<code>quickSort(a[l..r]) = quickSort(a[l..p-1]) + quickSort(a[p+1..r])</code><br>2、递归退出条件：<code>l &gt;= r</code></p>
<blockquote>
<p>注意点：如果选择分区点 <code>p = l</code>，必须<strong>先从右边找到小于 <code>a[p]</code> 的第一个元素</strong>开始</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l 第一个元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r 最后一个元素下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a == <span class="keyword">null</span> || l &gt;= r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i = l, j = r;</span><br><span class="line">  <span class="keyword">int</span> p = l; <span class="comment">// 选择最左边的元素为 pivot</span></span><br><span class="line">  <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="comment">// 如果选择 p = l 必须先从右边找到小于 a[p] 的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; a[r] &gt;= a[p]) &#123;</span><br><span class="line">      r--;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, r, p);</span><br><span class="line">    p = r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从左边找到大于 a[p] 的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; a[l] &lt;= a[p]) &#123;</span><br><span class="line">      l++;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, l, p);</span><br><span class="line">    p = l;</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sort(a, i, p - <span class="number">1</span>);</span><br><span class="line">  sort(a, p + <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>恍恍惚惚又一年</title>
    <url>/2018/12/31/summary-in-2018/</url>
    <content><![CDATA[<p>再强大的内心，估计也抵抗不住岁月的流逝吧…那天和媳妇聊天，说起十年前，觉得十年好遥远，现在觉得十年前就想是在昨天。</p>
<p>今天是 2018 年的最后一天，像去年的今天一样，仿佛就像是在昨天，想着总结一下过去的一年，发现啥都写不出来。</p>
<p>今年为了西安房子的装修，从 6 月份后几乎每隔一月就在西安和北京奔波一回。装修房子的过程是痛苦的，什么都不懂，多花了不少冤枉钱，效果也不太满意，如果还会有第二套房子装修，我想应该会好很多吧！</p>
<p>工作上马马虎虎，个人能力感觉也没什么长进。又一波互联网大寒冬来袭，倒了一大批创业公司，各大公司也纷纷传出裁员的新闻，瑟瑟发抖，越来越焦虑了！</p>
<a id="more"></a>
<p>不管怎么样，2019 还是值得期待的一年。再见 2018，你好 2019！</p>
]]></content>
      <categories>
        <category>年末总结</category>
      </categories>
      <tags>
        <tag>年末总结</tag>
      </tags>
  </entry>
  <entry>
    <title>按比例控制流量的一种实现</title>
    <url>/2019/07/19/control-traffic-by-rate/</url>
    <content><![CDATA[<p>网关做灰度的时候，要控制流量的比例，比如 3:7 的分发流量到两个不同版本的服务上去。刚开始的想法是每次流量过来生成 100 以内的随机数，随机数落在那个区间就转到那个版本的服务上去，但是发现这样无法较精准的保证 3:7 的比例，因为有可能某段时间内生成的随机数大范围的落在某个区间内，比如请求了 100 次，每次生成的随机数都是大于 30 的，这样 70% 比例的服务就承受了 100% 的流量。</p>
<p>接下来想到了第二种解决方案，能够保证 10（基数） 倍的流量比例正好是 3:7，思路如下：</p>
<p>1、生成 0 - 99 的数组（集合）<br>2、打乱数组（集合）的顺序，为了防止出现某比例的流量集中出现<br>3、全局的计数器，要考虑原子性<br>4、从数组（集合）中取出计数器和 100 取余后位置的值<br>5、判断取到的值落在那个区间</p>
<a id="more"></a>

<p>以下是 Java 版本的 2:3:5 比例分流的简单实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.ehlxr.rate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按比例控制流量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ehlxr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-07-19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateBarrier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger op = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; source;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> base;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source.get(op.incrementAndGet() % base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RateBarrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateBarrier</span><span class="params">(<span class="keyword">int</span> base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = base;</span><br><span class="line"></span><br><span class="line">        source = <span class="keyword">new</span> ArrayList&lt;&gt;(base);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; base; i++) &#123;</span><br><span class="line">            source.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打乱集合顺序</span></span><br><span class="line">        Collections.shuffle(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RateBarrier rateBarrier = <span class="keyword">new</span> RateBarrier(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">20</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> rate = rateBarrier.rate();</span><br><span class="line">            <span class="keyword">if</span> (rate &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"this is on 2"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rate &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"this is on 3"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"this is on 5"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// final Thread[] threads = new Thread[20];</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; threads.length; i++) &#123;</span></span><br><span class="line">        <span class="comment">//     threads[i] = new Thread(() -&gt; &#123;</span></span><br><span class="line">        <span class="comment">//         if (rateBarrier.allow()) &#123;</span></span><br><span class="line">        <span class="comment">//             System.out.println("this is on 3");</span></span><br><span class="line">        <span class="comment">//         &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//             System.out.println("this is on 7");</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;);</span></span><br><span class="line">        <span class="comment">//     threads[i].start();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// for (Thread t : threads) &#123;</span></span><br><span class="line">        <span class="comment">//     try &#123;</span></span><br><span class="line">        <span class="comment">//         t.join();</span></span><br><span class="line">        <span class="comment">//     &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">        <span class="comment">//         e.printStackTrace();</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is on 3</span></span><br><span class="line"><span class="comment">this is on 3</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 2</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 3</span></span><br><span class="line"><span class="comment">this is on 3</span></span><br><span class="line"><span class="comment">this is on 3</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 2</span></span><br><span class="line"><span class="comment">this is on 2</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">this is on 3</span></span><br><span class="line"><span class="comment">this is on 2</span></span><br><span class="line"><span class="comment">this is on 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>以下是 Golang 版本 2:3:5 比例分流的简单实现：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math/rand"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RateBarrier <span class="keyword">struct</span> &#123;</span><br><span class="line">	source []<span class="keyword">int</span></span><br><span class="line">	op     <span class="keyword">uint64</span></span><br><span class="line">	base   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRateBarrier</span><span class="params">(base <span class="keyword">int</span>)</span> *<span class="title">RateBarrier</span></span> &#123;</span><br><span class="line">	source := <span class="built_in">make</span>([]<span class="keyword">int</span>, base, base)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; base; i++ &#123;</span><br><span class="line">		source[i] = i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 随机排序</span></span><br><span class="line">	rand.Shuffle(base, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		source[i], source[j] = source[j], source[i]</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;RateBarrier&#123;</span><br><span class="line">		source: source,</span><br><span class="line">		base:   base,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *RateBarrier)</span> <span class="title">Rate</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> b.source[<span class="keyword">int</span>(atomic.AddUint64(&amp;b.op, <span class="number">1</span>))%b.base]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	wg.Add(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2:3:5</span></span><br><span class="line">	b := NewRateBarrier(<span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			rate := b.Rate()</span><br><span class="line">			<span class="keyword">switch</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> rate &lt; <span class="number">2</span>:</span><br><span class="line">				fmt.Println(<span class="string">"this is on 20%"</span>)</span><br><span class="line">			<span class="keyword">case</span> rate &gt;= <span class="number">2</span> &amp;&amp; rate &lt; <span class="number">5</span>:</span><br><span class="line">				fmt.Println(<span class="string">"this is on 30%"</span>)</span><br><span class="line">			<span class="keyword">case</span> rate &gt;= <span class="number">5</span>:</span><br><span class="line">				fmt.Println(<span class="string">"this is on 50%"</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this is on 30%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 30%</span></span><br><span class="line"><span class="comment">this is on 20%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 20%</span></span><br><span class="line"><span class="comment">this is on 30%</span></span><br><span class="line"><span class="comment">this is on 20%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 30%</span></span><br><span class="line"><span class="comment">this is on 30%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 20%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 50%</span></span><br><span class="line"><span class="comment">this is on 30%</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>流控</tag>
      </tags>
  </entry>
  <entry>
    <title>有人把生活过成了诗，有人却在彷徨挣扎…</title>
    <url>/2019/04/18/essay/</url>
    <content><![CDATA[<p>有人把生活过成了诗，有人却在彷徨挣扎…</p>
<p>总有一些人能让自己触动心弦，仔细想，也许他们并没有比自己“能耐”多少，或许只是自己已习惯奔波，没有了理想，活在世俗里无法自拔…</p>
<p>我想试着重新生活，找回自己喜欢并且想要成为的那个我，也许吧，这一次我能持之以恒。不再愿意立下各种 flag，不是因为害怕被啪啪打脸，反正都是给自己的。</p>
<p>但是，为什么每次都是想着要改变自己了，真有这么讨厌自己吗？每次都想要改变什么了？给自己制定一套目标，努力克制自己去实现？追寻自己的内心去生活不应该是自己向往的吗，我找不到答案。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>测试 Travis CI 结合 Hexo 使用</title>
    <url>/2016/11/02/%E6%B5%8B%E8%AF%95-Travis-CI-%E7%BB%93%E5%90%88-Hexo-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="测试-Travis-CI-结合-Hexo-使用"><a href="#测试-Travis-CI-结合-Hexo-使用" class="headerlink" title="测试 Travis CI 结合 Hexo 使用"></a>测试 Travis CI 结合 Hexo 使用</h1>]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
      <tags>
        <tag>持续构建</tag>
        <tag>Travis CI</tag>
      </tags>
  </entry>
  <entry>
    <title>测试使用 daocloud 持续构建 Hexo</title>
    <url>/2016/11/02/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8-daocloud-%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-Hexo/</url>
    <content><![CDATA[<h1 id="测试使用-daocloud-持续构建-Hexo"><a href="#测试使用-daocloud-持续构建-Hexo" class="headerlink" title="测试使用 daocloud 持续构建 Hexo"></a>测试使用 daocloud 持续构建 Hexo</h1><div class="note danger">
            <p>Coding Hexo DaoCloud </p>
          </div>
<div class="note primary">
            <p>看到这边博文，表示持续构建成功！！！ </p>
          </div>
]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
      <tags>
        <tag>持续构建</tag>
        <tag>Daocloud</tag>
      </tags>
  </entry>
  <entry>
    <title>漂 泊</title>
    <url>/2018/03/10/drifter/</url>
    <content><![CDATA[<blockquote class='blockquote-center'> 北漂，是一种选择，但越来越多的会是无奈和彷徨，
踌躇满志而来，万念俱灰而归，也许就是大多数北漂的归属，结局也许有些夸张。
最终，我还是无法爱上这座城市，最起码我努力爱过...
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbgy1fp8q20yzt6g206y046x0m.gif" alt=""></p>
<a id="more"></a>

<p>月底又要搬家了，刚对一个地方稍微熟悉，就又要换一个地了，来北京这么多年，一年换一个地，行李越来越多，心情越来越不是滋味…漂泊的人啊，怎样才能有一颗不流浪的心！</p>
<p>也许真是老了，伤感越来越多，前段时间经历了一次彻头彻尾失败的面试，对未来的工作越来越没自信，危机感油然而生，快要被淘汰了哦！在绝境中获得反省，希望能够被铭记…</p>
<p>夜幕降临，希望每一位 Beijing Drifter 都能够安然入睡，梦回故里，第二天醒来依然对这个城市充满爱。</p>
<hr>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>热爱微小的改变</title>
    <url>/2016/10/31/%E7%83%AD%E7%88%B1%E5%BE%AE%E5%B0%8F%E7%9A%84%E6%94%B9%E5%8F%98/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161031001.jpg" alt=""><br>当你有着强烈的情绪时，可能是因为你要明哲保身。你不愿冒险因为你害怕被拒绝、害怕失败、害怕自己hold不住。真的，试想下如果你彻底的失败了，甚至在完全陌生的人面前流泪你会怎么做？也许你不相信你会采取合理的风险。也许你曾经打破常规去挑战自我的极限，但是结果却并不令你满意。但卖掉你所有的财产，搬去墨西哥并非我今天所谈论的改变类型。</p>
<a id="more"></a>

<p>也许你会害怕改变，虽然你也不知道其中的原因。一想到沉溺于同样的地方遇见同样的人，遵循例行的生活是一种最不愉快的体验。</p>
<p>的确如此，你每天在同一时间起床之后重复同样的行为。你吃着一成不变的食物去同一家电影院。你约会同样的朋友甚至在每周同一时间。很多情况下常规和结构化的模式有助于情绪管理。虽然可预测性是你行为方式的一部分，但如果这部分所占比例太高，则会挤压你生活中的乐趣。</p>
<p>探索新体验是增加幸福感的方式之一。新体验并不需要太大的改变。或许你可以探索下你所在城市的自己不熟悉的地方，品尝些新食物，做一道新菜，阅读一些你平时并非爱好的杂志，或者去参加一些你从未体验过的活动。你也可以走进一家专卖亚洲食品的商店，或者到公园里参加一些游戏活动。新体验能够培养兴趣或者参与甚至取代你之前熟知的意识。当在熟知的范围内发生适当的改变，会刺激你的活力和幸福感。你看孩子们始终拥有对世界的好奇心和迷恋感，因为对于他们来说什么都是新的。所以当你寻求新体验的时候你也能保持一份好奇感。</p>
<p>当你想做一些全新的不同的事情时候，通常会面临已有的惯性思维。你给自己各种借口待在房子里，重复自己昨天甚至前天同样的事情。你告诉自己学习新东西太麻烦了，或者你根本就不喜欢轮滑，那么还为什么要熬夜到很晚，甚至失去自己呼呼大睡的机会呢？这种消极的心理暗示总是非常具有说服力，你会认为你年纪太大没必要再去学习骑骆驼，或者如果你已经在博物馆工作那么你可能接下来的一辈子都会留在这里。</p>
<p>从事新活动是你可以学习的行为。给自己创造一些新体验。如果有朋友愿意和你一起，这将是非常有帮助的。刚开始你可能会觉得不舒服但是一定要坚持下去。直到在这个水平内你感到习惯然后再继续往下走。把你想做的事情列一个清单，保证一周一次并坚持四个月。有时你会厌烦这很正常，所以一定要坚持下去。培养兴趣和保持活力是非常值得做的事情。</p>
<p>译者：小太阳123<br>作者：KARYN HALL,PHD</p>
<hr>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>看懂的人都还在加班中...</title>
    <url>/2016/10/27/%E7%9C%8B%E6%87%82%E7%9A%84%E4%BA%BA%E9%83%BD%E8%BF%98%E5%9C%A8%E5%8A%A0%E7%8F%AD%E4%B8%AD/</url>
    <content><![CDATA[<blockquote>
<p>以下是关于程序员的一些笑话，据说看懂的人都还在加班中。</p>
</blockquote>
<p>0、老婆给当程序员的老公打电话：下班顺路买十个包子，如果看到卖西瓜的，买一个。当晚老公手捧一个包子进了家门。老婆怒道：你怎么只买一个包子？！老公甚恐，喃喃道：因为我真看到卖西瓜的了。</p>
<p>1、一程序员去面试，面试官问：“你毕业才两年，这三年工作经验是怎么来的？！”程序员答：“加班。”</p>
<p>2、某程序员对书法十分感兴趣，退休后决定在这方面有所建树。于是花重金购买了上等的文房四宝。一日，饭后突生雅兴，一番磨墨拟纸，并点上了上好的檀香，颇有王羲之风范，又具颜真卿气势，定神片刻，泼墨挥毫，郑重地写下一行字：<code>hello world</code>。</p>
<p>3、问：程序员最讨厌康熙的哪个儿子。答：胤禩。因为他是八阿哥（<code>bug</code>）</p>
<a id="more"></a>

<p>4、程序猿要了3个孩子，分别取名叫<code>Ctrl</code>、<code>Alt</code> 和 <code>Delete</code>，如果他们不听话，程序猿就只要同时敲他们一下就会好的。</p>
<p>5、今天在公司听到一句惨绝人寰骂人的话：“你 <code>TM</code> 就是一个没有对象的野指针！”</p>
<p>6、程xx遭遇车祸成植物人，医生说她活下来的希望只有万分之一，唤醒更为渺茫。她的同事和亲人没放弃，并根据程xx对 <code>testing</code> 痴迷的作风，每天都在她身边念：“你测的模块上线后回滚了。”奇迹发生了，程xx醒来第一句话：确认那模块是我测的？</p>
<p>7、一个程序员在海滨游泳时溺水身亡。他死前拼命的呼救，当时海滩上有许多救生员，但是没有人救他。因为他一直大喊“<code>F1!</code>”“<code>F1!</code>”，谁都不知道“<code>F1</code>”究竟是什么意思。</p>
<p>8、世界上最远的距离，是我在 <code>if</code> 里你在 <code>else</code> 里，虽然经常一起出现，但却永不结伴执行。</p>
<p>9、正在码代码 <code>ing</code>，医院回来的同事一脸的苦逼样子，问他怎么了？他回答：得了类风湿性关节炎了，我怕会遗传给下一代啊。我一脸的问号：谁说类风湿性关节炎能遗传的？丫一脸诧异：类不是继承的吗？</p>
<p>10、我很奇怪客栈这个词，难道后入住的必须先退房吗？</p>
<p>11、话说，决定一个程序员跳槽与否的关键因素是他前同事的现工资。</p>
<p>12、程序员最憋屈的事情就是：你辛辛苦苦熬夜写了一个风格优雅的源文件，被一个代码风格极差的同事改了且没署名，以至于别人都以为你是写的。</p>
<p>13、前端工程师说，我去交友网站找女朋友去了。朋友问，找到了么？工程师说，找到了他们页面的一个 bug`。</p>
<p>14、<code>C</code> 程序看不起 <code>C++</code> 程序员， <code>C++</code> 程序员看不起 <code>Java</code> 程序员， <code>Java</code> 程序员看不起 <code>C#</code> 程序员，<code>C#</code> 程序员看不起美工，周末了，美工带着妹子出去约会了，一群程序员还在加班！</p>
<p>15、据说一老外年轻的时候，立志要当一名伟大的作家。怎么才算伟大呢？他说：我写的东西全世界都要看到！看完他们必定会歇斯底里！会火冒三丈！会痛苦万分！结果，他成功了，他在微软公司负责写系统蓝屏时的报错提示信息。</p>
<p>16、程序员应聘必备词汇：了解＝听过名字；熟悉＝知道是啥；熟练＝用过；精通＝做过东西。</p>
<p>17、两程序员聊天，程序员甲抱怨：“做程序员太辛苦了，我想换行……我该怎么办？”程序员乙：“敲一下回车。”</p>
<p>18、程序员最讨厌的四件事：写注释、写文档、别人不写注释、别人不写文档……</p>
<p>19、假如生活欺骗了你，找 <code>50</code> 个程序员问问为什么编程；假如生活让你想死，找 <code>50</code> 个程序员问问 <code>Bug</code> 改完了没有；假如你觉得生活拮据，找 <code>50</code> 个程序员问问工资涨了没有；假如你觉得活着无聊，找 <code>50</code> 个程序员问问他们一天都干了什么！</p>
<p>20、男人要记住，与女人吵架的要领是，要像在安装软件或注册网站时阅读 <code>服务条款</code> 那样，直接忽略所有的内容，到最后面勾选 <code>我同意</code>，然后点击 <code>确定</code>。</p>
<p>21、朋友今天遇到的真事：客户说我们设备卡，死活找不到原因，工程师赶到现场，给客户换了个鼠标垫，故障排除……</p>
<p>22、产品经理：“你明白吧，这里向右划可以出菜单，然后需要一个闪烁的动画，还有，我想这个tab可以拉下来，你懂吧？ 设计师：“别废话，把你要抄的产品给我看下。”</p>
<p>23、百度研发的无人驾驶汽车，你会发现有些地方你是去不了的。腾讯研发的无人驾驶汽车，你会发现很多地方你要去是要黄钻会员的。当然，谷歌研发的无人驾驶汽车，你会发现查无此车。</p>
<p>24、话说昨天是周日，程序猿跟产品经理一起看电视。每个节目看到一半程序猿就换台，看到一半就换台，几次之后产品经理终于忍无可忍的咆哮：老子刚看出点意思你就换、刚看出点意思你就换，到底还让不让人看啦？！程序猿淡定的盯着电视道：你半路改需求的时候我可没吱过声！</p>
<p>25、“为什么删除手机上的图标的时候它们会抖？”<br>“它们怕被删除呗。”<br>“那为什么电话短信之类系统自带的删不掉的也在抖呢？”<br>“那是它们在得瑟…”</p>
<p>26、有时候觉得，电脑就像一个高贵冷艳的妹纸。<br><code>400</code>，是她冷冰冰地说：“我听不懂你在说什么”；<br><code>401</code>，是她无情地转身：“我不认识你，别说那些奇怪的话”；<br><code>403</code>，是她残酷的拒绝：“我听懂你的话，也认出你的脸，可我不爱你”；<br><code>404</code>，是她紧闭心门：“我这儿没有你想要的东西”；<br><code>503</code>，是“呵呵我去洗澡”。</p>
<p>27、问：为何软件正在占领全世界，而程序员得不到尊重？答曰：遍身罗绮者，不是养蚕人。</p>
<p>28、她来例假了肚子疼，他坐着她旁边，看了她一眼，拿出手机玩游戏，她看在眼里，心里凉了半截。两分钟后，她实在坐不下去了，正准备离开，只见他默默地递过来他的小米手机说：拿去捂着。</p>
<p>29、惊闻微软要裁员 <code>1.8</code> 万人。他们就不能让这些员工们“在后台运行”吗？</p>
<p>30、今天看到我同事在笔记本电脑上实现 <code>滑动解锁</code> ！真的，看到我当场就震精了，异常碉堡……你知道吗？！他的电脑开机解锁密码是 <code>ASDFGHJKL;’</code> ，然后唰得一下过去最后一个键落在回车上，就，就解锁了！</p>
<p>31、骗子网站太特么多了，你一打开，必定跳出一个很下流的游戏广告！——但这还不是最关键的，关键是如果你忍不住点击进入游戏之后，就会发现这些下流的元素全都不见了！这也太没有职业道德了吧！</p>
<p>32、最近发现自己陷入了一种状态，叫开机迷失。开电脑前，该做什么清清楚楚。但只要一登录，随手开个网页，刷下新闻微博甚至仅仅是音乐网站，然后再回过神来，已经到了深夜，要做的事一项没做。而最痛苦的是，在睡前闭眼的时候，整个被浪费的白天和那些被耽误的正事，总会掺杂着负罪感，无比清晰地浮现。</p>
<p>33、我要设计一个新的智能机应用程序叫做 <code>惊慌</code>，只要你一说 <code>老婆</code> 这两个字, 它就会关闭所有网页, 隐藏所有跟女性的聊天以及怪怪的文件夹, 并且把我老婆的照片设为墙纸。</p>
<p>34、我从苹果手机的背面知道了一个好地方叫做加利福尼亚，据说那里有阳光和沙滩，还有 <code>Google</code> 和 <code>Tesla</code>。据说那里的人经常讨论怎么创业，而不是怎么移民。我虽然在中国，但也去过那里，不是在梦中，而是通过 <code>VPN</code>。</p>
<p>35、边上工位的妹纸叫柳依依，她的爸爸也是位程序员，依依的大姐叫玲玲，二姐叫玲依，三姐叫依玲</p>
<hr>
<p>整理自网络</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>程序员幽默</tag>
      </tags>
  </entry>
  <entry>
    <title>设置 Sublime Text3 主题透明</title>
    <url>/2016/10/24/%E8%AE%BE%E7%BD%AE-Sublime-Text3-%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E/</url>
    <content><![CDATA[<h1 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h1><p>下载地址：<a href="https://github.com/vhanla/SublimeTextTrans" target="_blank" rel="noopener">SublimeTextTrans</a>。</p>
<h1 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h1><p>解压到 Sublime Text3 的 Packages 存放目录下，命名为：<code>SublimeTextTrans</code>。点击 Sublime Text3 的 <code>Preferences -&gt; Browse Packages</code> 打开 Packages 存放目录，一般情况是在 <code>C:\Users\YOURNAME\AppData\Roaming\Sublime Text 3\Packages</code> 目录下。</p>
<h1 id="3-设置-Sublime-Text3-的透明度级别。"><a href="#3-设置-Sublime-Text3-的透明度级别。" class="headerlink" title="3. 设置 Sublime Text3 的透明度级别。"></a>3. 设置 Sublime Text3 的透明度级别。</h1><p>点击 Sublime Text3 的 <code>Preferences -&gt; Package Setting -&gt; SublimeTextTrans -&gt; Setting - User</code> 就可以设置透明度的级别了。</p>
<a id="more"></a>

<p>也可以通过 <code>Ctrl+Shift+1、2、3、4、5、6</code> 加载预设的 6 个透明级别。预设的透明级别在 <code>Preferences -&gt; Package Setting -&gt; SublimeTextTrans -&gt; Setting - Default</code> 中可以查看。</p>
<hr>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] CentOS 升级 kernel</title>
    <url>/2017/01/10/%E8%BD%AC-CentOS-%E5%8D%87%E7%BA%A7-kernel/</url>
    <content><![CDATA[<h1 id="一、手动档"><a href="#一、手动档" class="headerlink" title="一、手动档"></a>一、手动档</h1><p>手动档就是从源码开始编译内核安装，好处是可以自己选择任意版本的内核，缺点就是耗时长，编译安装消耗系统资源</p>
<h2 id="1-1、获取-kernel-源码"><a href="#1-1、获取-kernel-源码" class="headerlink" title="1.1、获取 kernel 源码"></a>1.1、获取 kernel 源码</h2><p>这世界上最伟大的 Linux 内核源码下载地址是 <a href="https://kernel.org/" target="_blank" rel="noopener">kernel</a> 官网，选择一个稳定版本下载即可</p>
<h2 id="1-2、解压并清理"><a href="#1-2、解压并清理" class="headerlink" title="1.2、解压并清理"></a>1.2、解压并清理</h2><p>官方要求将其解压到 <code>/usr/src</code> 目录，其实在哪都可以，为了规范一点索性也解压到此位置，然后为了防止编译残留先做一次清理动作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载内核源码</span></span><br><span class="line">$ wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并移动到 /usr/src</span></span><br><span class="line">$ tar -Jxvf linux-4.8.6.tar.xz</span><br><span class="line">$ mv linux-4.8.6 /usr/src/kernels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清理（没 gcc 的要装一下）</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/src/kernels/linux-4.8.6</span><br><span class="line">$ make mrproper &amp;&amp; make clean</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-3、生成编译配置表"><a href="#1-3、生成编译配置表" class="headerlink" title="1.3、生成编译配置表"></a>1.3、生成编译配置表</h2><p>kernel 在编译时需要一个配置文件（<code>.config</code>），用于描述开启哪些特性等，该文件一般可通过一下四种途径获得:</p>
<ul>
<li>复制当前系统编译配置表，即 <code>cp /boot/config-xxx .config</code>；如果系统有多个内核，那么根据版本号选择最新的即可</li>
<li>使用 <code>make defconfig</code> 命令获取当前系统编译配置表，该命令会自动写入到 <code>.config</code> 中</li>
<li>使用 <code>make localmodconfig</code> 命令开启交互模式，然后根据提示生成编译配置表</li>
<li>使用 <code>make oldconfig</code> 命令根据旧的编译配置表生成新的编译配置表，<strong>刚方式会直接读取旧的便已配置表，并在以前没有设定过的配置时会自动开启交互模式</strong></li>
</ul>
<p>这里采用最后一种方式生成</p>
<h2 id="1-4、编译并安装"><a href="#1-4、编译并安装" class="headerlink" title="1.4、编译并安装"></a>1.4、编译并安装</h2><p>内核配置表生成完成后便可进行编译和安装（需要安装 <code>bc、openssl-devel</code> 等）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make modules</span><br><span class="line">$ make modules_install</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<p>最后执行重启验证即可，验证成功后可删除旧的内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检索已安装的内核</span></span><br><span class="line">$ sudo rpm -qa | grep kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的内核</span></span><br><span class="line">$ sudo rpm -e kernel-3.10.0-327.el7.x86_64</span><br></pre></td></tr></table></figure>

<h1 id="二、自动档"><a href="#二、自动档" class="headerlink" title="二、自动档"></a>二、自动档</h1><p>相对于手动档编译安装，CentOS 还可以通过使用 <a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="noopener">elrepo</a> 源的方式直接安装最新稳定版 kernel，脚本如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import key</span></span><br><span class="line">$ sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># install elrepo repo</span></span><br><span class="line">$ sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># install kernel</span></span><br><span class="line">$ sudo yum --enablerepo=elrepo-kernel install  kernel-ml-devel kernel-ml -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify grub</span></span><br><span class="line">$ sudo grub2-set-default 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot system</span></span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<p><a href="https://mritd.me/2016/11/08/update-centos-kernel/" target="_blank" rel="noopener">原文地址</a></p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Git 版本回滚</title>
    <url>/2016/11/07/%E8%BD%AC-Git-%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A/</url>
    <content><![CDATA[<blockquote>
<p>总有一天你会遇到下面的问题：</p>
</blockquote>
<ul>
<li>改完代码匆忙提交，上线发现有问题，怎么办？赶紧回滚。</li>
<li>改完代码测试也没有问题，但是上线发现你的修改影响了之前运行正常的代码报错，必须回滚。</li>
</ul>
<p>这些开发中很常见的问题，所以 <code>git</code> 的取消提交，回退甚至返回上一版本都是特别重要的。大致分为下面 <code>2</code> 种情况：</p>
<h1 id="一、没有-push"><a href="#一、没有-push" class="headerlink" title="一、没有 push"></a>一、没有 push</h1><p>这种情况发生在你的本地代码仓库，可能你 <code>add</code>，<code>commit</code> 以后发现代码有点问题，准备取消提交，用到下面命令回退到某个版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面常见三种类型</p>
<h2 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h2><p>会保留源码，只是将 <code>git commit</code> 和 <code>index</code> 信息回退到了某个版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset 默认是 --mixed 模式 </span><br><span class="line">git reset --mixed  等价于  git reset</span><br></pre></td></tr></table></figure>

<h2 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h2><p>保留源码，只回退到 <code>commit</code> 信息到某个版本。不涉及 <code>index</code> 的回退，如果还需要提交，直接 <code>commit</code> 即可。</p>
<h2 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h2><p>源码也会回退到某个版本，<code>commit</code> 和 <code>index</code> 都回回退到某个版本。（<strong>注意，这种方式是改变本地代码仓库源码</strong>）</p>
<h1 id="二、已经-push"><a href="#二、已经-push" class="headerlink" title="二、已经 push"></a>二、已经 push</h1><h2 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1 方法一"></a>2.1 方法一</h2><p>使用 <code>git reset --hard &lt;commit...&gt;</code> 回退本地代码到某个版本。</p>
<p>使用 <code>git push --force</code> 将本次变更强行推送至服务器（因为你线上的代码没有变，线上 <code>commit</code>，<code>index</code> 都没有变，所以必须使用强制推送）。这样在服务器上的最后一次错误提交也彻底消失了。</p>
<p><strong>注意：</strong>这样操作比较比较危险，例如：在你的 <code>commit</code> 之后别人又提交了新的 <code>commit</code>，那在你强制推送之后，那位仁兄的 <code>commit</code> 也跟着一起消失了，所以不建议这样操作。</p>
<h2 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2 方法二"></a>2.2 方法二</h2><p>使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit-ish&gt;...</span><br></pre></td></tr></table></figure>

<p><code>git revert</code> 用于反转提交，用一个新提交来撤销某次提交，执行 <code>revert</code> 命令时要求工作树必须是干净的。</p>
<p><code>revert</code> 之后你再 <code>git push</code> 既可以把线上的代码更新。（这里不会像 <code>reset</code> 造成冲突的问题）</p>
<p><code>revert</code> 使用需要先找到你想回滚版本唯一的 <code>commit</code> 标识代码，可以用 <code>git log</code> 或者在 <code>adgit</code> 搭建的 <code>web</code> 环境历史提交记录里查看。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</span><br></pre></td></tr></table></figure>

<p>通常，前几位即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert c011eb3</span><br></pre></td></tr></table></figure>

<h1 id="三、revert-与-reset-比较"><a href="#三、revert-与-reset-比较" class="headerlink" title="三、revert 与 reset 比较"></a>三、revert 与 reset 比较</h1><p><code>git revert</code> 是用一次新的 <code>commit</code> 来回滚之前的 <code>commit</code>，<code>git reset</code> 是直接删除指定的 <code>commit</code>。</p>
<p>看似达到的效果是一样的，其实完全不同。</p>
<p>3.1 上面我们说的如果你已经 <code>push</code> 到线上代码库， <code>reset</code> 删除指定 <code>commit</code> 以后，你 <code>git push</code> 可能导致一大堆冲突。但是 <code>revert</code> 并不会。</p>
<p>3.2 如果在日后现有分支和历史分支需要合并的时候，<code>reset</code> 恢复部分的代码依然会出现在历史分支里。但是 <code>revert</code> 方向提交的 <code>commit</code> 并不会出现在历史分支里。</p>
<p>3.3 <code>reset</code> 是在正常的 <code>commit</code> 历史中，删除了指定的 <code>commit</code>，这时 <code>HEAD</code> 是向后移动了，而 <code>revert</code> 是在正常的 <code>commit</code> 历史中再 <code>commit</code> 一次，只不过是反向提交，他的 <code>HEAD</code> 是一直向前的。</p>
<hr>
<p><a href="http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html" target="_blank" rel="noopener">参考文章地址</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Git查看、删除、重命名远程分支和tag</title>
    <url>/2017/06/15/%E8%BD%AC-Git%E6%9F%A5%E7%9C%8B%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E9%87%8D%E5%91%BD%E5%90%8D%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8Ctag/</url>
    <content><![CDATA[<h2 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><p>加上 <code>-a</code> 参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"> master</span><br><span class="line"> remote</span><br><span class="line"> tungway</span><br><span class="line"> v1.52</span><br><span class="line">* zrong</span><br><span class="line"> remotes/origin/master</span><br><span class="line"> remotes/origin/tungway</span><br><span class="line"> remotes/origin/v1.52</span><br><span class="line"> remotes/origin/zrong</span><br></pre></td></tr></table></figure>

<h2 id="删除远程分支和-tag"><a href="#删除远程分支和-tag" class="headerlink" title="删除远程分支和 tag"></a>删除远程分支和 <code>tag</code></h2><p>在 <code>Git v1.7.0</code> 之后，可以使用这种语法删除远程分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete &lt;branchName&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>删除 <code>tag</code> 这么用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin :&lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>这是删除 <code>tag</code> 的方法，推送一个空 <code>tag</code> 到远程 <code>tag</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>两种语法作用完全相同。</p>
<h2 id="删除不存在对应远程分支的本地分支"><a href="#删除不存在对应远程分支的本地分支" class="headerlink" title="删除不存在对应远程分支的本地分支"></a>删除不存在对应远程分支的本地分支</h2><p>假设这样一种情况：</p>
<ol>
<li>我创建了本地分支 <code>b1</code> 并 pull 到远程分支 <code>origin/b1</code>；</li>
<li>其他人在本地使用 <code>fetch</code> 或 <code>pull</code> 创建了本地的 <code>b1</code> 分支；</li>
<li>我删除了 <code>origin/b1</code> 远程分支；</li>
<li>其他人再次执行 <code>fetch</code> 或者 <code>pull</code> 并不会删除这个他们本地的 <code>b1</code> 分支，运行 <code>git branch -a</code> 也不能看出这个 <code>branch</code> 被删除了，如何处理？</li>
</ol>
<p>使用下面的代码查看 <code>b1</code> 的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote show origin</span></span><br><span class="line">* remote origin</span><br><span class="line"> Fetch URL: git@github.com:xxx/xxx.git</span><br><span class="line"> Push  URL: git@github.com:xxx/xxx.git</span><br><span class="line"> HEAD branch: master</span><br><span class="line"> Remote branches:</span><br><span class="line">   master                 tracked</span><br><span class="line">   refs/remotes/origin/b1 stale (use 'git remote prune' to remove)</span><br><span class="line"> Local branch configured for 'git pull':</span><br><span class="line">   master merges with remote master</span><br><span class="line"> Local ref configured for 'git push':</span><br><span class="line">   master pushes to master (up to date)</span><br></pre></td></tr></table></figure>

<p>这时候能够看到 <code>b1</code> 是 <code>stale</code> 的，使用 <code>git remote prune origin</code> 可以将其从本地版本库中去除。</p>
<p>更简单的方法是使用这个命令，它在 <code>fetch</code> 之后删除掉没有与远程分支对应的本地分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>

<h2 id="重命名远程分支"><a href="#重命名远程分支" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h2><p>在 <code>git</code> 中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p>
<p>例如下面的例子中，我需要把 <code>devel</code> 分支重命名为 <code>develop</code> 分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -av</span></span><br><span class="line">* devel                             752bb84 Merge pull request #158 from Gwill/devel</span><br><span class="line"> master                            53b27b8 Merge pull request #138 from tdlrobin/master</span><br><span class="line"> zrong                             2ae98d8 modify CCFileUtils, export getFileData</span><br><span class="line"> remotes/origin/HEAD               -&gt; origin/master</span><br><span class="line"> remotes/origin/add_build_script   d4a8c4f Merge branch 'master' into add_build_script</span><br><span class="line"> remotes/origin/devel              752bb84 Merge pull request #158 from Gwill/devel</span><br><span class="line"> remotes/origin/devel_qt51         62208f1 update .gitignore</span><br><span class="line"> remotes/origin/master             53b27b8 Merge pull request #138 from tdlrobin/master</span><br><span class="line"> remotes/origin/zrong              2ae98d8 modify CCFileUtils, export getFileData</span><br></pre></td></tr></table></figure>

<p>删除远程分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --delete origin devel</span></span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line">- [deleted]         devel</span><br></pre></td></tr></table></figure>

<p>重命名本地分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -m devel develop</span><br></pre></td></tr></table></figure>

<p>推送本地分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin develop</span></span><br><span class="line">Counting objects: 92, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (48/48), done.</span><br><span class="line">Writing objects: 100% (58/58), 1.38 MiB, done.</span><br><span class="line">Total 58 (delta 34), reused 12 (delta 5)</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line">* [new branch]      develop -&gt; develop</span><br></pre></td></tr></table></figure>

<p>然而，在 <code>github</code> 上操作的时候，我在删除远程分支时碰到这个错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --delete origin devel</span></span><br><span class="line">remote: error: refusing to delete the current branch: refs/heads/devel</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line">! [remote rejected] devel (deletion of the current branch prohibited)</span><br><span class="line">error: failed to push some refs to 'git@github.com:zrong/quick-cocos2d-x.git'</span><br></pre></td></tr></table></figure>

<p>这是由于在 <code>github</code> 中，<code>devel</code> 是项目的默认分支。要解决此问题，这样操作：</p>
<ol>
<li>进入 <code>github</code> 中该项目的 <code>Settings</code> 页面；</li>
<li>设置 <code>Default Branch</code> 为其他的分支（例如：<code>master</code>）；</li>
<li>重新执行删除远程分支命令。</li>
</ol>
<h2 id="把本地-tag-推送到远程"><a href="#把本地-tag-推送到远程" class="headerlink" title="把本地 tag 推送到远程"></a>把本地 <code>tag</code> 推送到远程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<h2 id="获取远程-tag"><a href="#获取远程-tag" class="headerlink" title="获取远程 tag"></a>获取远程 <code>tag</code></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote" target="_blank" rel="noopener">https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote</a></li>
<li><a href="http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github" target="_blank" rel="noopener">http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github</a></li>
<li><a href="http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html" target="_blank" rel="noopener">http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html</a></li>
<li><a href="http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch" target="_blank" rel="noopener">http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch</a></li>
<li><a href="http://weli.iteye.com/blog/1441582" target="_blank" rel="noopener">http://weli.iteye.com/blog/1441582</a></li>
</ul>
<hr>
<p><a href="http://zengrong.net/post/1746.htm" target="_blank" rel="noopener">原文出处</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] JMS 基本概念</title>
    <url>/2016/07/21/%E8%BD%AC-JMS%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>JMS（JAVA Message Service,java消息服务）API是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JMS是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。</p>
<h2 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h2><ul>
<li>Point-to-Point(P2P)</li>
<li>Publish/Subscribe(Pub/Sub)</li>
</ul>
<p>即点对点和发布订阅模型</p>
<a id="more"></a>

<h2 id="P2P模型"><a href="#P2P模型" class="headerlink" title="P2P模型"></a>P2P模型</h2><h3 id="P2P模式图"><a href="#P2P模式图" class="headerlink" title="P2P模式图"></a>P2P模式图</h3><p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/1469075459852.jpg" alt="P2P模式图"></p>
<h3 id="涉及到的概念"><a href="#涉及到的概念" class="headerlink" title="涉及到的概念"></a>涉及到的概念</h3><ul>
<li>消息队列（Queue）</li>
<li>发送者(Sender)</li>
<li>接收者(Receiver)</li>
</ul>
<p>每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p>
<h3 id="P2P模型的特点"><a href="#P2P模型的特点" class="headerlink" title="P2P模型的特点"></a>P2P模型的特点</h3><ul>
<li>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)</li>
<li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li>
<li>接收者在成功接收消息之后需向队列应答成功</li>
</ul>
<p>如果你希望发送的每个消息都应该被成功处理的话，那么你需要P2P模式。</p>
<h2 id="Pub-Sub模型"><a href="#Pub-Sub模型" class="headerlink" title="Pub/Sub模型"></a>Pub/Sub模型</h2><h3 id="Pub-Sub模式图"><a href="#Pub-Sub模式图" class="headerlink" title="Pub/Sub模式图"></a>Pub/Sub模式图</h3><p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20150630221227522.jpg" alt="Pub/Sub模式图"></p>
<h3 id="涉及到的概念-1"><a href="#涉及到的概念-1" class="headerlink" title="涉及到的概念"></a>涉及到的概念</h3><ul>
<li>主题（Topic）</li>
<li>发布者（Publisher）</li>
<li>订阅者（Subscriber）</li>
</ul>
<p>客户端将消息发送到主题。多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p>
<h3 id="Pub-Sub模型的特点"><a href="#Pub-Sub模型的特点" class="headerlink" title="Pub/Sub模型的特点"></a>Pub/Sub模型的特点</h3><ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息，而且为了消费消息，订阅者必须保持运行的状态。</li>
<li>为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</li>
</ul>
<p>如果你希望发送的消息可以不被做任何处理、或者被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型。</p>
<h2 id="消息的消费"><a href="#消息的消费" class="headerlink" title="消息的消费"></a>消息的消费</h2><p>在JMS中，消息的产生和消息是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。</p>
<ul>
<li>同步<br>订阅者或接收者调用receive方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞</li>
<li>异步<br>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法</li>
</ul>
<h2 id="JMS编程模型"><a href="#JMS编程模型" class="headerlink" title="JMS编程模型"></a>JMS编程模型</h2><ul>
<li><h3 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h3></li>
</ul>
<p>创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。可以通过JNDI来查找ConnectionFactory对象。</p>
<ul>
<li><h3 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h3></li>
</ul>
<p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。</p>
<p>所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。</p>
<ul>
<li><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3></li>
</ul>
<p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。</p>
<ul>
<li><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3></li>
</ul>
<p>Session是我们操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当我们需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。</p>
<ul>
<li><h3 id="消息的生产者"><a href="#消息的生产者" class="headerlink" title="消息的生产者"></a>消息的生产者</h3></li>
</ul>
<p>消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p>
<ul>
<li><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3></li>
</ul>
<p>消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p>
<ul>
<li><h3 id="MessageListener"><a href="#MessageListener" class="headerlink" title="MessageListener"></a>MessageListener</h3></li>
</ul>
<p>消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p>
<h2 id="企业消息系统的好处"><a href="#企业消息系统的好处" class="headerlink" title="企业消息系统的好处"></a>企业消息系统的好处</h2><p>我们先来看看下图，应用程序A将Message发送到服务器上，然后应用程序B从服务器中接收A发来的消息，通过这个图我们一起来分析一下JMS的好处：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20150630221818616.jpg" alt="企业消息系统的好处"></p>
<ul>
<li>提供消息灵活性</li>
<li>松散耦合</li>
<li>异步性</li>
</ul>
<hr>
<p><a href="http://blog.csdn.net/jiuqiyuliang/article/details/46701559" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JMS</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Java程序员情书</title>
    <url>/2016/08/22/%E8%BD%AC-Java%E7%A8%8B%E5%BA%8F%E5%91%98%E6%83%85%E4%B9%A6/</url>
    <content><![CDATA[<p>我能抽象出整个世界．．．</p>
<p>但是我却不能抽象出你．．．</p>
<p>你肯定是一个单例，因为你是那样的独一无二…</p>
<p>所以我的世界并不完整．．．</p>
<p>我可以重载甚至覆盖这个世界里的任何一种方法．．．</p>
<p>但是却不能覆盖对你的思念．．．</p>
<p>也许命中注定了 你与我存在于不同的包里…</p>
<p>在你的世界里，你被烙上了私有的属性…</p>
<a id="more"></a>

<p>我用尽全身力气，也找不到访问你的接口…</p>
<p>我不愿就此甘心，找到了藏身在神殿的巫师，教会了我穿越时空的方法…</p>
<p>终于，我用反射这把利剑，打开了你空间的缺口…</p>
<p>并发现了接近你的秘密…</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/222wqklkmlqej5-lp.jpg" alt="enter description here"></p>
<p>当我迫不及待地调用了爱你这个方法．．．</p>
<p>并义无返顾的把自己作为参数传进这个方法时．．．</p>
<p>我才发现爱上你是一个没有终止条件的递归．．．</p>
<p>它不停的返回我对你的思念并压入我心里的堆栈．．．</p>
<p>在这无尽的黑夜中 ，终于体验到你对我爱的回调…</p>
<p>我的内存里已经再也装不下别人…</p>
<p>当我以为将与你在这个死循环中天荒地老时…</p>
<p>万恶的系统抛出了爱的异常…</p>
<p>此刻我才发现，我不过是操纵于虚拟机下的一个线程，你也是…</p>
<p>但我毫不后悔，因为在爱的洗礼之后…</p>
<p>我看见了一个新的生命，那是我们的, 继承</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height=110 src="//music.163.com/outchain/player?type=0&id=448161195&auto=1&height=90"></iframe>


]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Linux 查看系统内核版本和发行版本</title>
    <url>/2016/11/18/%E8%BD%AC-Linux-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="一、查看-Linux-内核版本命令"><a href="#一、查看-Linux-内核版本命令" class="headerlink" title="一、查看 Linux 内核版本命令"></a>一、查看 Linux 内核版本命令</h1><p>以下两条命令适合所有 <code>Linux</code> 系统。</p>
<h2 id="1、cat-proc-version"><a href="#1、cat-proc-version" class="headerlink" title="1、cat /proc/version"></a>1、cat /proc/version</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/version</span><br><span class="line">Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015</span></span><br><span class="line"></span><br><span class="line">➜  ~ cat /proc/version</span><br><span class="line">Linux version 4.4.0-36-generic (buildd@lcy01-01) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class="comment">#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016</span></span><br></pre></td></tr></table></figure>

<h2 id="2、uname-a"><a href="#2、uname-a" class="headerlink" title="2、uname -a"></a>2、uname -a</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux centos 3.10.0-327.el7.x86_64 <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">➜  ~ uname -a</span><br><span class="line">Linux www 4.4.0-36-generic <span class="comment">#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、查看-Linux-系统版本的命令"><a href="#二、查看-Linux-系统版本的命令" class="headerlink" title="二、查看 Linux 系统版本的命令"></a>二、查看 Linux 系统版本的命令</h1><h2 id="1、lsb-release-a"><a href="#1、lsb-release-a" class="headerlink" title="1、lsb_release -a"></a>1、lsb_release -a</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsb_release -a</span><br><span class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description:    CentOS Linux release 7.2.1511 (Core)</span><br><span class="line">Release:        7.2.1511</span><br><span class="line">Codename:       Core</span><br><span class="line"></span><br><span class="line">➜  ~ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 16.04.1 LTS</span><br><span class="line">Release:    16.04</span><br><span class="line">Codename:   xenial</span><br></pre></td></tr></table></figure>
<p>这个命令适用于所有的 <code>Linux</code> 发行版，包括 <code>Redhat</code>、<code>SuSE</code>、<code>Debian…</code> 等发行版。</p>
<p>有的系统中默认并没有安装 <code>lsb_release</code>，需要安装。下面介绍一下 <code>CentOS</code> 系统中安装方法。</p>
<p>首先查找 <code>lsb_release</code> 安装包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum provides lsb_release</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.btte.net</span><br><span class="line"> * extras: mirrors.btte.net</span><br><span class="line"> * updates: mirrors.btte.net</span><br><span class="line">redhat-lsb-core-4.1-27.el7.centos.1.i686 : LSB Core module support</span><br><span class="line">源    ：base</span><br><span class="line">匹配来源：</span><br><span class="line">文件名    ：/usr/bin/lsb_release</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y redhat-lsb-core</span><br></pre></td></tr></table></figure>

<h2 id="2、cat-etc-redhat-release"><a href="#2、cat-etc-redhat-release" class="headerlink" title="2、cat /etc/redhat-release"></a>2、cat /etc/redhat-release</h2><p>这种方法只适合查看 <code>Redhat</code> 系的 <code>Linux</code>，如：<code>CentOS</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure>

<h2 id="3、cat-etc-issue"><a href="#3、cat-etc-issue" class="headerlink" title="3、cat /etc/issue"></a>3、cat /etc/issue</h2><p>此命令适用于所有的 <code>Linux</code> 发行版。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ cat /etc/issue</span><br><span class="line">Ubuntu 16.04.1 LTS \n \l</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux版本</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]Tmux 快捷键速查表</title>
    <url>/2017/10/25/tmux-cheat-sheet/</url>
    <content><![CDATA[<h1 id="Tmux-快捷键-amp-速查表"><a href="#Tmux-快捷键-amp-速查表" class="headerlink" title="Tmux 快捷键 &amp; 速查表"></a>Tmux 快捷键 &amp; 速查表</h1><p>启动新会话：</p>
<pre><code>tmux [new -s 会话名 -n 窗口名]</code></pre><p>恢复会话：</p>
<pre><code>tmux at [-t 会话名]</code></pre><p>列出所有会话：</p>
<pre><code>tmux ls</code></pre><p><a name="killSessions"></a>关闭会话：</p>
<pre><code>tmux kill-session -t 会话名</code></pre><p><a name="killAllSessions"></a>关闭所有会话：</p>
<pre><code>tmux ls | grep : | cut -d. -f1 | awk &apos;{print substr($1, 0, length($1)-1)}&apos; | xargs kill</code></pre><a id="more"></a>
<h1 id="在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后："><a href="#在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后：" class="headerlink" title="在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后："></a>在 Tmux 中，按下 Tmux 前缀 <code>ctrl+b</code>，然后：</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><pre><code>:new&lt;回车&gt;  启动新会话
s           列出所有会话
$           重命名当前会话</code></pre><h2 id="窗口-标签页"><a href="#窗口-标签页" class="headerlink" title="窗口 (标签页)"></a><a name="WindowsTabs"></a>窗口 (标签页)</h2><pre><code>c  创建新窗口
w  列出所有窗口
n  后一个窗口
p  前一个窗口
f  查找窗口
,  重命名当前窗口
&amp;  关闭当前窗口</code></pre><h2 id="调整窗口排序"><a href="#调整窗口排序" class="headerlink" title="调整窗口排序"></a>调整窗口排序</h2><pre><code>swap-window -s 3 -t 1  交换 3 号和 1 号窗口
swap-window -t 1       交换当前和 1 号窗口
move-window -t 1       移动当前窗口到 1 号</code></pre><h2 id="窗格（分割窗口）"><a href="#窗格（分割窗口）" class="headerlink" title="窗格（分割窗口）"></a><a name="PanesSplits"></a>窗格（分割窗口）</h2><pre><code>%  垂直分割
&quot;  水平分割
o  交换窗格
x  关闭窗格
⍽  左边这个符号代表空格键 - 切换布局
q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格
{ 与上一个窗格交换位置
} 与下一个窗格交换位置
z 切换窗格最大化/最小化</code></pre><h2 id="同步窗格"><a href="#同步窗格" class="headerlink" title="同步窗格"></a><a name="syncPanes"></a>同步窗格</h2><p>这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:setw synchronize-panes</span><br></pre></td></tr></table></figure>

<p>你可以指定开或关，否则重复执行命令会在两者间切换。<br>这个选项值针对某个窗口有效，不会影响别的会话和窗口。<br>完事儿之后再次执行命令来关闭。<a href="http://blog.sanctum.geek.nz/sync-tmux-panes/" target="_blank" rel="noopener">帮助</a></p>
<h2 id="调整窗格尺寸"><a href="#调整窗格尺寸" class="headerlink" title="调整窗格尺寸"></a>调整窗格尺寸</h2><p>如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格：</p>
<pre><code>PREFIX : resize-pane -D          当前窗格向下扩大 1 格
PREFIX : resize-pane -U          当前窗格向上扩大 1 格
PREFIX : resize-pane -L          当前窗格向左扩大 1 格
PREFIX : resize-pane -R          当前窗格向右扩大 1 格
PREFIX : resize-pane -D 20       当前窗格向下扩大 20 格
PREFIX : resize-pane -t 2 -L 20  编号为 2 的窗格向左扩大 20 格</code></pre><h2 id="文本复制模式："><a href="#文本复制模式：" class="headerlink" title="文本复制模式："></a>文本复制模式：</h2><p>按下<strong>前缀 [</strong>进入文本复制模式。可以使用方向键在屏幕中移动光标。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中：</p>
<pre><code>setw -g mode-keys vi</code></pre><p>启用这条配置后，就可以使用 h、j、k、l 来移动光标了。</p>
<p>想要退出文本复制模式的话，按下回车键就可以了。一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。</p>
<p>例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。</p>
<pre><code>vi             emacs        功能
^              M-m          反缩进
Escape         C-g          清除选定内容
Enter          M-w          复制选定内容
j              Down         光标下移
h              Left         光标左移
l              Right        光标右移
L                           光标移到尾行
M              M-r          光标移到中间行
H              M-R          光标移到首行
k              Up           光标上移
d              C-u          删除整行
D              C-k          删除到行末
$              C-e          移到行尾
:              g            前往指定行
C-d            M-Down       向下滚动半屏
C-u            M-Up         向上滚动半屏
C-f            Page down    下一页
w              M-f          下一个词
p              C-y          粘贴
C-b            Page up      上一页
b              M-b          上一个词
q              Escape       退出
C-Down or J    C-Down       向下翻
C-Up or K      C-Up         向下翻
n              n            继续搜索
?              C-r          向前搜索
/              C-s          向后搜索
0              C-a          移到行首
Space          C-Space      开始选中
               C-t          字符调序</code></pre><h2 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h2><pre><code>d  退出 tmux（tmux 仍在后台运行）
t  窗口中央显示一个数字时钟
?  列出所有快捷键
:  命令提示符</code></pre><h2 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h2><pre><code># 鼠标支持 - 设置为 on 来启用鼠标
* setw -g mode-mouse off
* set -g mouse-select-pane off
* set -g mouse-resize-pane off
* set -g mouse-select-window off

# 设置默认终端模式为 256color
set -g default-terminal &quot;screen-256color&quot;

# 启用活动警告
setw -g monitor-activity on
set -g visual-activity on

# 居中窗口列表
set -g status-justify centre

# 最大化/恢复窗格
unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp</code></pre><h2 id="配置文件（-tmux-conf）："><a href="#配置文件（-tmux-conf）：" class="headerlink" title="配置文件（~/.tmux.conf）："></a>配置文件（~/.tmux.conf）：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line"><span class="built_in">set</span> -g default-terminal <span class="string">"screen-256color"</span></span><br><span class="line"><span class="built_in">set</span> -g display-time 3000</span><br><span class="line"><span class="built_in">set</span> -g escape-time 0</span><br><span class="line"><span class="built_in">set</span> -g <span class="built_in">history</span>-limit 65535</span><br><span class="line"><span class="built_in">set</span> -g base-index 1</span><br><span class="line"><span class="built_in">set</span> -g pane-base-index 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前缀绑定 (Ctrl+a)</span></span><br><span class="line"><span class="built_in">set</span> -g prefix ^a</span><br><span class="line">unbind ^b</span><br><span class="line"><span class="built_in">bind</span> a send-prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割窗口</span></span><br><span class="line">unbind <span class="string">'"'</span></span><br><span class="line"><span class="built_in">bind</span> - splitw -v</span><br><span class="line">unbind %</span><br><span class="line"><span class="built_in">bind</span> | splitw -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中窗口</span></span><br><span class="line"><span class="built_in">bind</span>-key k select-pane -U</span><br><span class="line"><span class="built_in">bind</span>-key j select-pane -D</span><br><span class="line"><span class="built_in">bind</span>-key h select-pane -L</span><br><span class="line"><span class="built_in">bind</span>-key l select-pane -R</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy-mode 将快捷键设置为 vi 模式</span></span><br><span class="line">setw -g mode-keys vi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用鼠标(Tmux v2.1)</span></span><br><span class="line"><span class="built_in">set</span> -g mouse on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置文件</span></span><br><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf \; display <span class="string">"已更新"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># Tmux Plugin Manager(Tmux v2.1)</span></span><br><span class="line"><span class="comment"># Tmux Resurrect</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-resurrect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of plugins</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-sensible'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Other examples:</span></span><br><span class="line"><span class="comment"># set -g @plugin 'github_username/plugin_name'</span></span><br><span class="line"><span class="comment"># set -g @plugin 'git@github.com/user/plugin'</span></span><br><span class="line"><span class="comment"># set -g @plugin 'git@bitbucket.com/user/plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] shell 中单引号、双引号、反引号、反斜杠区别</title>
    <url>/2016/12/30/%E8%BD%AC-shell-%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8C%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p><code>shell</code> 可以识别 <code>4</code> 种不同类型的引字符号：单引号字符 <code>&#39;</code>，双引号字符 <code>&quot;</code>，反斜杠字符 <code>\</code>，反引号字符 <code>`</code> ，学习 <code>shell</code> 编程的朋友可以看下。</p>
</blockquote>
<h1 id="1-单引号-39"><a href="#1-单引号-39" class="headerlink" title="1. 单引号( &#39; )"></a>1. 单引号( <code>&#39;</code> )</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep Susan phonebook</span></span><br><span class="line">Susan Goldberg 403-212-4921</span><br><span class="line">Susan Topple 212-234-2343</span><br></pre></td></tr></table></figure>

<p>如果我们想查找的是 <code>Susan Goldberg</code>，不能直接使用 <code>grep Susan Goldberg phonebook</code> 命令，<code>grep</code> 会把 <code>Goldberg</code> 和 <code>phonebook</code> 当作需要搜索的文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">'Susan Gold'</span> phonebook</span></span><br><span class="line">Susan Goldberg 403-212-4921</span><br></pre></td></tr></table></figure>

<p>当 <code>shell</code> 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。</p>
<a id="more"></a>

<h1 id="2-双引号-quot"><a href="#2-双引号-quot" class="headerlink" title="2. 双引号( &quot; )"></a>2. 双引号( <code>&quot;</code> )</h1><p>双引号作用与单引号类似，区别在于它没有那么严格。单引号告诉 <code>shell</code> 忽略所有特殊字符，而双引号只要求忽略大多数，具体说，括在双引号中的三种特殊字符不被忽略：<code>$</code>、<code>\</code>、<code>`</code>。即双引号会解释字符串的特别意思，而单引号直接使用字符串。如果使用双引号将字符串赋给变量并反馈它，实际上与直接反馈变量并无差别。如果要查询包含空格的字符串，经常会用到双引号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> x=*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$x</span></span></span><br><span class="line">hello.sh menus.sh misc.sh phonebook tshift.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'$x'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">x</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$x</span>"</span></span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<p>这个例子可以看出无引号，单引号和双引号之间的区别。在最后一种情况中，双引号告诉 <code>shell</code> 在引号内照样进行变量名替换，所以 <code>shell</code> 把 <code>$x</code> 替换为 <code>＊</code>，因为双引号中不做文件名替换，所以就把 <code>＊</code> 作为要显示的值传递给 <code>echo</code>。</p>
<p>对于第一种情况需要进一步说明，<code>shell</code> 在给变量赋值时不进行文件名替换（这从第三种情况中也能看出来），各步骤发生的精确次序如下： <code>shell</code> 扫描命令行，把 <code>x</code> 的值设为星号 <code>＊</code>；<br><code>shell</code> 再次扫描命令行，碰到星号 <code>＊</code>，把它替换成当前目录下的文件清单；<code>shell</code> 启动执行 <code>echo</code> 命令，把文件清单作为参数传递给 <code>echo</code>。</p>
<p>这个赋值的先后次序非常重要：<code>shell</code> 先作变量替换，然后作文件名替换，最后把这行处理为参数。</p>
<h1 id="3-反引号"><a href="#3-反引号" class="headerlink" title="3. 反引号(`)"></a>3. 反引号(<code>`</code>)</h1><p>命令替换是指 <code>shell</code> 能够将一个命令的标准输出插在一个命令行中任何位置。<code>shell</code> 中有两种方法作命令替换：把 <code>shell</code> 命令用反引号或者 <code>$(...)</code> 结构括起来，其中 <code>$(...)</code> 格式受到 <code>POSIX</code> 标准支持，也利于嵌套。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> The date and time is `date`</span></span><br><span class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> The date and time is $(date)</span></span><br><span class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Your current working directory is $(<span class="built_in">pwd</span>)</span></span><br><span class="line">Your current working directory is /home/howard/script</span><br></pre></td></tr></table></figure>

<h1 id="4-反斜杠-backslash-escaped"><a href="#4-反斜杠-backslash-escaped" class="headerlink" title="4. 反斜杠 backslash-escaped( \ )"></a>4. 反斜杠 backslash-escaped( <code>\</code> )</h1><p>反斜杠一般用作转义字符，或称逃脱字符。<code>Linux</code> 如果 <code>echo</code> 要让转义字符发生作用，就要使用 <code>-e</code> 选项，且转义字符要使用双引号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "\n"</span><br></pre></td></tr></table></figure>

<p>反斜杠的另一种作用，就是当反斜杠用于一行的最后一个字符时，<strong><code>shell</code> 把行尾的反斜杠作为续行</strong>，这种结构在分几行输入长命令时经常使用。</p>
<hr>
<p><a href="http://www.jb51.net/article/33495.htm" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]将 Centos 的 yum 源更改为国内的阿里云源</title>
    <url>/2016/07/30/%E8%BD%AC-%E5%B0%86-Centos-%E7%9A%84-yum-%E6%BA%90%E6%9B%B4%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E7%9A%84%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90/</url>
    <content><![CDATA[<p>阿里云Linux安装镜像源地址：<a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></p>
<p>CentOS系统更换软件安装源</p>
<h3 id="一、备份你的原镜像文件，以免出错后可以恢复。"><a href="#一、备份你的原镜像文件，以免出错后可以恢复。" class="headerlink" title="一、备份你的原镜像文件，以免出错后可以恢复。"></a>一、备份你的原镜像文件，以免出错后可以恢复。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="二、下载新的-CentOS-Base-repo-到-etc-yum-repos-d"><a href="#二、下载新的-CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="二、下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/"></a>二、下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h3><h4 id="2-1-CentOS-5"><a href="#2-1-CentOS-5" class="headerlink" title="2.1 CentOS 5"></a>2.1 CentOS 5</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br></pre></td></tr></table></figure>

<h4 id="2-2-CentOS-6"><a href="#2-2-CentOS-6" class="headerlink" title="2.2 CentOS 6"></a>2.2 CentOS 6</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>

<h4 id="2-3-CentOS-7"><a href="#2-3-CentOS-7" class="headerlink" title="2.3 CentOS 7"></a>2.3 CentOS 7</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<h3 id="三、运行-yum-makecache-生成缓存"><a href="#三、运行-yum-makecache-生成缓存" class="headerlink" title="三、运行 yum makecache 生成缓存"></a>三、运行 yum makecache 生成缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]用 Markdown 写印象笔记（Evernote）</title>
    <url>/2016/10/19/%E8%BD%AC-%E7%94%A8-Markdown-%E5%86%99%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88Evernote%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>使用印象笔记很久了，什么都觉得很好，就是不支持 Markdown 书写语法，实在是太遗憾了。今天发现网上有人介绍了一款 Sublime 的一个插件 <a href="https://packagecontrol.io/packages/Evernote" target="_blank" rel="noopener">Evernote</a>，尝试了一下觉得还是一个不错的方案，正好我也很喜欢使用 Sublime 编辑器，如此甚好，哈哈…</p>
</blockquote>
<!-- ![][2] -->
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/2016101901.png" class="" width="400">

<a id="more"></a>

<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-1-用-Sublime-的-PackageControl-安装-Evernote-插件"><a href="#1-1-用-Sublime-的-PackageControl-安装-Evernote-插件" class="headerlink" title="1.1 用 Sublime 的 PackageControl 安装 Evernote 插件"></a>1.1 用 Sublime 的 PackageControl 安装 <a href="https://packagecontrol.io/packages/Evernote" target="_blank" rel="noopener">Evernote</a> 插件</h2><h2 id="1-2-设置-Sublime-与印象笔记做关联"><a href="#1-2-设置-Sublime-与印象笔记做关联" class="headerlink" title="1.2 设置 Sublime 与印象笔记做关联"></a>1.2 设置 Sublime 与印象笔记做关联</h2><p>国内印象笔记用户打开链接：<a href="https://app.yinxiang.com/api/DeveloperToken.action" target="_blank" rel="noopener">https://app.yinxiang.com/api/DeveloperToken.action</a>，国际 Evernote 用户打开链接：<a href="https://www.evernote.com/api/DeveloperToken.action" target="_blank" rel="noopener">https://www.evernote.com/api/DeveloperToken.action</a>。然后点击页面按钮 <code>Create a developer token</code> 生成开发者秘钥。</p>
<p>打开 Sublime <code>Preferences -&gt; Package Settings -&gt; Evernote -&gt; Settings - User</code> 在文件中贴入如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"noteStoreUrl"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="attr">"token"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>noteStoreUrl</code> 和 <code>token</code> 值为之前打开的页面的上的值，然后保存。</p>
<p>测试是否成功：通过快捷键 <code>ctrl+shift+p</code> 打开 Sublime 命令窗口，输入 <code>evernote</code>，就会看见 Evernote 的许多命令，点击 <code>evernote:list recent notes</code>，如果看到罗列出最新的笔记，则说明授权成功。</p>
<h1 id="二、快捷键设置"><a href="#二、快捷键设置" class="headerlink" title="二、快捷键设置"></a>二、快捷键设置</h1><p>插件默认没有添加快捷键，但可以自己配置。通过快捷键 <code>ctrl+shift+p</code> 打开 Sublime 命令窗口，输入 <code>key binding</code>，选择 <code>User</code> 那，写入你的内容。</p>
<p>下面是我的设置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"Ctrl+e"</span>, <span class="string">"Ctrl+o"</span>], <span class="attr">"command"</span>: <span class="string">"open_evernote_note"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"Ctrl+s"</span>], <span class="attr">"command"</span>: <span class="string">"save_evernote_note"</span>, <span class="attr">"context"</span>: [&#123;<span class="attr">"key"</span>: <span class="string">"evernote_note"</span>&#125;, &#123;<span class="attr">"key"</span>: <span class="string">"evernote_has_guid"</span>&#125;] &#125;,</span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"Ctrl+s"</span>], <span class="attr">"command"</span>: <span class="string">"send_to_evernote"</span>, <span class="attr">"context"</span>: [&#123;<span class="attr">"key"</span>: <span class="string">"evernote_note"</span>&#125;, &#123;<span class="attr">"key"</span>: <span class="string">"evernote_has_guid"</span>, <span class="attr">"operator"</span>: <span class="string">"equal"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span>&#125;] &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong>意思是，按 <code>ctrl+e, o</code> 后，会打开印象笔记，按 <code>ctrl+s</code> 会将笔记保存并且同步到印象笔记。</p>
<h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><p>通过快捷键 <code>ctrl+shift+p</code>，打开 Sublime 命令窗口就可以使用一些常用命令了。</p>
<ul>
<li><code>Evernote: New empty note</code>：创建笔记</li>
<li><code>Evernote: Open Evernote Note</code>：打开印象笔记</li>
<li><code>Evernote: List recent notes</code>：打开最近笔记</li>
<li><code>Evernote: Search note</code>：搜索笔记</li>
</ul>
<h1 id="四、个人配置"><a href="#四、个人配置" class="headerlink" title="四、个人配置"></a>四、个人配置</h1><p>主要更改了代码的字体和颜色，需要注意的是替换掉 <code>noteStoreUrl</code> 和 <code>token</code> 值为步骤 2 中获取内容。点击 Sublime Text 的 <code>Preferences -&gt; Package Settings -&gt; Evernote -&gt; Settings - User</code> 粘贴以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"noteStoreUrl"</span>: <span class="string">"更换为步骤 2 中获取的 noteStoreUrl"</span>,</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"更换为步骤 2 中获取的 token"</span>,</span><br><span class="line">    <span class="attr">"inline_css"</span>: &#123;</span><br><span class="line">        <span class="attr">"body"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"pre"</span>: <span class="string">"color: #000000; font-family: Consolas,monospace; font-size: 0.9em; white-space: pre-wrap; word-wrap: break-word; border: 1px solid #cccccc; border-radius: 3px; overflow: auto; padding: 6px 10px; margin-bottom: 10px;"</span>,</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"color: black; font-family: Consolas,monospace; font-size: 1.1em;"</span>,</span><br><span class="line">        <span class="attr">"inline-code"</span>: <span class="string">"color: #c7254e; font-family: Consolas,monospace; padding: 0.1em 0.2em; margin: 0.1em; font-size: 85%; background-color: #f9f2f4; border-radius: 3px; border: 1px solid #d6d6d6;"</span>,</span><br><span class="line">        <span class="attr">"h1"</span>: <span class="string">"margin-bottom: 1em; margin-top: 1.2em;"</span>,</span><br><span class="line">        <span class="attr">"footnotes"</span>: <span class="string">"border-top: 1px solid #9AB39B; font-size: 80%;"</span>,</span><br><span class="line">        <span class="attr">"hr"</span>: <span class="string">"color:#9AB39B;background-color:#9AB39B;height:1px;border:none;"</span>,</span><br><span class="line">        <span class="attr">"sup"</span>: <span class="string">"color:#6D6D6D;font-size:1ex"</span>,</span><br><span class="line">        <span class="attr">"blockquote"</span>: <span class="string">"border-left: .5ex solid #BFBFBF; margin-left: 0px; padding-left: 1em; margin-top: 1.4285em; margin-bottom: 1.4285em;"</span>,</span><br><span class="line">        <span class="attr">"table"</span>: <span class="string">"border-collapse: collapse; border-spacing: 0; margin: 1em;"</span>,</span><br><span class="line">        <span class="attr">"td"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px;"</span>,</span><br><span class="line">        <span class="attr">"th"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px;"</span>,</span><br><span class="line">        <span class="attr">"tr:odd"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px;"</span>,</span><br><span class="line">        <span class="attr">"tr:even"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px; background-color: #F8F8F8;"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"code_highlighting_style"</span>: <span class="string">"github"</span>,</span><br><span class="line">    <span class="attr">"code_friendly"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"gfm_tables"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"wiki_tables"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"emphasis_mark"</span>: <span class="string">"_"</span>,</span><br><span class="line">    <span class="attr">"strong_mark"</span>: <span class="string">"**"</span>,</span><br><span class="line">    <span class="attr">"item_mark"</span>: <span class="string">"*"</span>,</span><br><span class="line">    <span class="attr">"notes_order"</span>: <span class="string">"updated"</span>,</span><br><span class="line">    <span class="attr">"max_notes"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"update_on_save"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"evernote_autocomplete"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"sort_notebooks"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"show_stacks"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"open_single_result"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"tab_prefix"</span>: <span class="string">"Evernote: "</span>,</span><br><span class="line">    <span class="attr">"warn_on_close"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="http://www.jianshu.com/p/0add426fdd26" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Evernote</tag>
      </tags>
  </entry>
  <entry>
    <title>闲言碎语，不知所云...</title>
    <url>/2016/09/28/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD%EF%BC%8C%E4%B8%8D%E7%9F%A5%E6%89%80%E4%BA%91/</url>
    <content><![CDATA[<blockquote>
<p>闲言碎语，不知所云，乱七八糟，聊以自慰…</p>
</blockquote>
<p>搭建博客有一段时间了，记录总结的基本都是技术相关的，对于一个有强迫症加语文学的不好的人来说，总结技术文章太痛苦了，总结一篇文章得纠结好久，总觉得组织的语言不够恰当准确，每次都是改了又改，反复琢磨，怎奈肚子里的墨水实在是少的可怜，真是羡慕那些可以把自己心里所想的东西用文字能够表达很清楚的人。</p>
<p>说到底还是看的东西少，缺少写东西的锻炼，青春迷茫的时候有大把机会可以利用，可惜都不知道把时间用在了哪儿，等慢慢想要沉淀的时候才发现工作和生活中琐碎已经占据了所有的时间。但不管怎样，从此刻启程，做一些自己想要做的事儿，我想应该不会太晚吧！</p>
<a id="more"></a>

<p>搭建 Hexo 博客的初衷之一是觉得对于身为码农的我来说，Hexo 好玩，有新鲜感，对于非码农来说有一定的门槛（显的逼格高）。之二就是书写简单，不必局限于单一的编辑工具，少了刻意去追求排版样式烦恼。之三是觉得安全可靠，文章资源一切都可以掌控与自己，不必担心丢失，之前也买过 VPS 摆弄过 WordPress ，最后 VPS 租期到了，那段时间忙于找工作，博客的内容也没有及时保存下来，虽说博客没多少东西，但始终觉得有些遗憾…</p>
<p>夜深人不静，半夜公司楼下打车真是不好打。这几天每天到家都凌晨以后了，身体真是大不如前了…</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height=86 src="//music.163.com/outchain/player?type=2&id=126946&auto=1&height=66"></iframe>

<hr>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习笔记</title>
    <url>/2016/11/03/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161103001.png" alt="Docker"></p>
<h1 id="一、CentOS-系统安装"><a href="#一、CentOS-系统安装" class="headerlink" title="一、CentOS 系统安装"></a>一、CentOS 系统安装</h1><p>参考《Docker — 从入门到实践》 之 <a href="https://github.com/yeasy/docker_practice/blob/master/install/centos.md" target="_blank" rel="noopener">“CentOS 操作系统安装 Docker”</a></p>
<h2 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h2><p>Docker 最低支持 CentOS 7。</p>
<p>Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p>
<p>参考升级<a href="http://ehlxr.me/2017/01/10/%E8%BD%AC-CentOS-%E5%8D%87%E7%BA%A7-kernel/">CentOS 升级 kernel</a></p>
<h2 id="1-2-使用脚本自动安装"><a href="#1-2-使用脚本自动安装" class="headerlink" title="1.2 使用脚本自动安装"></a>1.2 使用脚本自动安装</h2><p>Docker 官方为了简化安装流程，提供了一套安装脚本，CentOS 系统上可以使用这套脚本安装：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 安装在系统中。</p>
<p>不过，由于伟大的墙的原因，在国内使用这个脚本可能会出现某些下载出现错误的情况。国内的一些云服务商提供了这个脚本的修改版本，使其使用国内的 Docker 软件源镜像安装，这样就避免了墙的干扰。</p>
<h3 id="1-2-1-阿里云的安装脚本"><a href="#1-2-1-阿里云的安装脚本" class="headerlink" title="1.2.1 阿里云的安装脚本"></a>1.2.1 阿里云的安装脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-DaoCloud-的安装脚本"><a href="#1-2-2-DaoCloud-的安装脚本" class="headerlink" title="1.2.2 DaoCloud 的安装脚本"></a>1.2.2 DaoCloud 的安装脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>

<h2 id="1-3-手动安装"><a href="#1-3-手动安装" class="headerlink" title="1.3 手动安装"></a>1.3 手动安装</h2><h3 id="1-3-1-添加内核参数"><a href="#1-3-1-添加内核参数" class="headerlink" title="1.3.1 添加内核参数"></a>1.3.1 添加内核参数</h3><p>默认配置下，在 CentOS 使用 Docker 可能会碰到下面的这些警告信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></table></figure>

<p>添加内核配置参数以启用这些功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo tee -a /etc/sysctl.conf &lt;&lt;-EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>然后重新加载 <code>sysctl.conf</code> 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-添加-yum-源"><a href="#1-3-2-添加-yum-源" class="headerlink" title="1.3.2 添加 yum 源"></a>1.3.2 添加 yum 源</h3><p>虽然 CentOS 软件源 <code>Extras</code> 中有 Docker，名为 <code>docker</code>，但是不建议使用系统源中的这个版本，它的版本相对比较陈旧，而且并非 Docker 官方维护的版本。因此，我们需要使用 Docker 官方提供的 CentOS 软件源。</p>
<p>执行下面的命令添加 <code>yum</code> 软件源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-安装-Docker"><a href="#1-3-3-安装-Docker" class="headerlink" title="1.3.3 安装 Docker"></a>1.3.3 安装 Docker</h3><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-engine</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum update</span><br><span class="line">$ sudo yum install docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-启动-Docker-引擎"><a href="#1-3-4-启动-Docker-引擎" class="headerlink" title="1.3.4 启动 Docker 引擎"></a>1.3.4 启动 Docker 引擎</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="1-3-5-建立-docker-用户组"><a href="#1-3-5-建立-docker-用户组" class="headerlink" title="1.3.5 建立 docker 用户组"></a>1.3.5 建立 docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="noopener">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p>
<p>建立 <code>docker</code> 组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure>

<p>将当前用户加入 <code>docker</code> 组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-参考文档"><a href="#1-4-参考文档" class="headerlink" title="1.4 参考文档"></a>1.4 参考文档</h2><p>参见 <a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="noopener">Docker 官方 CentOS 安装文档</a>。</p>
<h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><h2 id="2-1-Docker-images"><a href="#2-1-Docker-images" class="headerlink" title="2.1 Docker images"></a>2.1 Docker images</h2><p>Docker image 是一个只读类型的模板。比如一个镜像可以是一个包含 apache 和你的 web 应用的 ubuntu 操作系统。我们经常使用镜像来创建容器。Docker 提供了一种快捷的方式来构建新镜像或者更新镜像，同时你也可以下载其他人已经创建好的镜像。Docker image 是 Docker 结构中的构建组件。</p>
<h2 id="2-2-Docker-Registries"><a href="#2-2-Docker-Registries" class="headerlink" title="2.2 Docker Registries"></a>2.2 Docker Registries</h2><p>Docker registries 用来保存镜像。它分为公开仓库和私有仓库，你可以从仓库中上传或者下载镜像。公开的 Docker 仓库称之为 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>。它提供了你可以使用的非常多的镜像。你可以自由的创建镜像或者使用这里面其他人已经创建好的镜像。Docker registries 属于 Docker 中的分发组件。</p>
<h2 id="2-3-Docker-containers"><a href="#2-3-Docker-containers" class="headerlink" title="2.3 Docker containers"></a>2.3 Docker containers</h2><p>Docker containers 同目录有几分相似。Docker containers 保存了执行应用所需的所有资源。每一个 Docker containers 都是由 image 创建的。Docker containers 可以 run, start, stop, restart, rm。需要注意的是，Docker containers 之间是隔离的。Docker containers 属于 Docker 中的执行组件。</p>
<h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><h2 id="3-1-镜像操作"><a href="#3-1-镜像操作" class="headerlink" title="3.1 镜像操作"></a>3.1 镜像操作</h2><ul>
<li>拉取镜像：<code>docker pull nginx:latest</code></li>
<li>查看镜像列表：<code>docker images</code></li>
<li>删除镜像：<code>docker rmi &lt;image id&gt;</code></li>
<li>想要删除 untagged images（也就是那些 id 为 None 的镜像）：<code>docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &#39;{print $3}&#39;)</code></li>
<li>删除全部镜像：<code>docker rmi $(docker images -q)</code></li>
</ul>
<h2 id="3-2-创建容器"><a href="#3-2-创建容器" class="headerlink" title="3.2 创建容器"></a>3.2 创建容器</h2><p>创建一个容器并运行，例如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker run --name blog --privileged=true -v /home/Hexo/public:/usr/share/nginx/<span class="selector-tag">html</span>:ro -d -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">80</span> docker.io/nginx</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--name</code>：容器名称</li>
<li><code>--privileged=true</code>：设置权限</li>
<li><code>-v</code>：挂载本地磁盘目录，格式为本地磁盘绝对路径:容器路径<blockquote>
<p>保证删除容器后，数据不被删除</p>
</blockquote>
</li>
<li><code>:ro</code>：只读</li>
<li><code>-d</code>：后台模式</li>
<li><code>i</code>：交互式操作</li>
<li><code>t</code>：终端</li>
<li><code>-p</code>：设置宿主计算机和容器端口映射</li>
</ul>
<blockquote>
<p>在Dockerfile 中有一条指令是 EXPOSE 22，如果使用 <code>-P</code>，宿主机会随机选择一个 <code>没有被使用的端口</code> 和 docker <code>容器的 22 端口</code> 做 <code>端口映射</code>，如果 docker 主机或者容器重启后，宿主机又会随机选择一个没有被使用的端口和 docker 容器的 22 端口做端口映射，这样端口会发生 <code>变化</code></p>
</blockquote>
<blockquote>
<p>如果使用 <code>-p</code>，比如 <code>2222:22</code>，这样不管是 docker 主机或者容器重启后，2222:22 端口都是这样来映射，<code>不会发生改变</code></p>
</blockquote>
<h2 id="3-3-容器操作"><a href="#3-3-容器操作" class="headerlink" title="3.3 容器操作"></a>3.3 容器操作</h2><ul>
<li>启动：<code>docker start blog</code></li>
<li>停止：<code>docker stop blog</code>；停止所有容器：<code>docker stop $(docker ps -a -q)</code></li>
<li>删除：<code>docker rm blog</code>；删除所有容器：<code>docker rm $(docker ps -a -q)</code></li>
<li>查看：<code>docker ps -a</code>（查看所有容器，包括已启动的和未启动的）</li>
</ul>
<h2 id="3-3-进入容器"><a href="#3-3-进入容器" class="headerlink" title="3.3 进入容器"></a>3.3 进入容器</h2><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="keyword">exec</span> -it blog /bin/bash</span><br></pre></td></tr></table></figure>

<h1 id="四、Docker-私有仓库"><a href="#四、Docker-私有仓库" class="headerlink" title="四、Docker 私有仓库"></a>四、Docker 私有仓库</h1><p>Docker 提供了一个中央仓库，同时也允许我们使用 registry 搭建本地私有仓库。</p>
<h2 id="4-1-搭建-Docker-私有仓库"><a href="#4-1-搭建-Docker-私有仓库" class="headerlink" title="4.1 搭建 Docker 私有仓库"></a>4.1 搭建 Docker 私有仓库</h2><p>首先拉取 registry 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>

<p>创建 register 容器并运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name registry -d -p 5000:5000 --privileged=<span class="literal">true</span> -v /opt/registry:/var/lib/registry/ registry</span><br></pre></td></tr></table></figure>

<p>挂载容器中存放镜像的目录到本地 <code>/opt/registry</code>，需要注意的一点是，容器中存放镜像的目录 registry 官方镜像示例中使用的是 <code>/tmp/registry-dev</code> ，但实验证明在版本 <code>2.5.0</code> 中，目录是 <code>/var/lib/registry/</code>。</p>
<p>CentOS 系统挂载目录需要加上 <code>--privileged=true</code> 解决挂载的目录没有权限的问题。</p>
<p>打开浏览器输入 register 容器宿主计算机地址加端口（如：<a href="http://192.168.237.128:5000/v2/" target="_blank" rel="noopener">http://192.168.237.128:5000/v2/</a> ），如果出现 <code>{}</code>，即表明 register 容器运行成功。</p>
<h2 id="4-2-测试使用私有仓库"><a href="#4-2-测试使用私有仓库" class="headerlink" title="4.2 测试使用私有仓库"></a>4.2 测试使用私有仓库</h2><p>首先给需要 push 到仓库的 images 打 TAG，前面需要带上私有仓库的地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag docker.io/registry:latest 192.168.237.128:5000/registry:2.5.0</span><br></pre></td></tr></table></figure>

<p>push 到私有仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker push 192.168.237.128:5000/registry:2.5.0</span><br></pre></td></tr></table></figure>

<p>通过以下命令删除镜像 <code>192.168.237.128:5000/registry:2.5.0</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rmi 192.168.237.128:5000/registry:2.5.0</span><br></pre></td></tr></table></figure>

<p>然后通过以下命令即可拉取私有仓库的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull 192.168.237.128:5000/hexo:latest</span><br></pre></td></tr></table></figure>

<p>如果 docker push 的时候出现以下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker push 192.168.237.128:5000/registry:2.5.0</span><br><span class="line">The push refers to a repository [192.168.237.128:5000/registry]</span><br><span class="line">unable to ping registry endpoint https://192.168.237.128:5000/v0/</span><br><span class="line">v2 ping attempt failed with error: Get https://192.168.237.128:5000/v2/: http: server gave HTTP response to HTTPS client</span><br><span class="line"> v1 ping attempt failed with error: Get https://192.168.237.128:5000/v1/_ping: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure>

<p>修改文件 <code>/etc/sysconfig/docker</code> 添加以下代码，然后重启 docker 服务即可重新 push。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ADD_REGISTRY=<span class="string">'--add-registry 192.168.237.128:5000'</span></span><br><span class="line"></span><br><span class="line">INSECURE_REGISTRY=<span class="string">'--insecure-registry 192.168.237.128:5000'</span></span><br></pre></td></tr></table></figure>

<h1 id="五、Dockerfile"><a href="#五、Dockerfile" class="headerlink" title="五、Dockerfile"></a>五、Dockerfile</h1><h2 id="5-1-什么是Dockerfile？"><a href="#5-1-什么是Dockerfile？" class="headerlink" title="5.1 什么是Dockerfile？"></a>5.1 什么是Dockerfile？</h2><blockquote>
<p>Dockerfile 是自动构建 docker 镜像的配置文件，Dockerfile 中的命令非常类似 linux shell 下的命令<br>Dockerfile，可以让用户自定义构建 docker 镜像，支持以 # 开头的注释行</p>
</blockquote>
<p>一般，Dockerfile分为4部分</p>
<ul>
<li>基础镜像（父镜像）信息</li>
<li>维护者信息</li>
<li>镜像操作命令</li>
<li>容器启动命令</li>
</ul>
<h2 id="5-2-Dockerfile-介绍"><a href="#5-2-Dockerfile-介绍" class="headerlink" title="5.2 Dockerfile 介绍"></a>5.2 Dockerfile 介绍</h2><p><code>FROM       centos:centos7.1.1503</code></p>
<blockquote>
<p>基于 <strong>父镜像</strong> 构建其他 docker 镜像，_父镜像_：可以通过 docker pull 命令获得，也可以自己制作</p>
</blockquote>
<p><code>MAINTAINER Carson,C.J.Zeong &lt;zcy@nicescale.com&gt;</code></p>
<blockquote>
<p>Dockerfile 维护者</p>
</blockquote>
<p><code>ENV TZ &quot;Asia/Shanghai&quot;</code></p>
<blockquote>
<p>ENV（environment）设置环境变量，一个 Dockerfile 中可以写多个。以上例子是：设置 docker 容器的时区为 Shanghai</p>
</blockquote>
<p><strong>Dockerfile 中有 2 条指令可以拷贝文件</strong></p>
<p><code>ADD aliyun-mirror.repo /etc/yum.repos.d/CentOS-Base.repo</code></p>
<blockquote>
<p>拷贝本地文件到 docker 容器里，还可以拷贝 URL 链接地址下的文件，ADD 还具有解压软件包的功能（支持 gzip, bzip2 or xz）</p>
</blockquote>
<p><code>COPY test /mydir</code></p>
<blockquote>
<p>拷贝本地文件到 docker 容器</p>
</blockquote>
<p><code>RUN yum install -y curl wget....</code></p>
<blockquote>
<p>RUN 命令，非常类似 Linux 下的 shell 命令 <code>(the command is run in a shell - /bin/sh -c - shell form)</code><br>在 Dockerfile 中每执行一条指令（ENV、ADD、RUN等命令），都会生成一个 docker image layer</p>
</blockquote>
<p><code>ADD supervisord.conf /etc/supervisord.conf</code></p>
<blockquote>
<p>添加 supervisor 的主配置文件，到 docker 容器里</p>
</blockquote>
<p><code>EXPOSE 22</code></p>
<blockquote>
<p>端口映射 <code>EXPOSE &lt;host_port&gt;:&lt;container_port&gt;</code><br>推荐使用 <code>docker run -p &lt;host_port&gt;:&lt;container_port&gt;</code> 来固化端口</p>
</blockquote>
<p><code>ENTRYPOINT [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisord.conf&quot;]</code></p>
<blockquote>
<p>一个 Dockerfile 中只有最后一条 <code>ENTRYPOINT</code> 生效，并且每次启动 docker 容器，都会执行 <code>ENTRYPOINT</code></p>
</blockquote>
<p><code>ONBUILD ADD . /app</code></p>
<blockquote>
<p><code>ONBUILD</code> 在生成当前docker镜像的时候不生效，在子镜像生效；<code>ONBUILD</code>在产品发布时起着非常重要的作用！举例<br>A镜像中有<code>ONBUILD</code>指令，在构建A镜像时<code>ONBUILD</code>指令不执行；B镜像<code>FROM A</code>,在构建B镜像时<code>ONBUILD</code>指令开始执行；</p>
</blockquote>
<p><code>VOLUME [&quot;/var/lib/mysql&quot;]</code></p>
<blockquote>
<p>指定 docker 容器和宿主机做映射的文件目录</p>
</blockquote>
<h2 id="5-3-生成-docker-镜像"><a href="#5-3-生成-docker-镜像" class="headerlink" title="5.3 生成 docker 镜像"></a>5.3 生成 docker 镜像</h2><p>以上文件就是用来生成第一个 docker 镜像的 Dockerfile，通过 <code>docker build</code> 指令来生成 docker 镜像</p>
<p><code>docker build -t csphere/centos:7.1 .</code></p>
<blockquote>
<p>如果 Dockerfile 在当前目录下，输入点 <code>.</code> 就可以进行加载当前目录下的 <code>Dockerfile</code><br>如果不在当前目录下需要运行 <code>docker build -t csphere/centos:7.1 &lt;Dockerfile_dir&gt;</code> 加载相对路径下的 <code>Dockerfile</code></p>
</blockquote>
<p>docker 镜像的命名规则 <code>registry_url/namespace/image_name:tag</code> 默认 <code>tag</code> 是 <code>latest</code></p>
<blockquote>
<p>在构建 Docker 镜像时，如果有自己内部的 yum 源，替换成自己内部的 yum 地址，可以加快构建速度。<br>如果第一次构建失败，会有部分镜像 layer 生成，第二次构建会基于第一次构建所生成的 layer（use cache），继续构建</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Step 10 : EXPOSE 22</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 0ed1c5479ebc</span><br><span class="line"> ---&gt; c57a5bac41c8</span><br><span class="line">Removing intermediate container 0ed1c5479ebc</span><br><span class="line">Step 11 : ENTRYPOINT /usr/bin/supervisord -n -c /etc/supervisord.conf</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> e16c7ac2fd45</span><br><span class="line"> ---&gt; 185ef7b101a8</span><br><span class="line">Removing intermediate container e16c7ac2fd45</span><br><span class="line">Successfully built 185ef7b101a8</span><br></pre></td></tr></table></figure>

<p>可以看到每执行一条 <code>Dockerfile</code> 的指令都会生成一个镜像的 layer <code>c57a5bac41c8</code> <code>185ef7b101a8</code> 最后 <code>185ef7b101a8</code> 这个是 docker 镜像的ID，<code>185ef7b101a8</code> 是由 <code>c57a5bac41c8</code> <code>185ef7b101a8</code>…layers 叠加而成，体现了 docker 镜像是分层的</p>
<hr>
<div style="color: #f00;">未完待续...</div>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-垃圾回收（一）</title>
    <url>/2018/08/23/jvm-gc1/</url>
    <content><![CDATA[<p>在 JVM 运行时数据区域中，程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。垃圾回收主要是针对 Java 堆和方法区进行。</p>
<h2 id="一、判断对象状态"><a href="#一、判断对象状态" class="headerlink" title="一、判断对象状态"></a>一、判断对象状态</h2><p>JVM 在回收一个对象时，首先要判断这个对象的状态，如果判断对象为无效的（没有被任何对象或变量引用），则需要被 JVM 垃圾回收器回收。</p>
<h3 id="1-1-引用计数算法"><a href="#1-1-引用计数算法" class="headerlink" title="1.1 引用计数算法"></a>1.1 引用计数算法</h3><p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数不为 0 的对象仍然存活。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReferenceCountingGC objA = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        ReferenceCountingGC objB = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        objA.instance = objB;</span><br><span class="line">        objB.instance = objA;</span><br><span class="line"></span><br><span class="line">        objA = <span class="keyword">null</span>;</span><br><span class="line">        objB = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设在这行发生 GC，objA 和 objB 是否能被回收？</span></span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>testGC()</code> 方法执行后，<code>objA</code> 和 <code>objB</code> 不会被垃圾回收器回收，因为<strong>两个对象出现了循环引用，引用计数器永远不为 0，导致无法对它们进行回收</strong>。</p>
<p>虽然引用计数算法简单、高效，但是因为存在循环引用的问题，所以 JVM 并没有使用引用计数算法标记对象状态。</p>
<h3 id="1-2-可达性分析算法"><a href="#1-2-可达性分析算法" class="headerlink" title="1.2 可达性分析算法"></a>1.2 可达性分析算法</h3><p><strong>可达性分析（Tracing GC）</strong>通过 <strong>GC Roots</strong> 作为起始节点向下进行搜索，GC Roots 搜索的经过的路径称为<strong>引用链（Reference Chain）</strong>，能够到达到的对象都是存活的（也就是引用链上的对象），不可达的对象被标记为无效的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1ftcw0cnpk7j20ez08d0sz.jpg" alt=""></p>
<p>如图 Object5、Object6 和 Object7 虽然相互存在引用关系，但是 GC Roots 不可达，形成不了引用链，所以会被标记为无效的对象。</p>
<p>JVM 使用该算法来判断对象是否可被回收，在 Java 中 GC Roots 一般包含以下内容：</p>
<ul>
<li>虚拟机栈中引用的对象</li>
<li>本地方法栈中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
</ul>
<p>只有引用类型的变量才有可能被认为是 GC Roots，值类型的变量永远不被认为是 GC Roots。而且 GC Roots 并不包括堆中对象所引用的对象，这样就不会出现循环引用。</p>
<p>可作为 GC Roots 的节点主要在全局性的引用与执行上下文中，GC Roots 必须是当前存活的引用类型对象。GC 管理的区域是 Java 堆，而虚拟机栈、方法区和本地方法栈不被 GC 所管理，因此选用这些区域内引用的对象作为 GC Roots，是不会被 GC 所回收的。其中虚拟机栈和本地方法栈都是线程私有的内存区域，只要线程没有终止，就能确保它们中引用的对象的存活。而方法区中类静态属性引用的对象是显然存活的。常量引用的对象在当前可能存活，因此，也可能是 GC Roots 的一部分。</p>
<h2 id="二、垃圾回收过程"><a href="#二、垃圾回收过程" class="headerlink" title="二、垃圾回收过程"></a>二、垃圾回收过程</h2><p>即使在可达性分析算法中不可达的对象，也不是一定会死亡的，它们暂时都处于 “缓刑” 阶段，要真正宣告一个对象 “死亡”，至少要经历两次标记过程。</p>
<h3 id="2-1-第一次标记"><a href="#2-1-第一次标记" class="headerlink" title="2.1 第一次标记"></a>2.1 第一次标记</h3><p>如果对象在进行可达性分析后发现没有与 GC Roots 相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是该对象是否覆盖了 <code>finalize()</code> 方法：</p>
<ul>
<li>若已覆盖该方法，并该对象的 <code>finalize()</code> 方法还没有被执行过，那么就会将 <code>finalize()</code> 扔到 F-Queue 队列中。</li>
<li>若未覆盖该方法，或者该对象的 <code>finalize()</code> 方法已经被执行过，则直接回收释放对象内存。</li>
</ul>
<h3 id="2-2-第二次标记"><a href="#2-2-第二次标记" class="headerlink" title="2.2 第二次标记"></a>2.2 第二次标记</h3><p>JVM 会自动建立一个低优先级的 Finalizer 线程去执行执行 F-Queue 队列中的 <code>finalize()</code> 方法。为了防止 F-Queue 队列中的其它对象长时间处于等待状态，而导致整个内存回收系统崩溃，一个对象在 <code>finalize()</code> 方法中执行缓慢，或者发生了死循环（更极端的情况），JVM 就直接停止其执行，将该对象清除回收。所以 JVM 不会让 F-Queue 队列等待所有的 <code>finalize()</code> 方法都执行结束。</p>
<h3 id="2-3-对象重生或死亡"><a href="#2-3-对象重生或死亡" class="headerlink" title="2.3 对象重生或死亡"></a>2.3 对象重生或死亡</h3><p>如果某个对象的 <code>finalize()</code> 方法时被执行时，与引用链上的任何一个对象建立了关联（例如：把自己（this 关键字）赋值给某个类变量或者对象的成员变量），那么该对象就在第二次标记时被移出 “即将回收” 的集合；如果没有，那么就会被垃圾收集器清除回收。</p>
<p>任何一个对象的 <code>finalize()</code> 方法都只会被 JVM 调用一次，所以自救也只能进行一次，如果回收的对象之前调用了 <code>finalize()</code> 方法，后面回收时就不会调用 <code>finalize()</code> 方法了。</p>
<p>使用 <code>finalize()</code> 方法来 “拯救” 对象是不值得提倡的，因为它不是 C/C++ 中的析构函数，而是 Java 刚诞生时为了使 C/C++ 程序员更容易接受它所做的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。<code>finalize()</code> 能做的工作，使用 <code>try-finally</code> 或者其它方法都更适合、及时。</p>
<h2 id="三、方法区的回收"><a href="#三、方法区的回收" class="headerlink" title="三、方法区的回收"></a>三、方法区的回收</h2><p>因为在 JDK 8 之前方法区主要存放永久代对象，而永久代对象的回收率比新生代差很多，因此在方法区上进行回收性价比不高。</p>
<p>主要是对常量池的回收和对类的卸载。</p>
<p>类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li>
<li>加载该类的 ClassLoader 已经被回收。</li>
<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li>
</ul>
<p>可以通过 -Xnoclassgc 参数来控制是否对类进行卸载。</p>
<p>在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGi 这类频繁自定义 ClassLoader 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。</p>
<h2 id="四、引用类型"><a href="#四、引用类型" class="headerlink" title="四、引用类型"></a>四、引用类型</h2><p>无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p>
<p>Java 具有四种强度不同的引用类型。</p>
<h3 id="4-1-强引用"><a href="#4-1-强引用" class="headerlink" title="4.1 强引用"></a>4.1 强引用</h3><p>被强引用关联的对象不会被垃圾收集器回收。</p>
<p>使用 new 一个新对象的方式来创建强引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<h3 id="4-2-软引用"><a href="#4-2-软引用" class="headerlink" title="4.2 软引用"></a>4.2 软引用</h3><p>被软引用关联的对象，只有在内存不够的情况下才会被回收。</p>
<p>使用 SoftReference 类来创建软引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-弱引用"><a href="#4-3-弱引用" class="headerlink" title="4.3 弱引用"></a>4.3 弱引用</h3><p>被弱引用关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。</p>
<p>使用 WeakReference 类来实现弱引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>WeakHashMap 的 Entry 继承自 WeakReference，主要用来实现缓存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">Object</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Tomcat 中的 ConcurrentCache 就使用了 WeakHashMap 来实现缓存功能。ConcurrentCache 采取的是分代缓存，经常使用的对象放入 eden 中，而不常用的对象放入 longterm。eden 使用 ConcurrentHashMap 实现，longterm 使用 WeakHashMap，保证了不常使用的对象容易被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; eden;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; longterm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentCache</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.eden = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">this</span>.longterm = <span class="keyword">new</span> WeakHashMap&lt;&gt;(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line">        V v = <span class="keyword">this</span>.eden.get(k);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            v = <span class="keyword">this</span>.longterm.get(k);</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">this</span>.eden.put(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eden.size() &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">this</span>.longterm.putAll(<span class="keyword">this</span>.eden);</span><br><span class="line">            <span class="keyword">this</span>.eden.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.eden.put(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-虚引用"><a href="#4-4-虚引用" class="headerlink" title="4.4 虚引用"></a>4.4 虚引用</h3><p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。</p>
<p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p>
<p>使用 PhantomReference 来实现虚引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-运行时数据区域</title>
    <url>/2018/04/08/jvm-runtime-data-area/</url>
    <content><![CDATA[<p>Java 的内存区域划分绝不仅仅只是堆内存（heap）和栈内存（Stack），实际上 JVM 在执行 Java 程序的过程中会把它所管理的内存划分为以下几个数据区域：程序计数器、Java 虚拟机栈、本地方法栈、堆、方法区、运行时常量和直接内存。如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/jvm-runtime-data-area.png" alt="Runtime DataArea"></p>
<a id="more"></a>
<h2 id="一、程序计数器（PC-Register）"><a href="#一、程序计数器（PC-Register）" class="headerlink" title="一、程序计数器（PC Register）"></a>一、程序计数器（PC Register）</h2><p>程序计数器（PC Register）是最小的一块内存区域，它的作用是记录正在执行的虚拟机字节码指令的地址。在虚拟机的模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。</p>
<ul>
<li>每一个 Java 线程都有一个程序计数器，用以记录比如在线程切换回来后恢复到正确的执行位置。</li>
<li>如该线程正在执行一个 Java 方法，则计数器记录的是正在执行的虚拟机字节码地址，如执行 Native 方法，则计数器值为空。</li>
<li>此内存区域是唯一一个在 JVM 中没有规定任何 <code>OutOfMemoryError</code> 情况的区域。</li>
</ul>
<h2 id="二、Java-虚拟机栈（JVM-Stacks）"><a href="#二、Java-虚拟机栈（JVM-Stacks）" class="headerlink" title="二、Java 虚拟机栈（JVM Stacks）"></a>二、Java 虚拟机栈（JVM Stacks）</h2><p>每个 Java 方法在执行的同时会创建一个 “栈帧” 用于存储局部变量表（包括参数）、操作数栈（执行引擎计算时需要）、常量池引用、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。JVM 栈是线程私有的，并且生命周期与线程相同。并且当线程运行完毕后，相应内存也就被自动回收</p>
<p><code>局部变量表</code> 存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（引用指针，并非对象本身），其中 64 位长度的 long 和 double 类型的数据会占用 2 个局部变量的空间，其余数据类型只占 1 个。</p>
<p>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量是完全确定的，在运行期间栈帧不会改变局部变量表的大小空间。</p>
<p>可以通过虚拟机参数 <code>-Xss</code>（例如：<code>java -Xss=512M HackTheJava</code>）来指定一个程序的 Java 虚拟机栈内存大小。</p>
<p>当线程请求的栈深度大于虚拟机所允许的深度，会抛出 <code>StackOverflowError</code> 异常（如：将一个函数反复递归自己，最终会出现这种异常）；如果 JVM 栈可以动态扩展（大部分 JVM 是可以的），当扩展时无法申请到足够内存，则会抛出 <code>OutOfMemoryError</code> 异常。</p>
<h2 id="三、本地方法栈（Native-Method-Stacks）"><a href="#三、本地方法栈（Native-Method-Stacks）" class="headerlink" title="三、本地方法栈（Native Method Stacks）"></a>三、本地方法栈（Native Method Stacks）</h2><p>本地方法不是用 Java 实现，对待这些方法需要特别处理。与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。和 JVM 栈一样，这个区域也会抛出 <code>StackOverflowError</code> 和 <code>OutOfMemoryError</code> 异常。</p>
<h2 id="四、堆（Heap）"><a href="#四、堆（Heap）" class="headerlink" title="四、堆（Heap）"></a>四、堆（Heap）</h2><p>堆（Heap）也叫做 Java 堆，GC 堆，是 Java 虚拟机所管理的内存中最大的一块内存区域，也是被各个线程共享的内存区域，在 JVM 启动时创建。该内存区域存放了对象实例 (所有 new 的对象)及数组，JIT 编译器貌似不是这样的。根据 Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。</p>
<p>其大小通过 <code>- Xms</code>（最小值）和 <code>-Xmx</code>（最大值）参数设置（例如：<code>java -Xms=1M -Xmx=2M HackTheJava</code>），<code>-Xms</code> 为 JVM 启动时申请的最小内存，默认为操作系统物理内存的 1/64 但小于 1G，<code>-Xmx</code> 为 JVM 可申请的最大内存，默认为物理内存的 1/4 但小于 1G，默认当空余堆内存小于 40% 时，JVM 会增大 Heap 到 <code>-Xmx</code> 指定的大小，可通过 <code>- XX:MinHeapFreeRation</code> 来指定这个比列；当空余堆内存大于 70% 时，JVM 会减小 heap 的大小到 <code>-Xms</code> 指定的大小，可通过 <code>XX:MaxHeapFreeRation</code> 来指定这个比列，对于运行系统，为避免在运行时频繁调整 Heap 的大小，通常 <code>-Xms</code> 与 <code>-Xmx</code> 的值设成一样。</p>
<p>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 <code>OutOfMemoryError</code> 异常。</p>
<p>Java 堆是垃圾收集管理的主要战场，现代的垃圾收集器基本都是采用分代收集算法，该算法的思想是针对不同的对象采取不同的垃圾回收算法，因此虚拟机把 Java 堆分成以下三块：新生代（Young Generation）、老年代（Old Generation）、永久代（Permanent Generation）。</p>
<h3 id="4-1-新生代"><a href="#4-1-新生代" class="headerlink" title="4.1 新生代"></a>4.1 新生代</h3><p>程序新创建的对象都是从新生代分配内存，新生代存放着大量的生命很短的对象，因此新生代在三个区域中垃圾回收的频率最高。为了更高效地进行垃圾回收，把新生代继续划分成以下三个空间：Eden、From Survivor、To Survivor。</p>
<p>可通过 <code>- Xmn</code> 参数来指定新生代的大小，也可以通过 <code>- XX:SurvivorRation</code> 来调整 Eden Space 及 Survivor Space 的大小。</p>
<h3 id="4-2-老年代"><a href="#4-2-老年代" class="headerlink" title="4.2 老年代"></a>4.2 老年代</h3><p>老年代用于存放经过多次新生代 GC 任然存活的对象，例如缓存对象。新建的对象也有可能直接进入老年代，主要有两种情况：</p>
<ul>
<li>大对象，可通过启动参数设置 <code>- XX:PretenureSizeThreshold=1024</code>（单位为字节，默认为 0）来代表超过多大时就不在新生代分配，而是直接在老年代分配。</li>
<li>大的数组对象，且数组中无引用外部对象。</li>
</ul>
<p>老年代所占的内存大小为 <code>- Xmx</code> 对应的值减去 <code>- Xmn</code> 对应的值。</p>
<h3 id="4-3-永久代"><a href="#4-3-永久代" class="headerlink" title="4.3 永久代"></a>4.3 永久代</h3><p>永久代是 Hotspot 虚拟机特有的概念，是方法区的一种实现，别的 JVM 都没有这个东西。在 Java 8 中，永久代被彻底移除，取而代之的是另一块与堆不相连的本地内存——元空间。<br>永久代或者 “Perm Gen” 包含了 JVM 需要的应用元数据，这些元数据描述了在应用里使用的类和方法。注意，永久代不是 Java 堆内存的一部分。永久代存放 JVM 运行时使用的类。永久代同样包含了 Java SE 库的类和方法。永久代的对象在 Full GC 时进行垃圾收集。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20180408-175834.png" alt=""></p>
<h2 id="五、方法区（Method-Area）"><a href="#五、方法区（Method-Area）" class="headerlink" title="五、方法区（Method Area）"></a>五、方法区（Method Area）</h2><p>方法区（Method Area）也称 “永久代”、”非堆”，它用于存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，如：当程序中通过 getName、isInterface 等方法来获取信息时，这些数据来源于方法区。方法区是各个线程共享的内存区域，比如每个线程都可以访问同一个类的静态变量。默认最小值为 16MB，最大值为 64MB，可以通过 - XX:PermSize 和 -XX:MaxPermSize 参数限制方法区的大小。</p>
<p>和 Java 堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 <code>OutOfMemoryError</code> 异常。</p>
<p>由于使用反射机制的原因，虚拟机很难推测哪个类信息不再使用，因此这块区域的回收很难，对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载。方法区并不等同于永久代，只是因为 HotSpot VM 使用永久代来实现方法区，对于其他的 Java 虚拟机，比如 J9 和 JRockit 等，并不存在永久代概念。</p>
<h2 id="六、运行时常量池（Runtime-Constant-Pool）"><a href="#六、运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="六、运行时常量池（Runtime Constant Pool）"></a>六、运行时常量池（Runtime Constant Pool）</h2><p>运行时常量池（Runtime Constant Pool）是方法区的一部分，值得注意的是 JDK1.7 已经把常量池转移到堆里面了。Class 文件中的常量池（编译器生成的各种字面量和符号引用）会在类加载后被放入这个区域。运行时常量池可以理解为是类或接口的常量池的运行时表现形式。除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。这部分常量也会被放入运行时常量池。</p>
<p>当创建类或接口时，如果构造运行时常量池所需的内存超过了方法区所能提供的最大值，Java 虚拟机会抛出 <code>OutOfMemoryError</code> 异常。</p>
<h2 id="七、直接内存（Direct-Memory）"><a href="#七、直接内存（Direct-Memory）" class="headerlink" title="七、直接内存（Direct Memory）"></a>七、直接内存（Direct Memory）</h2><p>在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p>
<hr>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP 算法理解</title>
    <url>/2022/03/12/the-kmp/</url>
    <content><![CDATA[<h2 id="字符串前缀-与字符串后缀"><a href="#字符串前缀-与字符串后缀" class="headerlink" title="字符串前缀 与字符串后缀"></a><strong>字符串前缀</strong> 与<strong>字符串后缀</strong></h2><ul>
<li><p>字符串前缀(<code>Proper prefix</code>) ：包含第一个字符，不包含最后一个字符的所有子串<br>例如：<code>abababca</code> 的前缀：<code>a、ab、aba、abab、ababa、ababab、abababc</code></p>
</li>
<li><p>字符串后缀(<code>Proper suffix</code>)：不包含第一个字符，包含最后一个字符的所有子串<br>例如：<code>abababca</code> 的后缀：<code>a、ca、bca、abca、babca、ababca、bababca</code></p>
</li>
</ul>
<h2 id="字符串部分匹配表"><a href="#字符串部分匹配表" class="headerlink" title="字符串部分匹配表"></a><strong>字符串部分匹配表</strong></h2><p>字符串部分匹配表 (<code>Partial Match Table</code>) 也称为 <code>next</code> 数组，例如：<code>abababca</code>  的部分匹配表为：</p>
<table>
<thead>
<tr>
<th>char</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>a</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>value</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<a id="more"></a>
<p>每列 <code>value</code> 值表示前 <code>index + 1</code> 个字符子串的<strong>最大字符串前缀与字符串后缀相匹配的长度</strong>，例如：</p>
<ul>
<li>index 为 0 的子串为 a，没有字符串前缀和字符串后缀，所以 value 为 0</li>
<li>index 为 1 的子串为 ab，字符串前缀为 a，字符串后缀为 b，没有相匹配的字符串前缀与字符串后缀，所以 value 为 0</li>
<li>index 为 2 的子串为 aba，字符串前缀为 a、ab，字符串后缀为 a、ba，字符串前缀与字符串后缀相匹配的子串为 a，长度为 1，所以 value 为 1</li>
<li>index 为 3 的子串为 abab，字符串前缀为 a、ab、aba，字符串后缀为 b、ab、bab，字符串前缀与字符串后缀相匹配的子串为 ab，长度 2，所以 value 为 2</li>
<li>index 为 4 的子串为 ababa，字符串前缀为 a、ab、aba、abab，字符串后缀为 a、ba、aba、baba，字符串前缀与字符串后缀相匹配的子串为 a、aba，长度最大的为 aba ，所以 value 为 3</li>
<li>…</li>
<li>index 为 7 的子串为 abababca，字符串前缀为 a、ab、aba、abab、ababa、ababab、abababc，字符串后缀为 a、ca、bca、abca、babca、ababca、bababca，字符串前缀与字符串后缀相匹配的子串为 a，所以 value 为 1</li>
</ul>
<h2 id="KMP-算法思路"><a href="#KMP-算法思路" class="headerlink" title="KMP 算法思路"></a>KMP 算法思路</h2><p>KMP 算法就是利用字符串部分匹配表可以计算出当模式串与主串不匹配时，模式串可以<strong>多后移几位</strong> (默认后移 1 位)</p>
<p>当模式串与主串不匹配时，如果<strong>不匹配字符</strong>对应模式串下标大于 <code>0</code> (非首个模式串字符)，取此字符前一个字符对应字符串部分匹配表中的 <code>value</code> ，如果 <code>value</code> 大于 <code>0</code>，模式串中不匹配字符之前 (不含不匹配字符) 子串长度减去 <code>value</code> 即模式串为后移的位数。</p>
<p>暴力匹配算法当模式串和主串不匹配时，主串匹配下标 <code>+1</code>，模式串匹配下标置为 <code>0</code>，<code>KMP</code> 算法优化点在于模式串匹配下标置为 <code>value</code>。</p>
<p>例如在主串 <code>bacbababaabcbab</code> 中查找模式串 <code>abababca</code></p>
<ul>
<li>第一次符合以上规则的情况如下，模式串与主串不匹配字符 (<code>b</code>) 前一个字符为 <code>a</code>，对应字符串部分匹配表 <code>index</code> 为 <code>0</code>，<code>value</code> 为 <code>0</code>，所以不存在多后移情况</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bacbababaabcbab</span><br><span class="line">  |</span><br><span class="line"> abababca</span><br></pre></td></tr></table></figure>

<ul>
<li>第二次符合以上规则的情况如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bacbababaabcbab</span><br><span class="line">         |</span><br><span class="line">    abababca</span><br></pre></td></tr></table></figure>

<ul>
<li>模式串与主串不匹配字符 (<code>b</code>) 前一个字符是 <code>a</code>，对应字符串部分匹配表 <code>index</code> 为 <code>4</code>，<code>value</code> 为 <code>3</code>，不匹配字符之前模式串为 <code>ababa</code> 长度为 <code>5</code>， 所以后移 <code>5-3=2</code> 位</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bacbababaabcbab</span><br><span class="line">         |</span><br><span class="line">      abababca</span><br></pre></td></tr></table></figure>

<ul>
<li>模式串与主串不匹配字符 (<code>b</code>) 前一个字符是 <code>a</code>，对应字符串部分匹配表 <code>index</code> 为 <code>2</code>，<code>value</code> 为 <code>1</code>，不匹配字符之前模式串为 <code>aba</code> 长度为 <code>3</code>， 所以后移 <code>3-1=2</code> 位</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bacbababaabcbab</span><br><span class="line">           |</span><br><span class="line">         abababca</span><br></pre></td></tr></table></figure>

<ul>
<li>此时，模式串长度已经比剩余主串长，匹配结束。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>next 数组的代码实现思路参考 <a href="https://www.cnblogs.com/tangzhengyue/p/4315393.html" target="_blank" rel="noopener">KMP 算法的 Next 数组详解</a></p>
<blockquote>
<p>Golang 暴力匹配代码实现</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 暴力匹配</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bf</span><span class="params">(s, p <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    m := <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">if</span> n &lt; m &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n-m; i++ &#123;</span><br><span class="line">        j := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j &lt; m &#123;</span><br><span class="line">            <span class="comment">// 如果主串与模式串不匹配，则主串向右移动一个字符,模式串从头开始匹配</span></span><br><span class="line">            <span class="keyword">if</span> s[i+j] != p[j] &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j == m &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Golang KMP 代码实现</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Kmp</span><span class="params">(s, p <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    m := <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">if</span> n &lt; m &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    next := GetNext(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n-m; i++ &#123;</span><br><span class="line">        j := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j &lt; m &#123;</span><br><span class="line">            <span class="comment">// 暴力匹配算法当模式串和主串不匹配时，主串匹配下标 +1，模式串匹配下标置为 0，</span></span><br><span class="line">            <span class="comment">// KMP 算法优化点在于将模式串下标置为不匹配字符前一个字符对应 next 数组的值</span></span><br><span class="line">            <span class="keyword">if</span> s[i+j] != p[j] &#123;</span><br><span class="line">                <span class="comment">// 当模式串与主串不匹配时，如果不匹配字符对应模式串下标大于 j &gt; 0 (非首个模式串字符)，</span></span><br><span class="line">                <span class="comment">// 并且此字符前一个字符对应字符串部分匹配表中的值 next[j - 1] 也大于 0，</span></span><br><span class="line">                <span class="comment">// j - next[j - 1] 即模式串为后移的位数，等价于 j 置为 next[j - 1]</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> j != <span class="number">0</span> &amp;&amp; next[j<span class="number">-1</span>] != <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="comment">// j 后移 j-next[j-1]，等价于 j = next[j-1]</span></span><br><span class="line">                    j = next[j<span class="number">-1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j == m &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNext</span><span class="params">(p <span class="keyword">string</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(p)</span><br><span class="line">    next := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    k := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据已知 next 数组的前 i-1 位推测第 i 位</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> k &gt; <span class="number">0</span> &amp;&amp; p[k] != p[i] &#123;</span><br><span class="line">            <span class="comment">// k 为 p[0, i) 子串最大匹配前后缀长度</span></span><br><span class="line">            <span class="comment">// p[0, k) 为 p[0, i) 子串最大匹配前缀子串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若：1、p[k] != p[i]，则求 p[0, i] 子串最大匹配前后缀长度问题</span></span><br><span class="line">            <span class="comment">// 转换成了求 p[0, k) 子串最大匹配前后缀长度问题</span></span><br><span class="line">            <span class="comment">// 循环直到 p[k] == p[i] (下一步处理) 或 k == 0</span></span><br><span class="line">            k = next[k]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若：2、p[k] == p[i]，则 p[0, i] 子串最大匹配前后缀长度为 k + 1</span></span><br><span class="line">        <span class="keyword">if</span> p[k] == p[i] &#123;</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next[i] = k</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java KMP 代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.ehlxr.algorithm.match;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串匹配算法 KPM</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ehlxr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-03-13 10:06.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kmp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"bacbababaabcbab"</span>;</span><br><span class="line">        String p = <span class="string">"abab"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(getNexts(p)));</span><br><span class="line">        System.out.println(kmp(s, p));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] scs = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] pcs = p.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = p.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] next = getNexts(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (scs[i + j] != pcs[j]) &#123;</span><br><span class="line">                    <span class="comment">// 暴力匹配算法当模式串和主串不匹配时，主串匹配下标 +1，模式串匹配下标置为 0，</span></span><br><span class="line">                    <span class="comment">// KMP 算法优化点在于将模式串下标置为不匹配字符前一个字符对应 next 数组的值</span></span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; next[j - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 当模式串与主串不匹配时，如果**不匹配字符**对应模式串下标大于 j &gt; 0 (非首个模式串字符)，</span></span><br><span class="line">                        <span class="comment">// 并且此字符前一个字符对应字符串部分匹配表中的值 next[j - 1] 也大于 0，</span></span><br><span class="line">                        <span class="comment">// j - next[j - 1] 即模式串为后移的位数，等价于 j 置为 next[j - 1]</span></span><br><span class="line">                        j = next[j - <span class="number">1</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNexts(String p) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = p.length();</span><br><span class="line">        <span class="keyword">char</span>[] b = p.toCharArray();</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line"></span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">// 表示前后缀相匹配的最大长度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据已知 next 数组的前 i-1 位推测第 i 位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k != <span class="number">0</span> &amp;&amp; b[k] != b[i]) &#123;</span><br><span class="line">                <span class="comment">// k 为 b[0, i) 子串最大匹配前后缀长度</span></span><br><span class="line">                <span class="comment">// b[0, k) 为 b[0, i) 子串最大匹配前缀子串</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 若：1、b[k] != b[i]，则求 b[0, i] 子串最大匹配前后缀长度问题</span></span><br><span class="line">                <span class="comment">// 转换成了求 b[0, k) 子串最大匹配前后缀长度问题</span></span><br><span class="line">                <span class="comment">// 循环直到 b[k] == b[i] (下一步处理) 或 k == 0</span></span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若：2、b[k] == b[i]，则 b[0, i] 子串最大匹配前后缀长度为 k + 1</span></span><br><span class="line">            <span class="keyword">if</span> (b[k] == b[i]) &#123;</span><br><span class="line">                ++k;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考 <a href="http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/" target="_blank" rel="noopener">The Knuth-Morris-Pratt Algorithm in my own words</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>KMP</tag>
        <tag>字符串匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 配置文件 settings.xml 详解</title>
    <url>/2020/03/02/maven-setting-config/</url>
    <content><![CDATA[<p><code>settings.xml</code> 是 <code>maven</code> 的配置文件，用户配置文件存放于 <code>${user.home}/.m2/</code> 目录下，系统全局配置文件放置于 <code>${maven.home}/conf/</code> 目录下，<code>pom.xml</code> 是 <code>maven</code> 的项目的配置文件。</p>
<p>配置文件的优先级从<code>高到低</code>为：<code>pom.xml</code>、用户配置 <code>settings.xml</code>、全局系统 <code>settings.xml</code>。如果这些文件同时存在，在应用配置时，会合并它们的内容，如果有重复的配置，优先级高的配置会覆盖优先级低的。</p>
<a id="more"></a>
<p>现抽空把 <code>settings.xml</code> 相关配置属性总结一下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建系统本地仓库的路径。其默认值：~/.m2/repository --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;localRepository&gt;$&#123;user.home&#125;/.m2/repository&lt;/localRepository&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是否需要和用户交互以获得输入。默认为 true --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是否需要使用 ~/.m2/plugin-registry.xml 文件来管理插件版本。默认为 false --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;usePluginRegistry&gt;false&lt;/usePluginRegistry&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是否需要在离线模式下运行，默认为 false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;offline&gt;false&lt;/offline&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当插件的 groupId 没有显式提供时，供搜寻插件 groupId 的列表。使用某个插件，如果没有指定 groupId 的时候，maven 就会使用该列表。</span></span><br><span class="line"><span class="comment">        默认情况下该列表包含了 org.apache.maven.plugins 和 org.codehaus.mojo --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;pluginGroups&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- plugin 的 groupId --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;pluginGroup&gt;org.codehaus.mojo&lt;/pluginGroup&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;/pluginGroups&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置服务端的一些设置。如安全证书之类的信息应该配置在 settings.xml 文件中，避免配置在 pom.xml 中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;servers&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;server&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这是 server 的 id（注意不是用户登陆的 id），该 id 与 distributionManagement 中 repository 元素的 id 相匹配 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;id&gt;server001&lt;/id&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 鉴权用户名 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;username&gt;my_login&lt;/username&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 鉴权密码 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;password&gt;my_password&lt;/password&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 鉴权时使用的私钥位置。默认是 $&#123;user.home&#125;/.ssh/id_dsa --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;privateKey&gt;$&#123;usr.home&#125;/.ssh/id_dsa&lt;/privateKey&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 鉴权时使用的私钥密码 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;passphrase&gt;some_passphrase&lt;/passphrase&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用该权限。其对应了 unix 文件系统的权限，如：664、775 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;filePermissions&gt;664&lt;/filePermissions&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 目录被创建时的权限 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;directoryPermissions&gt;775&lt;/directoryPermissions&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;/server&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;/servers&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下载镜像列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置多个镜像只会识别第一个镜像下载 jar 包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 该镜像的唯一标识符。id 用来区分不同的 mirror 元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 被镜像的服务器的 id。如果我们要设置了一个 maven 中央仓库（http://repo.maven.apache.org/maven2/）的镜像，就需要将该元素设置成 central。</span></span><br><span class="line"><span class="comment">                可以使用 * 表示任意远程库。例如：external:* 表示任何不在 localhost 和文件系统中的远程库，r1,r2 表示 r1 库或者 r2 库，*,!r1 表示除了 r1 库之外的任何远程库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 镜像名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 镜像的 URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用来配置不同的代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代理的唯一定义符，用来区分不同的代理元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否激活。当我们声明了一组代理，而某个时候只需要激活一个代理的时候 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">active</span>&gt;</span>false<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代理的协议 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代理的主机名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代理的端口 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代理的用户名，用户名和密码表示代理服务器认证的登录名和密码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代理的密码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，逗号分隔也很常见 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据环境参数来调整构建配置的列表。对应 pom.xml 中 profile 元素（只包含 id、activation、repositories、pluginRepositories 和 properties 元素）</span></span><br><span class="line"><span class="comment">        如果一个 settings.xml 中的 profile 被激活，它的值会覆盖任何定义在 pom.xml 中带有相同 id 的 profile --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- profile 的唯一标识 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自动触发 profile 的条件逻辑。也可通过 activeProfile 元素以及使用 -P 标记激活（如：mvn clean install -P test）</span></span><br><span class="line"><span class="comment">                在 maven 工程的 pom.xml 所在目录下执行 mvn help:active-profiles 命令可以查看生效的 profile --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 默认是否激活 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的 jdk 被检测到，profile 被激活。例如：1.4 激活 JDK1.4、1.4.0_2，而 !1.4 激活所有版本不是以 1.4 开头的 JDK --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile 被激活。os 元素可以定义一些操作系统相关的属性 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活 profile的 操作系统的名字 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活 profile 的操作系统所属家族。如：windows --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活 profile 的操作系统体系结构 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活p rofile 的操作系统版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 如果 maven 检测到某一个属性（其值可以在 pom.xml 中通过 $&#123;name&#125; 引用），其拥有对应的 name=值，Profile 就会被激活。如果值字段是空的，</span></span><br><span class="line"><span class="comment">                    那么存在属性名称字段就会激活 profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活 profile 的属性的名称 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 激活 profile 的属性的值 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 通过检测该文件的存在或不存在来激活 profile--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件存在，则激活 profile --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件不存在，则激活 profile --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对应 profile 的扩展属性列表。maven 属性和 ant 中的属性一样，可以用来存放一些值。这些值可以在 pom.xml 中的任何地方使用标记 $&#123;X&#125; 来使用，这里 X 是指属性的名称。</span></span><br><span class="line"><span class="comment">                属性有五种不同的形式，并且都能在 settings.xml 文件中访问：</span></span><br><span class="line"><span class="comment">                1. env.X：在一个变量前加上 "env." 的前缀，会返回一个 shell 环境变量。例如："env.PATH" 指代了 $path 环境变量（在 Windows 上是 %PATH%）</span></span><br><span class="line"><span class="comment">                2. project.x：指代了 pom.xml 中对应的元素值。例如：&lt;project&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;/project&gt; 通过 $&#123;project.version&#125; 获得 version 的值</span></span><br><span class="line"><span class="comment">                3. settings.x：指代了 settings.xml 中对应元素的值。例如：&lt;settings&gt;&lt;offline&gt;false&lt;/offline&gt;&lt;/settings&gt; 通过 $&#123;settings.offline&#125; 获得 offline 的值</span></span><br><span class="line"><span class="comment">                4. Java System Properties：所有可通过 java.lang.System.getProperties() 访问的属性都能在 pom.xml 中使用该形式访问，例如：$&#123;java.home&#125;</span></span><br><span class="line"><span class="comment">                5. x：在 &lt;properties/&gt; 元素中，或者外部文件中设置，以 $&#123;someVar&#125; 的形式使用</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 如果该 profile 被激活，则可以在 pom.xml 中使用 $&#123;user.install&#125; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">user.install</span>&gt;</span>$&#123;user.home&#125;/our-project<span class="tag">&lt;/<span class="name">user.install</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库列表。它是 maven 用来填充构建系统本地仓库所使用的一组远程仓库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 远程仓库唯一标识 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如何处理远程仓库里 releases 的下载 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 是否开启 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 该元素指定更新发生的频率。maven 会比较本地 pom.xml 和远程 pom.xml 的时间戳。</span></span><br><span class="line"><span class="comment">                            这里的选项是：always（一直），daily（默认，每日），interval：X（这里 X 是以分钟为单位的时间间隔），或者 never（从不）。 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 当 maven 验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者 warn（警告）--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了 releases 和 snapshots 这两组配置，pom.xml 就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。</span></span><br><span class="line"><span class="comment">                        例如：可能有人会决定只为开发目的开启对快照版本下载的支持 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 远程仓库 URL --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型。可以是 default（默认）或者 legacy（遗留）--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件的远程仓库列表。和 repositories 类似，repositories 管理 jar 包依赖的仓库，pluginRepositories 则是管理插件的仓库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 每个 pluginRepository 元素指定一个 maven 可以用来寻找新插件的远程地址 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 手动激活 profiles 的列表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;activeProfiles&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要激活的 profile id。例如：env-test，则在 pom.xml 或 settings.xml 中对应 id 的 profile 会被激活。如果运行过程中找不到对应的 profile 则忽略配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;activeProfile&gt;env-test&lt;/activeProfile&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;/activeProfiles&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>参考资料</p>
<ul>
<li><a href="https://maven.apache.org/settings.html" target="_blank" rel="noopener">maven 官方文档之 settings</a></li>
</ul>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL InnoDB 事务隔离级别</title>
    <url>/2021/01/16/mysql-innodb-tx-isolation/</url>
    <content><![CDATA[<h3 id="SQL-事务隔离级别说明"><a href="#SQL-事务隔离级别说明" class="headerlink" title="SQL 事务隔离级别说明"></a>SQL 事务隔离级别说明</h3><p>SQL 标准定义了 4 类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>
<p><strong>Read Uncommitted（读取未提交内容）</strong></p>
<p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>
<p><strong>Read Committed（读取提交内容）</strong></p>
<p>这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的 commit，所以同一 select 可能返回不同结果。</p>
<p><strong>Repeatable Read（可重读）</strong></p>
<p>这是 MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read），简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的 <code>“幻影”</code> 行。</p>
<blockquote>
<p>InnoDB 存储引擎通过 <code>MVCC</code> 机制（快照读）和 <code>next-key lock</code>（当前读）解决了该问题。</p>
</blockquote>
<p><strong>Serializable（可串行化）</strong></p>
<p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>
<a id="more"></a>

<h3 id="事务隔离带来的问题"><a href="#事务隔离带来的问题" class="headerlink" title="事务隔离带来的问题"></a>事务隔离带来的问题</h3><p>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</p>
<p><strong>脏读 (Drity Read)</strong>：一个事务读取到另一事务未提交的更新数据。当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中（这个数据在有可能会回滚），这时，另外一个事务也访问这个数据，然后使用了这个数据。</p>
<p><strong>不可重复读 (Non-repeatable read)</strong>：在一个事务内，前后两次读到的数据是不一样。在 T1 事务两次读取同一数据之间，T2 事务对该数据进行了修改，就会发生 T1 事务中的两次数据读取不一样的结果。相反， <strong>可重复读</strong>：在同一事务中多次读取数据时，能够保证所读数据一样，也就是后续读取不能读到另一事务已提交的更新数据。</p>
<p><strong>幻读 (Phantom Read)</strong>：指当事务不是独立执行时发生的一种现象，例如：T1 事务对表中的 “全部数据行” 进行了修改，同时 T2 事务向表中插入了一行 “新数据”，操作 T1 事务的用户发现表中<strong>还存在没有修改</strong>的数据行，就好象发生了幻觉一 样。一般解决幻读的方法是增加范围锁 RangeS，锁定检锁范围为只读，这样就避免了幻读。</p>
<p><strong>不可重复读和幻读的异同</strong></p>
<ul>
<li>两者都表现为两次读取的结果不一致</li>
<li>不可重复读是由于另一个事务对数据的更改所造成的</li>
<li>幻读是由于另一个事务插入或删除引起的</li>
<li>对于不可重复读，只需要锁住满足条件的记录</li>
<li>对于幻读，要锁住满足条件及其相近的记录</li>
<li>不可重复读表达的是：记录（一行或多行）的值在同一次事务中出现两个不同的结果</li>
<li>幻读表达的是：同一事务中查询两次得到两个不同的结果集</li>
<li>不可重复读侧重表达 <code>读 - 读</code></li>
<li>幻读则是说 <code>读 - 写</code>，用写来证实读的是鬼影</li>
</ul>
<p><a href="https://www.zhihu.com/question/47007926/answer/222348887" target="_blank" rel="noopener"><strong>关于幻读</strong></a></p>
<p>这里给出 MySQL 在 Repeatable Read 隔离界别下幻读的比较形象的场景：</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>事务 1</th>
<th>事务 2</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>start transaction;<br />select * from users where id = 1;<br />结果为：0</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>start transaction;<br />insert into users(id, name) values (1, ‘big cat’);<br />commit;</td>
</tr>
<tr>
<td>T3</td>
<td>insert into users(id, name) values (1, ‘big cat’);<br />主键冲突，插入失败</td>
<td></td>
</tr>
<tr>
<td>T4</td>
<td>select * from users where id = 1;<br />结果为：0</td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td>rollback;</td>
<td></td>
</tr>
</tbody></table>
<p>假设 users 表中 id 为主键</p>
<ul>
<li><p>T1 的时间点事务 1 检测表中没有 id 为 1 的记录</p>
</li>
<li><p>T2 时间点事务 2 插入 id 为 1 的记录并提交事务</p>
</li>
<li><p>T3 时间点事务1 尝试插入 id 为 1 的数据时提示主键冲突</p>
</li>
<li><p>T4 时间点再去检查表中还是没有 id 为 1 的记录（由于 Repeatable Read 隔离级别，事务 2 的插入提交事务 1 读取不到）</p>
</li>
</ul>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p><code>MVCC</code> 多版本并发控制（Multiversion Concurrency Control）。</p>
<p>每一条记录都有一些隐藏字段，其中 <code>trx_id</code>（事务 id）和 <code>roll_pointer</code>（回滚指针）字段就和 <code>MVCC</code> 密切相关</p>
<p><strong>版本链</strong><br>每次对数据修改都会使 <code>roll_pointer</code> 指向生成 <code>undo</code> 日志，即形成了数据修改的 <code>版本链</code>，版本链的头节点就是当前数据的最新值。</p>
<p><strong>Read View</strong><br>对于 <code>RC</code>、<code>RR</code> 隔离级别来说，事务启动后在不同的时机会生成 <code>Read View</code>，用于判断当前记录是否在事务中可见。<code>Read View</code> 包含创建时刻所有活跃的 <code>trx_id</code> 的集合 <code>m_ids</code>。当判断数据是否在当前事务中显示时，需要从头到尾遍历版本链，依次取得数据的历史记录判断，直到取到符合条件的历史版本，如果所有的历史记录都不满足则忽略此条数据。</p>
<ul>
<li>当前版本数据记录的 <code>trx_id</code> 如果小于 <code>m_ids</code> 中最小的 <code>trx_id</code>，说明当前版本数据是在当前事务 <code>Read View</code> 生成之前生成的，所以对当前事务可见。</li>
<li>当前版本数据记录的 <code>trx_id</code> 如果大于 <code>m_ids</code> 中最大的 <code>trx_id</code>，说明当前版本数据是在当前事务 <code>Read View</code> 生成之后生成的，所以对当前事务不可见。</li>
<li>当前版本数据记录的 <code>trx_id</code> 如果在 <code>m_ids</code> 中，说明当前版本数据在当前事务 <code>Read View</code> 生成之前还未提交，所以对当前事务不可见。</li>
<li>当前版本数据记录的 <code>trx_id</code> 如果不在 <code>m_ids</code> 中，说明当前版本数据是在当前事务 <code>Read View</code> 生成之前已提交，所以对当前事务可见。</li>
</ul>
<blockquote>
<p><code>RC</code> 隔离级别在每次读取数据前都会生成 <code>Read View</code>，<code>RR</code> 隔离级别在第一次读取数据时生成 <code>Read View</code>，运用以上可见规则就很容易推断出这两种隔离级别的隔离能力了。</p>
</blockquote>
<p>另外，<code>undo</code> 日志会在系统判断没有比它更早的 <code>Read View</code> 存在时就会被删除。所以当系统中存在大量长事务的时候，会导致 <code>undo</code> 日志不能被及时清理而占用大量的存储空间。</p>
<h3 id="MySQL-隔离级别"><a href="#MySQL-隔离级别" class="headerlink" title="MySQL 隔离级别"></a>MySQL 隔离级别</h3><table>
<thead>
<tr>
<th align="left">隔离级别</th>
<th align="left">脏读（Dirty Read）</th>
<th align="left">不可重复读（NonRepeatable Read）</th>
<th align="left">幻读（Phantom Read）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">未提交读（Read uncommitted）</td>
<td align="left">可能</td>
<td align="left">可能</td>
<td align="left">可能</td>
</tr>
<tr>
<td align="left">已提交读（Read committed）</td>
<td align="left">不可能</td>
<td align="left">可能</td>
<td align="left">可能</td>
</tr>
<tr>
<td align="left">可重复读（Repeatable read）</td>
<td align="left">不可能</td>
<td align="left">不可能</td>
<td align="left">可能</td>
</tr>
<tr>
<td align="left">可串行化（SERIALIZABLE）</td>
<td align="left">不可能</td>
<td align="left">不可能</td>
<td align="left">不可能</td>
</tr>
</tbody></table>
<h3 id="MySQL-事务隔离级别设置"><a href="#MySQL-事务隔离级别设置" class="headerlink" title="MySQL 事务隔离级别设置"></a>MySQL 事务隔离级别设置</h3><p><strong>InnoDB 默认是可重复读的（REPEATABLE READ）</strong></p>
<p>修改全局默认的事务级别，在 my.inf 文件的 [mysqld] 节里类似如下设置该选项（不推荐）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transaction-isolation &#x3D; &#123;READ-UNCOMMITTED | READ-COMMITTED | REPEATABLE-READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure>

<p><strong>改变单个会话或者所有新进连接的隔离级别（推荐使用）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查询全局和会话事务隔离级别方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询全局的事务隔离级别</span><br><span class="line">SELECT @@global.tx_isolation;</span><br><span class="line">#查询当前会话的事务级别</span><br><span class="line">SELECT @@session.tx_isolation;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oh My Zsh 替换你的 Bash Shell</title>
    <url>/2016/09/24/using-oh-my-zsh/</url>
    <content><![CDATA[<blockquote>
<p>Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p>
</blockquote>
<blockquote>
<blockquote class='blockquote-center'>[Oh My ZSH!][1]</blockquote>
</blockquote>
<!-- ![Oh My Zsh][2] -->
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/OMZLogo_BnW.png" class="" width="200" title="Oh My Zsh">

<h1 id="1-Oh-My-Zsh-简介"><a href="#1-Oh-My-Zsh-简介" class="headerlink" title="1. Oh My Zsh 简介"></a>1. Oh My Zsh 简介</h1><p>无意中看见了 Linux 的一款 Shell，相比于 Bash 极其美艳，决定入坑试水一下，不试不知道，一试绝对有惊喜，不仅外观美艳而且功能强大，那还有不替换 Bash 的理由吗？搞起搞起……</p>
<a id="more"></a>

<p>Linux 提供了很多种 Shell ，想要查看系统有安装哪些 Shell 可以通过命令：<code>chsh -l</code> 或者 <code>cat /etc/shells</code> 进行查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>其中 Bash 是绝大多数 Linux 系统默认的 Shell，虽然 Zsh Shell 没有被所有 Linux 预安装，但几乎每一款 Linux 都包含 Zsh Shell， 根据不同版本的 Linux 可以用 apt-get、yum 等包管理器进行安装。</p>
<p>但是我们今天介绍的并非是 Zsh，而是 Oh My Zsh，这是个什么鬼了？虽说 Zsh Shell 很牛逼，但配置相当麻烦，所以阻挡了好多人尝试的勇气（我想这也是为啥 Zsh 不被 Linux 设为默认 Shell 的原因吧），但是永远不要低估一个爱折腾程序猿的创造力，国外一程序猿真就创造出了一款易于使用的 Zsh 版本：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">Oh My Zsh</a></p>
<p>Oh My Zsh 几乎兼容日常使用的所有 Bash Shell 指令，让你可以无缝接入，不需要再去花额外的时间去适应。当然还扩展了大量炫酷的指令，要不然干嘛用它对吧，而且支持更换主题和插件机制。下面就开始搞起吧！</p>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><p>安装 Oh My Zsh 首先需要安装 git 和 zsh，如果已经安装，请自行忽略。本文是基于 CentOS 介绍，其它 Linux 大致相同。</p>
<h2 id="2-1-git-和-zsh-安装"><a href="#2-1-git-和-zsh-安装" class="headerlink" title="2.1 git 和 zsh 安装"></a>2.1 git 和 zsh 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git</span></span><br><span class="line">sodu yum install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh</span></span><br><span class="line">sodu yum install zsh</span><br></pre></td></tr></table></figure>

<h2 id="2-2-Oh-My-Zsh-安装"><a href="#2-2-Oh-My-Zsh-安装" class="headerlink" title="2.2 Oh My Zsh 安装"></a>2.2 Oh My Zsh 安装</h2><p>Oh My Zsh 提供了 <code>curl</code> 和 <code>wget</code> 两种安装方式，选择任意一种自己方便的方式即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># via curl</span></span><br><span class="line">sudo sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># via wget</span></span><br><span class="line">sudo sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>

<h1 id="3-配置使用"><a href="#3-配置使用" class="headerlink" title="3. 配置使用"></a>3. 配置使用</h1><h2 id="3-1-切换-Shell"><a href="#3-1-切换-Shell" class="headerlink" title="3.1 切换 Shell"></a>3.1 切换 Shell</h2><p>安装完成之后，使用以下命令即可切换当前 Shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chsh -s /bin/zsh</span></span><br><span class="line"></span><br><span class="line">usermod <span class="variable">$USER</span> -s /usr/bin/zsh</span><br></pre></td></tr></table></figure>

<p>退出当前终端连接，再次登入即可看到当前的 Shell 已经成功更改为 Oh My Zsh。</p>
<h2 id="3-2-更改主题"><a href="#3-2-更改主题" class="headerlink" title="3.2 更改主题"></a>3.2 更改主题</h2><p>Oh My Zsh 的配置文件路径为：<code>~/.zshrc</code>，配置文件中的 <code>ZSH_THEME</code> 就是主题配置字段，如下默认为 <code>robbyrussell</code> 主题配色。更多主题配色可参考 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">Oh My Zsh 主题</a>，这里我推荐是用 <code>ys</code> 主题。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"robbyrussell"</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-其它-Linux-用户配置使用"><a href="#3-3-其它-Linux-用户配置使用" class="headerlink" title="3.3 其它 Linux 用户配置使用"></a>3.3 其它 Linux 用户配置使用</h2><p>Linux 其它用户想要使用 Oh My Zsh Shell，只需要拷贝当前用户家目录下的 <code>~/.zshrc</code> 配置文件到当想要使用 Oh My Zsh Shell 用户的家目录下即可。需要注意的是配置文件中 Oh My Zsh 安装路径其它用户可以访问的到，所以最好更改为绝对路径，如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">export ZSH=/home/ehlxr/.oh-my-zsh</span><br></pre></td></tr></table></figure>

<h1 id="4-插件配置"><a href="#4-插件配置" class="headerlink" title="4. 插件配置"></a>4. 插件配置</h1><p>Oh My Zsh 支持插件机制，配置插件可以大大简化相关繁琐重复的命令。例如默认开启的 git 插件，就可以使用以下图表中的简写命令了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1focmaot1m0j20jq0dcq3x.jpg" alt="Oh-My-Zsh Git Aliases"></p>
<p>那如何配置其它的插件了？只需要在 Oh My Zsh 的配置文件 <code>~/.zshrc</code> 中找到 <code>plugins=(git)</code> 字段，配置插件的名称即可，多个插件使用空格隔开。</p>
<p>那支持哪些插件了？Oh My Zsh 安装目录下的 plugins 目录下就是支持的所有插件。例如：<code>ls ~/.oh-my-zsh/plugins</code> 就可以看到所有支持的插件名称了。</p>
<p>Oh My Zsh 支持插件的简写说明可以参看 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">oh-my-zsh Plugins wiki</a>。</p>
<h1 id="5-常用命令简介"><a href="#5-常用命令简介" class="headerlink" title="5. 常用命令简介"></a>5. 常用命令简介</h1><ul>
<li><code>l</code> 等价与 <code>ls -la</code>，查看当前目录下所有文件。</li>
<li>打开目录不需要再敲 <code>cd</code>，直接输入目录名即可。</li>
<li><code>TAB</code> 提示更加聪明。</li>
<li>聪明的历史记录，例如：敲下 <code>ls</code> 命令，按下键盘 <code>up</code> 按键，就会带出以 <code>ls</code> 开头的历史记录命令。</li>
</ul>
<h1 id="6-常用插件"><a href="#6-常用插件" class="headerlink" title="6. 常用插件"></a>6. 常用插件</h1><blockquote>
<p><code>.zshrc</code> 配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)</span><br><span class="line">export JAVA_6_HOME=$(/usr/libexec/java_home -v 1.8)</span><br><span class="line">export JAVA_7_HOME=$(/usr/libexec/java_home -v 1.8)</span><br><span class="line">export JAVA_8_HOME=$(/usr/libexec/java_home -v 1.8)</span><br><span class="line"></span><br><span class="line">export ZSH=/Users/ehlxr/.oh-my-zsh</span><br><span class="line"></span><br><span class="line">ZSH_THEME="ys"</span><br><span class="line"></span><br><span class="line">plugins=(git wd autojump sublime sudo zsh-autosuggestions zsh-syntax-highlighting extract history-substring-search)</span><br><span class="line"></span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line">alias h="hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span><br><span class="line">alias gacp='git add --all &amp;&amp; git commit -v &amp;&amp; git push'</span><br><span class="line">alias gacpm='git add --all &amp;&amp; git commit -m "update" &amp;&amp; git push'</span><br><span class="line">alias js='j --stat'</span><br><span class="line"></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h2 id="6-1-git-插件"><a href="#6-1-git-插件" class="headerlink" title="6.1 git 插件"></a>6.1 git 插件</h2><ul>
<li><p>安装</p>
<p>直接在 <code>.zshrc</code> 中启用。</p>
</li>
</ul>
<ul>
<li><p>效果</p>
<p>默认开启的插件，提供了大量 <code>git</code> 的 <code>alias</code> ，参看 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">oh-my-zsh Plugins wiki</a>。</p>
</li>
</ul>
<h2 id="6-2-wd-插件"><a href="#6-2-wd-插件" class="headerlink" title="6.2 wd 插件"></a>6.2 wd 插件</h2><ul>
<li><p>安装</p>
<p>直接在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p>给常用目录添加一个标识，然后就可以快速的切换到常用的目录。参考 <a href="https://github.com/mfaerevaag/wd" target="_blank" rel="noopener">wd</a> 。</p>
</li>
</ul>
<h2 id="6-3-autojump-插件"><a href="#6-3-autojump-插件" class="headerlink" title="6.3 autojump 插件"></a>6.3 autojump 插件</h2><ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Mac，可以使用 brew 安装：</span></span><br><span class="line">brew install autojump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS 可以使用 yum 安装:</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y autojump-zsh</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p><code>autojump</code> 按照你的使用频率记录路径，使得目录的跳转更为方便。参考<a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a></p>
</li>
</ul>
<h2 id="6-4-sublime插件"><a href="#6-4-sublime插件" class="headerlink" title="6.4 sublime插件"></a>6.4 sublime插件</h2><ul>
<li><p>安装</p>
<p>直接在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p>使用命令行打开 <code>sublime</code>。<br>常用命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">st          # 直接打开sublime</span><br><span class="line">st file_a   # 用sublime打开文件 file</span><br><span class="line">st dir_a    # 用sublime打开目录 dir</span><br><span class="line">stt         # 在sublime打开当前目录，相当于 st .</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-5-sudo-插件"><a href="#6-5-sudo-插件" class="headerlink" title="6.5 sudo 插件"></a>6.5 sudo 插件</h2><ul>
<li><p>安装</p>
<p>直接在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p>按 <code>2</code> 次 <code>esc</code> 会在命令前自动输入 <code>sudo</code></p>
</li>
</ul>
<h2 id="6-6-zsh-autosuggestions-插件"><a href="#6-6-zsh-autosuggestions-插件" class="headerlink" title="6.6 zsh-autosuggestions 插件"></a>6.6 zsh-autosuggestions 插件</h2><ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p>根据历史记录智能自动补全命令，输入命令时会以暗色补全，按方向键右键完成输入。</p>
</li>
</ul>
<h2 id="6-7-zsh-syntax-highlighting-插件"><a href="#6-7-zsh-syntax-highlighting-插件" class="headerlink" title="6.7 zsh-syntax-highlighting 插件"></a>6.7 zsh-syntax-highlighting 插件</h2><ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p><code>fish shell</code> 风格的语法高亮插件。输入的命令根据主题自动高亮。比如我的主题是 <code>ys-modified</code>，输入正确的命令是黄色，输入错误的命令是红色。</p>
</li>
</ul>
<h2 id="6-8-extract-插件"><a href="#6-8-extract-插件" class="headerlink" title="6.8 extract 插件"></a>6.8 extract 插件</h2><ul>
<li><p>安装</p>
<p>直接在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p>功能强大的解压插件，所有类型的文件解压一个命令 <code>x</code> 全搞定，再也不需要去记 <code>tar</code> 后面到底是哪几个参数了。</p>
</li>
</ul>
<h2 id="6-9-history-substring-search-插件"><a href="#6-9-history-substring-search-插件" class="headerlink" title="6.9 history-substring-search 插件"></a>6.9 history-substring-search 插件</h2><p>历史命令搜索插件，如果和 <code>zsh-syntax-highlighting</code> 插件共用，要配置到语法高亮插件之后。</p>
<ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-history-substring-search.git $ZSH_CUSTOM/plugins/history-substring-search</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.zshrc</code> 中启用。</p>
</li>
<li><p>效果</p>
<p>上下键查询历史命令记录，可模糊匹配历史命令记录中任意字符串。</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Zsh</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 与 MySQL 知识总结</title>
    <url>/2016/07/28/Oracle-%E4%B8%8E-MySQL-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>对日常工作中使用 Oracle 和 MySQL 数据库知识对比总结。</p>
</blockquote>
<h1 id="SQLPlus-连接数据库的方式"><a href="#SQLPlus-连接数据库的方式" class="headerlink" title="SQLPlus 连接数据库的方式"></a>SQLPlus 连接数据库的方式</h1><h2 id="cmd-中输入：sqlplus-用户名-密码-数据库实例"><a href="#cmd-中输入：sqlplus-用户名-密码-数据库实例" class="headerlink" title="cmd 中输入：sqlplus 用户名/密码@数据库实例"></a>cmd 中输入：sqlplus 用户名/密码@数据库实例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlplus system/lxr316@oracle</span><br><span class="line">sqlplus sys/admin as sysdba</span><br></pre></td></tr></table></figure>

<h2 id="打开-SQLPlus-直接输入用户名和密码"><a href="#打开-SQLPlus-直接输入用户名和密码" class="headerlink" title="打开 SQLPlus 直接输入用户名和密码"></a>打开 SQLPlus 直接输入用户名和密码</h2><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connect sys/admin as sysdba</span><br><span class="line">connect system/lxr316</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="超级管理员登录"><a href="#超级管理员登录" class="headerlink" title="超级管理员登录"></a>超级管理员登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sys as sysdba</span><br></pre></td></tr></table></figure>

<h2 id="断开数据库"><a href="#断开数据库" class="headerlink" title="断开数据库"></a>断开数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">disconnect; <span class="comment"># 可简写 disconn</span></span><br></pre></td></tr></table></figure>

<h1 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h1><p><strong>命令：</strong> <code>mysql [–h 服务器地址] –u 用户名 –p [密码]</code>（<em>需要配置 mysql 数据库的 bin 到环境变量中</em>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h localhost –u root –p root</span><br><span class="line">mysql –u root -p</span><br></pre></td></tr></table></figure>

<h1 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h1><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> [username] <span class="keyword">identified</span> <span class="keyword">by</span> [<span class="keyword">password</span>];</span><br></pre></td></tr></table></figure>

<h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> [username] <span class="keyword">identified</span> <span class="keyword">by</span> [<span class="keyword">password</span>];</span><br></pre></td></tr></table></figure>

<h3 id="账户上锁、解锁"><a href="#账户上锁、解锁" class="headerlink" title="账户上锁、解锁"></a>账户上锁、解锁</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> [username] <span class="keyword">account</span> <span class="keyword">lock</span>|<span class="keyword">unlock</span>;</span><br></pre></td></tr></table></figure>

<h3 id="用户首次登录时直接修改密码–密码失效"><a href="#用户首次登录时直接修改密码–密码失效" class="headerlink" title="用户首次登录时直接修改密码–密码失效"></a>用户首次登录时直接修改密码–密码失效</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> [username] <span class="keyword">password</span> <span class="keyword">expire</span>;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="创建用户-1"><a href="#创建用户-1" class="headerlink" title="创建用户:"></a>创建用户:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>备注：</strong></p>
<ul>
<li>username：你将创建的用户名。</li>
<li>host：指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%。</li>
<li>password：该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。</li>
</ul>
<p><em>例如：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'dog'</span>@<span class="string">'localhost'</span><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'192.168.1.101_'</span>IDENDIFIED <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">''</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="设置与更改用户密码"><a href="#设置与更改用户密码" class="headerlink" title="设置与更改用户密码"></a>设置与更改用户密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'username'</span>@<span class="string">'host'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure>

<p>如果是当前登陆用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">"newpassword"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="Oracle-1"><a href="#Oracle-1" class="headerlink" title="Oracle"></a>Oracle</h2><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">to</span> 用户名;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> 表名 <span class="keyword">to</span>用户/角色</span><br></pre></td></tr></table></figure>

<h3 id="收回权限"><a href="#收回权限" class="headerlink" title="收回权限"></a>收回权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限<span class="keyword">from</span> 用户名;</span><br></pre></td></tr></table></figure>

<p>对象权限可以级联收回，但是系统权限不可以级联收回。</p>
<ul>
<li>系统权限： A 赋予一个系统权限给 B，B 再授予 C。然后A将该权限从 B 回收，此后 C 仍然有该权限。</li>
<li>对象权限： A 赋予一个对象权限给 B，B 再授予 C。然后A将该权限从 B 回收，此后 C 也失去了该权限。</li>
</ul>
<h3 id="常用系统权限"><a href="#常用系统权限" class="headerlink" title="常用系统权限"></a>常用系统权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">session</span> <span class="comment">--用户登录</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>     <span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">unlimited</span> <span class="keyword">tablespace</span>   <span class="comment">--无限表空间</span></span><br></pre></td></tr></table></figure>

<h3 id="常用对象权限"><a href="#常用对象权限" class="headerlink" title="常用对象权限"></a>常用对象权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">on</span> 表名; <span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">on</span> 表名; <span class="comment">-- 更新权限</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">on</span> 表名; <span class="comment">-- 删除权限</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">on</span> 表名; <span class="comment">-- 插入权限</span></span><br></pre></td></tr></table></figure>

<h3 id="权限的级联授予"><a href="#权限的级联授予" class="headerlink" title="权限的级联授予"></a>权限的级联授予</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">to</span> 用户名 <span class="keyword">with</span> <span class="keyword">admin</span> <span class="keyword">option</span>|<span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>with admin option：系统权限</li>
<li>with grant option：对象权限</li>
</ul>
<h2 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="授权-1"><a href="#授权-1" class="headerlink" title="授权:"></a>授权:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span></span><br></pre></td></tr></table></figure>

<p><strong>备注：</strong></p>
<ul>
<li>privileges：用户的操作权限,如 SELECT , INSERT , UPDATE 等；如果要授予所的权限则使用 ALL。</li>
<li>databasename：数据库名。</li>
<li>tablename：表名</li>
</ul>
<p>如果要授予该用户对所有数据库和表的相应操作权限则可用 <code>*</code> 表示, 如 <code>*.*</code> 。<br><em>例如：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>

<h3 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong> privilege, databasename, tablename - 同授权部分。<br><em>例如：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 假如你在给用户 <code>&#39;pig&#39;@&#39;%&#39;</code> 授权的时候是这样的（或类似的）：<code>GRANT SELECT ON test.user TO &#39;pig&#39;@&#39;%&#39;;</code> 则在使用：<code>REVOKE SELECT ON *.* FROM&#39;pig&#39;@&#39;%&#39;;</code> 命令并不能撤销该用户对 test 数据库中 user 表的 SELECT 操作；相反，如果授权使用的是：<code>GRANT SELECT ON *.* TO&#39;pig&#39;@&#39;%&#39;;</code> 则：<code>REVOKE SELECT ONtest.user FROM &#39;pig&#39;@&#39;%&#39;;</code> 命令也不能撤销该用户对 test 数据库中 user 表的 SELECT 权限。</p>
<p>具体信息可以用命令：<code>SHOW GRANTS FOR &#39;pig&#39;@&#39;%&#39;;</code> 查看。</p>
<h1 id="Oracle角色-role"><a href="#Oracle角色-role" class="headerlink" title="Oracle角色 role"></a>Oracle角色 role</h1><p>角色：权限的集合</p>
<h2 id="角色数据字典表"><a href="#角色数据字典表" class="headerlink" title="角色数据字典表"></a>角色数据字典表</h2><ul>
<li>查看当前用户中的角色：<code>user_role_privs</code></li>
<li>查看角色中的系统权限：<code>role_sys_privs</code></li>
<li>查看角色中的对象权限：<code>role_tab_privs</code></li>
</ul>
<h2 id="建一个角色"><a href="#建一个角色" class="headerlink" title="建一个角色"></a>建一个角色</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> role1;</span><br></pre></td></tr></table></figure>

<h2 id="授权给角色"><a href="#授权给角色" class="headerlink" title="授权给角色"></a>授权给角色</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">table</span>, <span class="keyword">create</span> <span class="keyword">procedure</span> <span class="keyword">to</span> role1;</span><br></pre></td></tr></table></figure>

<h2 id="授予-回收用户角色"><a href="#授予-回收用户角色" class="headerlink" title="授予/回收用户角色"></a>授予/回收用户角色</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> role1 <span class="keyword">to</span> user1;</span><br><span class="line"><span class="keyword">revoke</span> role1 <span class="keyword">from</span> user1;</span><br></pre></td></tr></table></figure>

<h2 id="创建带有口令以角色"><a href="#创建带有口令以角色" class="headerlink" title="创建带有口令以角色"></a>创建带有口令以角色</h2><p>在生效带有口令的角色时必须提供口令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> role1 <span class="keyword">identified</span> <span class="keyword">by</span> password1;</span><br></pre></td></tr></table></figure>

<h2 id="修改角色：是否需要口令"><a href="#修改角色：是否需要口令" class="headerlink" title="修改角色：是否需要口令"></a>修改角色：是否需要口令</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">role</span> role1 <span class="keyword">not</span> <span class="keyword">identified</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">role</span> role1 <span class="keyword">identified</span> <span class="keyword">by</span> password1;</span><br></pre></td></tr></table></figure>

<h2 id="设置当前用户要生效的角色"><a href="#设置当前用户要生效的角色" class="headerlink" title="设置当前用户要生效的角色"></a>设置当前用户要生效的角色</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> role1; <span class="comment">-- 使 role1 生效</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> role1, role2; <span class="comment">-- 使 role1, role2 生效</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> role1 <span class="keyword">identified</span> <span class="keyword">by</span> password1; <span class="comment">-- 使用带有口令的 role1 生效</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> <span class="keyword">all</span>; <span class="comment">-- 使用该用户的所有角色生效</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> <span class="keyword">none</span>; <span class="comment">-- 设置所有角色失效</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> <span class="keyword">all</span> <span class="keyword">except</span> role1; <span class="comment">-- 除 role1 外的该用户的所有其它角色生效</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> SESSION_ROLES; <span class="comment">-- 查看当前用户的生效的角色。</span></span><br></pre></td></tr></table></figure>

<h2 id="修改指定用户，设置其默认角色"><a href="#修改指定用户，设置其默认角色" class="headerlink" title="修改指定用户，设置其默认角色"></a>修改指定用户，设置其默认角色</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> user1 <span class="keyword">default</span> <span class="keyword">role</span> role1;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> user1 <span class="keyword">default</span> <span class="keyword">role</span> <span class="keyword">all</span> <span class="keyword">except</span> role1;</span><br></pre></td></tr></table></figure>

<h2 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">role</span> role1;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 角色删除后，原来拥用该角色的用户将失去该角色，相应的权限也将会失去。</p>
<h2 id="系统角色"><a href="#系统角色" class="headerlink" title="系统角色"></a>系统角色</h2><ul>
<li>DBA: 拥有全部特权，是系统最高权限角色</li>
<li>RESOURCE：拥有 RESOURCE 角色权限的用户只可以创建实体</li>
<li>CONNECT：拥有 CONNECT 角色权限的用户只可以登录 Oracle</li>
</ul>
<p>对于普通用户：授予 CONNECT，RESOURCE 角色权限；对于DBA管理用户：授予 CONNECT，RESOURCE， DBA 角色权限。</p>
<h1 id="查看表结构信息命令"><a href="#查看表结构信息命令" class="headerlink" title="查看表结构信息命令"></a>查看表结构信息命令</h1><h2 id="Oracle-2"><a href="#Oracle-2" class="headerlink" title="Oracle"></a>Oracle</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc(ribe) 表名; <span class="comment">-- 如：desc lxr</span></span><br></pre></td></tr></table></figure>

<h2 id="MySQL-2"><a href="#MySQL-2" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc(ribe) 表名;</span><br></pre></td></tr></table></figure>

<h1 id="显示当前登录用户"><a href="#显示当前登录用户" class="headerlink" title="显示当前登录用户"></a>显示当前登录用户</h1><h2 id="Oracle-3"><a href="#Oracle-3" class="headerlink" title="Oracle"></a>Oracle</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-3"><a href="#MySQL-3" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-查看用户下的数据库"><a href="#MySQL-查看用户下的数据库" class="headerlink" title="MySQL 查看用户下的数据库"></a>MySQL 查看用户下的数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>

<p>查看表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Oracle-用户锁定与解锁"><a href="#Oracle-用户锁定与解锁" class="headerlink" title="Oracle 用户锁定与解锁"></a>Oracle 用户锁定与解锁</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> username <span class="keyword">ACCOUNT</span> <span class="keyword">LOCK</span>; <span class="comment">-- 锁定用户</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> username <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>; <span class="comment">-- 解锁用户</span></span><br></pre></td></tr></table></figure>

<h1 id="清屏命令"><a href="#清屏命令" class="headerlink" title="清屏命令"></a>清屏命令</h1><h2 id="SQLPlus"><a href="#SQLPlus" class="headerlink" title="SQLPlus"></a>SQLPlus</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">clear screen <span class="comment">-- 简写：cl scr</span></span><br><span class="line"></span><br><span class="line">cls <span class="comment">-- dos 清屏命令</span></span><br></pre></td></tr></table></figure>

<h2 id="MySQL-4"><a href="#MySQL-4" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">system clear; <span class="comment">-- Linux 环境下</span></span><br><span class="line">system cls; <span class="comment">-- dos 环境下</span></span><br></pre></td></tr></table></figure>

<h1 id="Oracle-更改当前用户日期格式命令"><a href="#Oracle-更改当前用户日期格式命令" class="headerlink" title="Oracle 更改当前用户日期格式命令"></a>Oracle 更改当前用户日期格式命令</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">session</span> <span class="keyword">set</span> nls_date_format = <span class="string">'yyyy-mm-dd'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Oracle-中的基本数据类型"><a href="#Oracle-中的基本数据类型" class="headerlink" title="Oracle 中的基本数据类型"></a>Oracle 中的基本数据类型</h1><ul>
<li>数值：number(5,2)，int</li>
<li>字符：char，varchar2(4000)</li>
<li>日期：date</li>
<li>图片：BLOB (binaryLargeObject) 4G</li>
<li>文本：CLOB (Character LargeObject) 4G</li>
</ul>
<h1 id="Oracle-表结构操作"><a href="#Oracle-表结构操作" class="headerlink" title="Oracle 表结构操作"></a>Oracle 表结构操作</h1><h2 id="表重命名"><a href="#表重命名" class="headerlink" title="表重命名"></a>表重命名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure>

<h2 id="给表增加注释"><a href="#给表增加注释" class="headerlink" title="给表增加注释"></a>给表增加注释</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">table</span> 表名 <span class="keyword">is</span> <span class="string">'注释内容'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="添加约束方式"><a href="#添加约束方式" class="headerlink" title="添加约束方式"></a>添加约束方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 约束名 约束类型(约束的字段名);</span><br></pre></td></tr></table></figure>

<p>Constraint 约束类型：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>primary key</td>
<td>主键</td>
</tr>
<tr>
<td>unique</td>
<td>唯一</td>
</tr>
<tr>
<td>check</td>
<td>限制</td>
</tr>
<tr>
<td>not null</td>
<td>不能为null</td>
</tr>
</tbody></table>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 约束名 <span class="keyword">foreign</span> <span class="keyword">key</span>(字段名) <span class="keyword">references</span> 表名(字段名);</span><br></pre></td></tr></table></figure>

<p><strong>foreign key 外键：</strong> 参照主键中存在的值，可以插入重复的记录、可以插入重复的空值</p>
<h2 id="删除约束方式"><a href="#删除约束方式" class="headerlink" title="删除约束方式"></a>删除约束方式</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">constraint</span> 约束名;</span><br></pre></td></tr></table></figure>

<h2 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名; <span class="comment">-- 此操作属DDL，会自动提交且不可回滚</span></span><br></pre></td></tr></table></figure>

<h2 id="表中增加字段"><a href="#表中增加字段" class="headerlink" title="表中增加字段"></a>表中增加字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型;</span><br></pre></td></tr></table></figure>

<h2 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure>

<p>通常在系统不忙的时候删除不使用的字段，可以先设置字段为 unused</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test3 <span class="keyword">set</span> <span class="keyword">unused</span> <span class="keyword">column</span> address;</span><br></pre></td></tr></table></figure>

<p>再执行删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test3 <span class="keyword">unused</span> <span class="keyword">column</span>;</span><br></pre></td></tr></table></figure>

<h2 id="字段重命名"><a href="#字段重命名" class="headerlink" title="字段重命名"></a>字段重命名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">column</span> 字段名 <span class="keyword">to</span> 新字段名;</span><br></pre></td></tr></table></figure>

<h2 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 新类型;</span><br></pre></td></tr></table></figure>

<p>添加 not null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 <span class="keyword">not</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>删除 not null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Oracle-备份表"><a href="#Oracle-备份表" class="headerlink" title="Oracle 备份表"></a>Oracle 备份表</h1><h2 id="在当前的数据库之内进行备份"><a href="#在当前的数据库之内进行备份" class="headerlink" title="在当前的数据库之内进行备份"></a>在当前的数据库之内进行备份</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段) <span class="keyword">as</span> <span class="keyword">select</span> 查询语句;</span><br></pre></td></tr></table></figure>

<h2 id="数据的移动"><a href="#数据的移动" class="headerlink" title="数据的移动"></a>数据的移动</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名（字段列表）<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<h2 id="数据库服务器之间拷贝表"><a href="#数据库服务器之间拷贝表" class="headerlink" title="数据库服务器之间拷贝表"></a>数据库服务器之间拷贝表</h2><h3 id="客户端连接服务器"><a href="#客户端连接服务器" class="headerlink" title="客户端连接服务器"></a>客户端连接服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">copy from system/hhl@hhl <span class="keyword">create</span> hhl_table <span class="keyword">using</span> <span class="keyword">select</span> * <span class="keyword">from</span> scott.emp;</span><br></pre></td></tr></table></figure>

<h3 id="从A服务器拷贝到自己的数据库中"><a href="#从A服务器拷贝到自己的数据库中" class="headerlink" title="从A服务器拷贝到自己的数据库中"></a>从A服务器拷贝到自己的数据库中</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">copy from 用户名/密码@主机字符串 <span class="keyword">create</span> 表名 <span class="keyword">using</span> 查询语句;</span><br></pre></td></tr></table></figure>

<h3 id="从自己的数据库中拷贝到A服务器"><a href="#从自己的数据库中拷贝到A服务器" class="headerlink" title="从自己的数据库中拷贝到A服务器"></a>从自己的数据库中拷贝到A服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">copy to 用户用/密码@主机字符串 <span class="keyword">create</span> 表名 <span class="keyword">using</span> 查询语句;</span><br></pre></td></tr></table></figure>

<h3 id="从A服务器拷贝表到B服务器"><a href="#从A服务器拷贝表到B服务器" class="headerlink" title="从A服务器拷贝表到B服务器"></a>从A服务器拷贝表到B服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">copy from 用户用/密码@主机字符串 to 用户用/密码@主机字符串 <span class="keyword">create</span> 表名 <span class="keyword">using</span> 查询语句;</span><br></pre></td></tr></table></figure>

<h1 id="OracleDBLINK-数据库连接"><a href="#OracleDBLINK-数据库连接" class="headerlink" title="OracleDBLINK 数据库连接"></a>OracleDBLINK 数据库连接</h1><p>在当前的数据库内直接操作其他服务器中的表做增删改查，格式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">link</span> 名 <span class="keyword">connect</span> <span class="keyword">to</span> 用户名 <span class="keyword">identified</span> <span class="keyword">by</span> 密码 <span class="keyword">using</span> <span class="string">'主机字符串'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-查看数据库字符集"><a href="#MySQL-查看数据库字符集" class="headerlink" title="MySQL 查看数据库字符集"></a>MySQL 查看数据库字符集</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%collation%'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="truncate-与-delete"><a href="#truncate-与-delete" class="headerlink" title="truncate 与 delete"></a>truncate 与 delete</h1><h2 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名; <span class="comment">-- 删除表中全部记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<h2 id="truncate-与-delete-的区别"><a href="#truncate-与-delete-的区别" class="headerlink" title="truncate 与 delete 的区别"></a>truncate 与 delete 的区别</h2><ul>
<li>truncate 删除速度比 delete 删除速度快；</li>
<li>truncate 不可以回滚，delete 可以回滚。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PowerMock 进行单元测试</title>
    <url>/2017/07/25/use-introduction-of-powermock/</url>
    <content><![CDATA[<blockquote>
<p>单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。如果我们写的代码依赖于某些模块对象，而单元测试过程中这些对象又很难手动创建，或者模块还没有开发完成，那么就使用一个虚拟的对象来完成单元测试，这就是所谓的 Mock。</p>
</blockquote>
<p>Java 单元测试中比较流行的 Mock 测试框架有 <a href="http://www.jmock.org/" target="_blank" rel="noopener">jMock</a>、<a href="http://easymock.org/" target="_blank" rel="noopener">EasyMock</a>、<a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">Mockito</a>，但是这些 Mock 工具都不能 Mock <code>static</code>、<code>final</code>、<code>private</code> 方法等，而 <a href="https://github.com/powermock/powermock" target="_blank" rel="noopener">PowerMock</a> 能够做到。</p>
<p>使用 PowerMock，首先需要使用 <code>@RunWith(PowerMockRunner.class)</code> 将测试用例的 Runner 改为 <code>PowerMockRunner</code>。如果要 Mock <code>static</code>、<code>final</code>、<code>private</code> 等方法的时候，就需要加注解 <code>@PrepareForTest</code>。</p>
<p>PowerMock 有两个版本，一个是基于 EasyMock 实现的，另一个是基于 Mockito 实现的。</p>
<p>下面我将以 PowerMock 的 Mockito 的版本来讲述如何使用 PowerMock。</p>
<a id="more"></a>

<h2 id="1-普通-Mock（Mock-参数传递的对象）"><a href="#1-普通-Mock（Mock-参数传递的对象）" class="headerlink" title="1. 普通 Mock（Mock 参数传递的对象）"></a>1. 普通 Mock（Mock 参数传递的对象）</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callArgumentInstance</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallArgumentInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mock 对象，也可以使用 org.mockito.Mock 注解标记来实现</span></span><br><span class="line">        File file = PowerMockito.mock(File<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 录制 Mock 对象行为</span></span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证方法行为</span></span><br><span class="line">        Assert.assertTrue(underTest.callArgumentInstance(file));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>普通 Mock 不需要加 <code>@RunWith</code> 和 <code>@PrepareForTest</code> 注解。</p>
<h2 id="2-Mock-方法内部-new-出来的对象"><a href="#2-Mock-方法内部-new-出来的对象" class="headerlink" title="2. Mock 方法内部 new 出来的对象"></a>2. Mock 方法内部 new 出来的对象</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callInternalInstance</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上需要添加注解 @PrepareForTest，注解里写的类是需要 Mock 的 new 对象代码所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallInternalInstance</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        File file = PowerMockito.mock(File<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当以参数为 bbb 创建 File 对象的时候，返回已经 Mock 的 File 对象。</span></span><br><span class="line">        PowerMockito.whenNew(File.class).withArguments("bbb").thenReturn(file);</span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callInternalInstance(<span class="string">"bbb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Mock-普通对象的-final-方法"><a href="#3-Mock-普通对象的-final-方法" class="headerlink" title="3. Mock 普通对象的 final 方法"></a>3. Mock 普通对象的 final 方法</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callFinalMethod</span><span class="params">(ClassDependency refer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> refer.isAlive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上加注解 @PrepareForTest，注解里写的类是需要 Mock 的 final 方法所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallFinalMethod</span>() </span>&#123;</span><br><span class="line">        ClassDependency depencency = PowerMockito.mock(ClassDependency<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(depencency.isAlive()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callFinalMethod(depencency));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Mock-静态方法。"><a href="#4-Mock-静态方法。" class="headerlink" title="4. Mock 静态方法。"></a>4. Mock 静态方法。</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ClassDependency.isExist();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上加注解 @PrepareForTest，注解里写的类是需要 Mock 的 static 方法所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallStaticMethod</span>() </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示需要 Mock 这个类里的静态方法</span></span><br><span class="line">        PowerMockito.mockStatic(ClassDependency<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PowerMockito.when(ClassDependency.isExist()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callStaticMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-Mock-私有方法"><a href="#5-Mock-私有方法" class="headerlink" title="5. Mock 私有方法"></a>5. Mock 私有方法</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callPrivateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isExist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上加注解 @PrepareForTest，注解里写的类是需要 Mock 的 private 方法所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallPrivateMethod</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(underTest.callPrivateMethod()).thenCallRealMethod();</span><br><span class="line">        PowerMockito.when(underTest, <span class="string">"isExist"</span>).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callPrivateMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-Mock-JDK-中类的静态、私有方法。"><a href="#6-Mock-JDK-中类的静态、私有方法。" class="headerlink" title="6. Mock JDK 中类的静态、私有方法。"></a>6. Mock JDK 中类的静态、私有方法。</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callSystemFinalMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callSystemStaticMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.getProperty(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span></span></span><br><span class="line"><span class="class">    @<span class="title">Test</span></span></span><br><span class="line"><span class="class">    // 和 <span class="title">Mock</span> 普通对象的 <span class="title">static</span>、<span class="title">final</span> 方法一样，只不过注解 @<span class="title">PrepareForTest</span> 里写的类不一样</span></span><br><span class="line"><span class="class">  	// 注解里写的类是需要调用系统方法所在的类。</span></span><br><span class="line"><span class="class">    @<span class="title">PrepareForTest</span>(<span class="title">ClassUnderTest</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallSystemFinalMethod</span>() </span>&#123;</span><br><span class="line">        String str = PowerMockito.mock(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(str.isEmpty()).thenReturn(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertFalse(underTest.callSystemFinalMethod(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallSystemStaticMethod</span>() </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(System<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PowerMockito.when(System.getProperty(<span class="string">"aaa"</span>)).thenReturn(<span class="string">"bbb"</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="string">"bbb"</span>, underTest.callSystemStaticMethod(<span class="string">"aaa"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-Mock-依赖类中的方法（whenNew）"><a href="#7-Mock-依赖类中的方法（whenNew）" class="headerlink" title="7. Mock 依赖类中的方法（whenNew）"></a>7. Mock 依赖类中的方法（whenNew）</h2><p>测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callDependency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassDependency classDependency = <span class="keyword">new</span> ClassDependency();</span><br><span class="line">        <span class="keyword">return</span> classDependency.isGod(<span class="string">"hh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGod</span><span class="params">(String oh)</span></span>&#123;</span><br><span class="line">        System.out.println(oh);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  	<span class="comment">// 注解里写的类是依赖类所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testDependency</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line">        ClassDependency dependency = mock(ClassDependency<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        whenNew(ClassDependency<span class="class">.<span class="keyword">class</span>).<span class="title">withAnyArguments</span>().<span class="title">thenReturn</span>(<span class="title">dependency</span>)</span>;</span><br><span class="line"></span><br><span class="line">        when(dependency.isGod(anyString())).thenReturn(<span class="keyword">true</span>);</span><br><span class="line">        Assert.assertTrue(underTest.callDependency());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-完整示例代码"><a href="#8-完整示例代码" class="headerlink" title="8. 完整示例代码"></a>8. 完整示例代码</h2><h3 id="测试目标类"><a href="#测试目标类" class="headerlink" title="测试目标类"></a>测试目标类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.enncloud.ceres.powermock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lixiangrong on 2017/7/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callArgumentInstance</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callInternalInstance</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callFinalMethod</span><span class="params">(ClassDependency refer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> refer.isAlive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callSystemFinalMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ClassDependency.isExist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callSystemStaticMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.getProperty(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callPrivateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isExist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callVoidPrivateMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        testVoid();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do nothing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callDependency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassDependency classDependency = <span class="keyword">new</span> ClassDependency();</span><br><span class="line">        <span class="keyword">return</span> classDependency.isGod(<span class="string">"hh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖类"><a href="#依赖类" class="headerlink" title="依赖类"></a>依赖类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.enncloud.ceres.powermock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lixiangrong on 2017/7/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGod</span><span class="params">(String oh)</span></span>&#123;</span><br><span class="line">        System.out.println(oh);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.enncloud.ceres.powermock.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.enncloud.ceres.powermock.ClassDependency;</span><br><span class="line"><span class="keyword">import</span> cn.enncloud.ceres.powermock.ClassUnderTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.powermock.api.mockito.PowerMockito;</span><br><span class="line"><span class="keyword">import</span> org.powermock.core.classloader.annotations.PrepareForTest;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lixiangrong on 2017/7/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallArgumentInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = PowerMockito.mock(File<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callArgumentInstance(file));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallInternalInstance</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        File file = PowerMockito.mock(File<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.whenNew(File.class).withArguments("bbb").thenReturn(file);</span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callInternalInstance(<span class="string">"bbb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallFinalMethod</span>() </span>&#123;</span><br><span class="line">        ClassDependency depencency = PowerMockito.mock(ClassDependency<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(depencency.isAlive()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callFinalMethod(depencency));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallSystemFinalMethod</span>() </span>&#123;</span><br><span class="line">        String str = PowerMockito.mock(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(str.isEmpty()).thenReturn(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertFalse(underTest.callSystemFinalMethod(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallStaticMethod</span>() </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(ClassDependency<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PowerMockito.when(ClassDependency.isExist()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callStaticMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallSystemStaticMethod</span>() </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(System<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PowerMockito.when(System.getProperty(<span class="string">"aaa"</span>)).thenReturn(<span class="string">"bbb"</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="string">"bbb"</span>, underTest.callSystemStaticMethod(<span class="string">"aaa"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallPrivateMethod</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(underTest.callPrivateMethod()).thenCallRealMethod();</span><br><span class="line">        PowerMockito.when(underTest, <span class="string">"isExist"</span>).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callPrivateMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallVoidPrivateMethod</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(underTest.callVoidPrivateMethod()).thenCallRealMethod();</span><br><span class="line">        PowerMockito.doNothing().when(underTest, <span class="string">"testVoid"</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callVoidPrivateMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testDependency</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line">        ClassDependency dependency = mock(ClassDependency<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @PrepareForTest(ClassUnderTest.class)</span></span><br><span class="line">        whenNew(ClassDependency<span class="class">.<span class="keyword">class</span>).<span class="title">withAnyArguments</span>().<span class="title">thenReturn</span>(<span class="title">dependency</span>)</span>;</span><br><span class="line"></span><br><span class="line">        when(dependency.isGod(anyString())).thenReturn(<span class="keyword">true</span>);</span><br><span class="line">        Assert.assertTrue(underTest.callDependency());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-Mock-与-Spy"><a href="#9-Mock-与-Spy" class="headerlink" title="9. Mock 与 Spy"></a>9. Mock 与 Spy</h2><p>Mock 不是真实的对象，它只是用类型的 class 创建了一个虚拟对象，并可以设置对象行为<br>Spy 是一个真实的对象，但它可以设置对象行为</p>
<hr>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mock</tag>
        <tag>Mockito</tag>
        <tag>PowerMock</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo基于GitHub Pages搭建个人博客（三）</title>
    <url>/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>生命不息，折腾不休。从搭建 blog 以来，博文虽没有写几篇，但折腾的时间花了不少，走过了不少弯路，也踩过了不少的坑，虽然很懒，但本着好记性不如烂笔头的宗旨，打算在折腾记忆尚未磨灭之际记录一下走过的路和踩过的坑…</p>
</blockquote>
<p>接着前两篇使用 Hexo 基于 GitHub Pages 搭建个人博客之上，本文记录了在使用非常漂亮简洁的 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a> 主题过程中的各种折腾，其它主题的相关设置大同小异。再次衷心的感谢 Hexo 的作者和 Next 主题作者的无私奉献。</p>
<h1 id="一、主题基本配置"><a href="#一、主题基本配置" class="headerlink" title="一、主题基本配置"></a>一、主题基本配置</h1><p>记录一下 Next 主题的基本配置、设置「阅读全文」、关闭新建页面的评论功能、页面文章的篇数、宽度调节、设置「JavaScript 第三方库」等内容、在线字体替换（选择关闭，加快访问速度）</p>
<a id="more"></a>

<h2 id="1-1-主题安装"><a href="#1-1-主题安装" class="headerlink" title="1.1 主题安装"></a>1.1 主题安装</h2><p><code>Next</code> 主题安装与所有 <code>Hexo</code> 主题安装一样。当克隆或者下载（<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next主题GitHub地址</a>）完成主题文件后，拷贝至站点目录的 <code>themes</code> 目录下，一般命名为 <code>next</code>，打开<code>站点配置文件</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="1-2-Next-主题宽度调节"><a href="#1-2-Next-主题宽度调节" class="headerlink" title="1.2 Next 主题宽度调节"></a>1.2 Next 主题宽度调节</h2><p>编辑 <code>themes/next/source/css/_variables/custom.styl</code> 文件，新增变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line"><span class="variable">$content</span>-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line"><span class="variable">$content</span>-desktop-large = 900px</span><br></pre></td></tr></table></figure>

<p>以上方法不适用 <code>Pisces</code> Scheme</p>
<p><code>Pisces</code> Scheme 编辑 <code>themes/next/source/css/_schemes/Picses/_layout.styl</code> 文件，更改以下 <code>css</code> 选项定义值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>: <span class="number">1150px</span>; &#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">1150px</span>; &#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、多说评论"><a href="#二、多说评论" class="headerlink" title="二、多说评论"></a>二、多说评论</h1><h2 id="2-1-安装多说"><a href="#2-1-安装多说" class="headerlink" title="2.1 安装多说"></a>2.1 安装多说</h2><p>注册<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>，登录后在首页选择 “我要安装”。</p>
<h2 id="2-2-创建站点"><a href="#2-2-创建站点" class="headerlink" title="2.2 创建站点"></a>2.2 创建站点</h2><p>按要求填写如下图所示表单：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/duoshuo-create-site.png" alt="enter description here"></p>
<p><strong>注意：</strong> <code>多说域名</code> 这一栏填写的即是你的 <code>duoshuo_shortname</code>，在下一步主题配置中需要使用到。</p>
<h2 id="2-3-主题配置多说"><a href="#2-3-主题配置多说" class="headerlink" title="2.3 主题配置多说"></a>2.3 主题配置多说</h2><p>创建站点完成后，在 <code>主题配置文件</code> 中新增 <code>duoshuo_shortname</code> 字段，值设置成上一步创建站点中填写的 <code>多说域名</code> 即可。</p>
<h2 id="2-4-开启多说热评文章"><a href="#2-4-开启多说热评文章" class="headerlink" title="2.4 开启多说热评文章"></a>2.4 开启多说热评文章</h2><p>在 <code>主题配置文件</code> 中，设置 <code>duoshuo_hotartical</code> 配置项的值为 <code>true</code>，即可开启多说热评文章。</p>
<h2 id="2-5-多说评论样式调整"><a href="#2-5-多说评论样式调整" class="headerlink" title="2.5 多说评论样式调整"></a>2.5 多说评论样式调整</h2><p>登录<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>后，在首页右上角点击“后台管理”，选择站点名称打开多说后台管理页面，选择“设置”下拉找到“自定义CSS”输入框，填写以下<code>CSS</code>样式，效果参考本站文章结尾评论样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*-------------访客底部----------------*&#x2F;</span><br><span class="line">.ds-recent-visitors &#123;</span><br><span class="line">    margin-bottom: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 768px) &#123;</span><br><span class="line">    .ds-recent-visitors &#123;</span><br><span class="line">        margin-bottom: 440px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*-------------非圆角----------------*&#x2F;</span><br><span class="line">#ds-reset .ds-rounded &#123;</span><br><span class="line">    border-radius: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.theme-next #ds-thread #ds-reset .ds-textarea-wrapper &#123;</span><br><span class="line">    border-top-right-radius: 0px;</span><br><span class="line">    border-top-left-radius: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.theme-next #ds-thread #ds-reset .ds-post-button &#123;</span><br><span class="line">    border-radius: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ds-post-self xmp &#123;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*-------------访客----------------*&#x2F;</span><br><span class="line">#ds-reset .ds-avatar img,</span><br><span class="line">#ds-recent-visitors .ds-avatar img &#123;</span><br><span class="line">    width: 54px;</span><br><span class="line">    height: 54px; &#x2F;*设置图像的长和宽，这里要根据自己的评论框情况更改*&#x2F;</span><br><span class="line">    border-radius: 27px; &#x2F;*设置图像圆角效果,在这里我直接设置了超过width&#x2F;2的像素，即为圆形了*&#x2F;</span><br><span class="line">    -webkit-border-radius: 27px; &#x2F;*圆角效果：兼容webkit浏览器*&#x2F;</span><br><span class="line">    -moz-border-radius: 27px;</span><br><span class="line">    box-shadow: inset 0 -1px 0 #3333sf; &#x2F;*设置图像阴影效果*&#x2F;</span><br><span class="line">    -webkit-box-shadow: inset 0 -1px 0 #3333sf;</span><br><span class="line">    -webkit-transition: 0.4s;</span><br><span class="line">    -webkit-transition: -webkit-transform 0.4s ease-out;</span><br><span class="line">    transition: transform 0.4s ease-out; &#x2F;*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*&#x2F;</span><br><span class="line">    -moz-transition: -moz-transform 0.4s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*-------------访客悬浮在头像----------------*&#x2F;</span><br><span class="line">#ds-reset .ds-avatar img:hover,</span><br><span class="line">#ds-recent-visitors .ds-avatar img:hover &#123;</span><br><span class="line">    box-shadow: 0 0 10px #fff;</span><br><span class="line">rgba(255, 255, 255, .6), inset 0 0 20 px rgba(255, 255, 255, 1);</span><br><span class="line">    -webkit-box-shadow: 0 0 10px #fff;</span><br><span class="line">rgba(255, 255, 255, .6), inset 0 0 20 px rgba(255, 255, 255, 1);</span><br><span class="line">    transform: rotateZ(360deg); &#x2F;*图像旋转360度*&#x2F;</span><br><span class="line">    -webkit-transform: rotateZ(360deg);</span><br><span class="line">    -moz-transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#ds-thread #ds-reset .ds-textarea-wrapper textarea &#123;</span><br><span class="line">    background: url(http:&#x2F;&#x2F;ww4.sinaimg.cn&#x2F;small&#x2F;649a4735gw1et7gnhy5fej20zk0m8q3q.jpg) right no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#ds-recent-visitors .ds-avatar &#123;</span><br><span class="line">    float: left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*-------------隐藏版权----------------*&#x2F;</span><br><span class="line">#ds-thread #ds-reset .ds-powered-by &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、统计"><a href="#三、统计" class="headerlink" title="三、统计"></a>三、统计</h1><p>我使用 <code>LeanCloud</code> 统计文章阅读数，使用不蒜子统计站点的 <code>PV</code> 和 <code>UV</code> 数。</p>
<h2 id="3-1-文章阅读次数统计（LeanCloud"><a href="#3-1-文章阅读次数统计（LeanCloud" class="headerlink" title="3.1 文章阅读次数统计（LeanCloud)"></a>3.1 文章阅读次数统计（LeanCloud)</h2><p>参考<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></p>
<h2 id="3-2-不蒜子统计站点访问统计"><a href="#3-2-不蒜子统计站点访问统计" class="headerlink" title="3.2 不蒜子统计站点访问统计"></a>3.2 不蒜子统计站点访问统计</h2><p>编辑 <code>主题配置文件</code> 中的 <code>busuanzi_count</code> 的配置项，配置以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># custom uv span for the whole site</span></span><br><span class="line">site_uv: <span class="literal">true</span></span><br><span class="line">site_uv_header: &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span><br><span class="line">site_uv_footer:</span><br><span class="line"></span><br><span class="line"><span class="comment"># custom pv span for the whole site</span></span><br><span class="line">site_pv: <span class="literal">true</span></span><br><span class="line">site_pv_header: &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">site_pv_footer:</span><br><span class="line"></span><br><span class="line"><span class="comment"># custom pv span for one page only</span></span><br><span class="line">page_pv: <span class="literal">false</span></span><br><span class="line">page_pv_header: &lt;i class=<span class="string">"fa fa-file-o"</span>&gt;&lt;/i&gt;</span><br><span class="line">page_pv_footer:</span><br></pre></td></tr></table></figure>

<p><code>site/page_pv/uv_header</code> 和 <code>site/page_pv/uv_footer</code> 为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。</p>
<h1 id="四、设置-RSS"><a href="#四、设置-RSS" class="headerlink" title="四、设置 RSS"></a>四、设置 RSS</h1><h2 id="4-1-安装-hexo-generator-feed"><a href="#4-1-安装-hexo-generator-feed" class="headerlink" title="4.1 安装 hexo-generator-feed"></a>4.1 安装 <code>hexo-generator-feed</code></h2><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<h2 id="4-2-启用-RSS"><a href="#4-2-启用-RSS" class="headerlink" title="4.2 启用 RSS"></a>4.2 启用 RSS</h2><p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RSS订阅支持</span></span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line"><span class="comment"># Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line"><span class="built_in">type</span>: atom</span><br><span class="line">path: atom.xml</span><br><span class="line"><span class="built_in">limit</span>: 20</span><br></pre></td></tr></table></figure>

<h1 id="五、内容分享"><a href="#五、内容分享" class="headerlink" title="五、内容分享"></a>五、内容分享</h1><p>使用 JiaThis 作为内容分享服务，具体步骤如下：</p>
<p>编辑 <code>站点配置文件</code>， 添加字段 <code>jiathis</code>，值为 <code>true</code> 即可。</p>
<h1 id="六、搜索服务"><a href="#六、搜索服务" class="headerlink" title="六、搜索服务"></a>六、搜索服务</h1><h2 id="6-1-安装-hexo-generator-search"><a href="#6-1-安装-hexo-generator-search" class="headerlink" title="6.1 安装 hexo-generator-search"></a><del>6.1 安装 <code>hexo-generator-search</code></del></h2><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<h2 id="6-2-启用搜索"><a href="#6-2-启用搜索" class="headerlink" title="6.2 启用搜索"></a><del>6.2 启用搜索</del></h2><p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装-hexo-generator-searchdb"><a href="#6-3-安装-hexo-generator-searchdb" class="headerlink" title="6.3 安装 hexo-generator-searchdb"></a>6.3 安装 <a href="https://www.npmjs.com/package/hexo-generator-searchdb" target="_blank" rel="noopener"><code>hexo-generator-searchdb</code></a></h2><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h2 id="6-4-启用搜索"><a href="#6-4-启用搜索" class="headerlink" title="6.4 启用搜索"></a>6.4 启用搜索</h2><p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<h1 id="七、背景效果"><a href="#七、背景效果" class="headerlink" title="七、背景效果"></a>七、背景效果</h1><p>介绍博客背景动态效果图和点击小红心效果的相关设置。</p>
<h2 id="7-1-添加-JS-文件"><a href="#7-1-添加-JS-文件" class="headerlink" title="7.1 添加 JS 文件"></a>7.1 添加 JS 文件</h2><p>把 js 文件 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a> 和 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 放在<code>\themes\next\source\js\src</code>文件目录下。</p>
<h2 id="7-2-引用添加的-JS-文件"><a href="#7-2-引用添加的-JS-文件" class="headerlink" title="7.2 引用添加的 JS 文件"></a>7.2 引用添加的 JS 文件</h2><p>更新<code>\themes\next\layout\_layout.swig</code>文件，在<code>末尾</code>（在前面引用会出现找不到的bug）添加以下 js 引入代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="八、图片模式"><a href="#八、图片模式" class="headerlink" title="八、图片模式"></a>八、图片模式</h1><h2 id="8-1-新建博文"><a href="#8-1-新建博文" class="headerlink" title="8.1 新建博文"></a>8.1 新建博文</h2><p>新建博文，设置<code>type: &quot;picture&quot;</code>，使用<code>{\% gp x-x \%} ... {\% endgp \%}</code>标签引用要展示的图片地址，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Naruto-Pictures</span><br><span class="line">categories: [图片]</span><br><span class="line">tags: [picture,naruto]</span><br><span class="line">date: 2016-09-02 14:36:04</span><br><span class="line">keywords: picture,naruto</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"picture"</span></span><br><span class="line">top: 999</span><br><span class="line">---</span><br><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cice6j218g0p0zpv.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7ch9rvj218g0p0jvi.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cj8xej218g0p0gqw.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cg745j218g0p0juj.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1flxx7cgf88j218g0p0ju3.jpg)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-图片展示效果"><a href="#8-2-图片展示效果" class="headerlink" title="8.2 图片展示效果"></a>8.2 图片展示效果</h2><p><code>{\% gp 5-3 \%}</code>：设置图片展示效果，参考 <code>theme/next/scripts/tags/group-pictures.js</code> 注释示意图。</p>
<h2 id="8-3-修复图片展示"><a href="#8-3-修复图片展示" class="headerlink" title="8.3 修复图片展示"></a>8.3 修复图片展示</h2><p>主题目前首页可以正常显示步骤 8.2 设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 <code>themes\next\source\css\_common\components\tags\group-pictures.styl</code> 中的以下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-post-detail</span> <span class="selector-class">.post-body</span> <span class="selector-class">.group-picture-column</span> &#123;</span><br><span class="line">  // float: none;</span><br><span class="line">  <span class="selector-tag">margin-top</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  // width: auto !important;</span><br><span class="line">  <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="九、博文压缩"><a href="#九、博文压缩" class="headerlink" title="九、博文压缩"></a>九、博文压缩</h1><p>目前知道的有两个插件可以压缩博文，<code>hexo-all-minifier</code> 插件和 <code>gulp</code> 插件。<code>hexo-all-minifier</code> 插件虽然使用比较简单，而且可以压缩图片，但是发现对文章缩进（输入法全拼模式下按 <code>Tab</code>）不支持，所以暂时使用第二种压缩手段。</p>
<h2 id="9-1-hexo-all-minifier-配置使用"><a href="#9-1-hexo-all-minifier-配置使用" class="headerlink" title="9.1 hexo-all-minifier 配置使用"></a>9.1 <code>hexo-all-minifier</code> 配置使用</h2><p>安装 <code>hexo-all-minifier</code>，在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>

<p><code>hexo g</code> 生产博文的时候就会自动压缩 HTML、JS、图片，详情参考<a href="https://github.com/unhealthy/hexo-all-minifier" target="_blank" rel="noopener">插件介绍</a></p>
<h2 id="9-2-gulp-插件配置使用"><a href="#9-2-gulp-插件配置使用" class="headerlink" title="9.2 gulp 插件配置使用"></a>9.2 <code>gulp</code> 插件配置使用</h2><p><code>hexo</code> 依赖 <code>gulp</code> 插件安装，在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>

<p>在 <code>package.json</code> 同级目录下，新建 <code>gulpfile.js</code> 并填入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 <code>public</code> 目录中的静态资源文件进行压缩。</p>
<h1 id="十、博文置顶"><a href="#十、博文置顶" class="headerlink" title="十、博文置顶"></a>十、博文置顶</h1><h2 id="10-1-修改-hexo-generator-index-插件"><a href="#10-1-修改-hexo-generator-index-插件" class="headerlink" title="10.1 修改 hexo-generator-index 插件"></a>10.1 修改 <code>hexo-generator-index</code> 插件</h2><p>替换文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 为：<a href="https://github.com/ehlxr/useful-code/blob/master/resources/generator.js" target="_blank" rel="noopener">generator.js</a></p>
<h2 id="10-2-设置文章置顶"><a href="#10-2-设置文章置顶" class="headerlink" title="10.2 设置文章置顶"></a>10.2 设置文章置顶</h2><p>在文章 <code>Front-matter</code> 中添加 <code>top</code> 值，数值越大文章越靠前，如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Naruto 图集</span><br><span class="line">categories: [图片]</span><br><span class="line">tags: [picture,naruto]</span><br><span class="line">date: <span class="number">2016</span>-<span class="number">09</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">36</span>:<span class="number">04</span></span><br><span class="line">keywords: picture,naruto</span><br><span class="line">type: <span class="string">"picture"</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">10</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="十一、头像圆形旋转"><a href="#十一、头像圆形旋转" class="headerlink" title="十一、头像圆形旋转"></a>十一、头像圆形旋转</h1><p>介绍一下实现头像圆形，鼠标经过旋转或者一直让旋转效果，主要是修改 Hexo 目录下 <code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code> 文件。</p>
<h2 id="11-1-头像圆形修改"><a href="#11-1-头像圆形修改" class="headerlink" title="11.1 头像圆形修改"></a>11.1 头像圆形修改</h2><p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*头像圆形*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-2-鼠标经过旋转修改"><a href="#11-2-鼠标经过旋转修改" class="headerlink" title="11.2 鼠标经过旋转修改"></a>11.2 鼠标经过旋转修改</h2><p>修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-3-头像循环旋转效果修改"><a href="#11-3-头像循环旋转效果修改" class="headerlink" title="11.3 头像循环旋转效果修改"></a>11.3 头像循环旋转效果修改</h2><p>修改 <code>sidebar-author.styl</code> 文件，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒</span></span><br><span class="line"><span class="comment">    动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度</span></span><br><span class="line"><span class="comment">  -webkit-transition: -webkit-transform 1.5s ease-out;</span></span><br><span class="line"><span class="comment">  -moz-transition: -moz-transform 1.5s ease-out;</span></span><br><span class="line"><span class="comment">  transition: transform 1.5s ease-out;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>鼠标经过停止头像旋转：修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation-play-state</span>:paused;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度</span></span><br><span class="line"><span class="comment">  -webkit-transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  -moz-transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  transform: rotateZ(360deg);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整 sidebar-author.styl 文件<a href="https://github.com/ehlxr/useful-code/blob/master/resources/sidebar-author.styl" target="_blank" rel="noopener">参考地址</a>。</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈分布式事务</title>
    <url>/2019/01/25/distributed-system-transaction/</url>
    <content><![CDATA[<p>通俗的理解，事务是一组原子操作单元。我们希望一些列的操作能够全部正确执行，如果这一组操作中的任意一个步骤发生错误，那么就需要回滚之前已经完成的操作。也就是同一个事务中的所有操作，要么全都正确执行，要么全都不要执行。</p>
<p>传统的单机应用系统一般使用一个关系型数据库，利用数据库事务来保证数据的一致性，下面先了解一下本地数据库事务的一些特性。</p>
<h2 id="一、本地数据库事务"><a href="#一、本地数据库事务" class="headerlink" title="一、本地数据库事务"></a>一、本地数据库事务</h2><p>事务从数据库角度说，就是一组 <code>SQL</code> 指令，要么全部执行成功，若因为某个原因其中一条指令执行有错误，则撤销先前执行过的所有指令。</p>
<p>关系型数据库（例如：<code>MySQL</code>、<code>SQL Server</code>、<code>Oracle</code> 等）事务都有以下几个特性：<strong>原子性</strong>（<code>Atomicity</code>）、<strong>一致性</strong>（<code>Consistency</code>）、<strong>隔离性或独立性</strong>（<code>Isolation</code>）<strong>和持久性</strong>（<code>Durabilily</code>），简称就是 <strong>ACID</strong>。</p>
<ul>
<li><strong>原子性</strong>：表示事务执行过程中的任何失败都将导致事务所做的任何修改失效。</li>
<li><strong>一致性</strong>：表示当事务执行失败时，所有被该事务影响的数据都应该恢复到事务执行前的状态。</li>
<li><strong>隔离性</strong>：表示在事务执行过程中对数据的修改，在事务提交之前对其他事务不可见。</li>
<li><strong>持久性</strong>：表示已提交的数据在事务执行失败时，数据的状态都应该正确。</li>
</ul>
<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/acid.jpg" alt=""></p>
<p>数据库事务操作也比较简单：开始一个事务，改变（插入，删除，更新）很多行，然后提交事务（如果有异常时回滚事务）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">​    <span class="comment">// 工具类得到 connection 对象</span></span><br><span class="line">​    con = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 关闭自动提交，开启事务</span></span><br><span class="line">​    con.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 增、删、改 等操作</span></span><br><span class="line">​    ...</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 成功操作后提交事务</span></span><br><span class="line">​    con.commit();</span><br><span class="line">​    con.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line">​        <span class="comment">// 如果有异常时回滚事务</span></span><br><span class="line">​        con.rollback();</span><br><span class="line">​        con.close();</span><br><span class="line">​    &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">​        e1.printStackTrace();</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更进一步，借助开发平台中的数据访问技术和框架（如：<code>Spring</code>），我们需要做的事情更少，只需要关注数据本身的改变。</p>
<p>随着组织规模不断扩大，业务量不断增长，单机应用和数据库已经不足以支持庞大的业务量和数据量，这个时候需要对应用和数据库进行拆分，就出现了一个应用需要同时访问两个或两个以上的数据库情况。开始我们用分布式事务来保证一致性。</p>
<h2 id="二、分布式事务理论"><a href="#二、分布式事务理论" class="headerlink" title="二、分布式事务理论"></a>二、分布式事务理论</h2><h3 id="2-1-CAP-定理"><a href="#2-1-CAP-定理" class="headerlink" title="2.1 CAP 定理"></a>2.1 CAP 定理</h3><p><code>CAP</code> 定理是由加州大学伯克利分校 <code>Eric Brewer</code> 教授提出来的，他指出 <code>WEB</code> 服务无法同时满足以下 <code>3</code> 个属性：</p>
<ul>
<li><strong>一致性（Consistency）</strong>： 客户端知道一系列的操作都会同时发生（生效）</li>
<li><strong>可用性（Availability）</strong>：每个操作都必须以可预期的响应结束</li>
<li><strong>分区容错性（Partition tolerance）</strong>：即使出现单个组件无法可用, 操作依然可以完成</li>
</ul>
<p><code>CAP</code> 理论告诉我们，在分布式系统中，<strong>C、A、P</strong> 三个条件中我们最多只能选择两个。那么问题来了，究竟选择哪两个条件较为合适呢？</p>
<p>对于一个业务系统来说，可用性和分区容错性是必须要满足的两个条件，并且这两者是相辅相成的。业务系统之所以使用分布式系统，主要原因有两个：</p>
<ul>
<li>提升整体性能：当业务量猛增，单个服务器已经无法满足我们的业务需求的时候，就需要使用分布式系统，使用多个节点提供相同的功能，从而整体上提升系统的性能，这就是使用分布式系统的第一个原因。</li>
<li>实现分区容错性：单一节点或多个节点处于相同的网络环境下，那么会存在一定的风险，万一该机房断电、该地区发生自然灾害，那么业务系统就全面瘫痪了。为了防止这一问题，采用分布式系统，将多个子系统分布在不同的地域、不同的机房中，从而保证系统高可用性。</li>
</ul>
<p>这说明分区容错性是分布式系统的根本，如果分区容错性不能满足，那使用分布式系统将失去意义。</p>
<p>此外，可用性对业务系统也尤为重要。在大谈用户体验的今天，如果业务系统时常出现 “系统异常”、响应时间过长等情况，这使得用户对系统的好感度大打折扣，在互联网行业竞争激烈的今天，相同领域的竞争者不甚枚举，系统的间歇性不可用会立马导致用户流向竞争对手。因此，我们只能通过牺牲一致性来换取系统的<strong>可用性（A）</strong>和<strong>分区容错性（P）</strong>。这也就是下面要介绍的 <code>BASE</code> 理论。</p>
<h3 id="2-2-BASE-理论"><a href="#2-2-BASE-理论" class="headerlink" title="2.2 BASE 理论"></a>2.2 BASE 理论</h3><p><code>CAP</code> 理论告诉我们一个悲惨但不得不接受的事实——我们只能在 <strong>C、A、P</strong> 中选择两个条件。而对于业务系统而言，我们往往选择牺牲一致性来换取系统的可用性和分区容错性。不过这里要指出的是，所谓的 “牺牲一致性” 并不是完全放弃数据一致性，而是牺牲强一致性换取弱一致性。下面来介绍下 <code>BASE</code> 理论。</p>
<ul>
<li><strong>Basically Available（基本可用）</strong>整个系统在某些不可抗力的情况下，仍然能够保证 “可用性”，即一定时间内仍然能够返回一个明确的结果。</li>
<li><strong>Soft state（软状态）</strong>同一数据的不同副本的状态，可以不需要实时一致。</li>
<li><strong>Eventually Consistent（最终一致性）</strong>同一数据的不同副本的状态，可以不需要实时一致，但一定要保证经过一定时间后仍然是一致的。</li>
</ul>
<p><code>BASE</code> 理论是对 <code>CAP</code> 中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：<strong><em>我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性</em></strong>（<code>Eventual Consistency</code>）。</p>
<p>有了以上理论之后，我们来看一下分布式事务的解决方案。</p>
<h2 id="三、分布式事务"><a href="#三、分布式事务" class="headerlink" title="三、分布式事务"></a>三、分布式事务</h2><h3 id="3-1-两阶段提交（2PC）"><a href="#3-1-两阶段提交（2PC）" class="headerlink" title="3.1 两阶段提交（2PC）"></a>3.1 两阶段提交（2PC）</h3><p>两阶段提交协议（Two-phase Commit，2PC）经常被用来实现分布式事务。一般分为<code>协调器</code>和若干<code>事务执行者</code>两种角色，这里的事务执行者就是具体的数据库，抽象点可以说是可以控制数据库的程序。 协调器可以和事务执行器在一台机器上。</p>
<p>在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的 <code>ACID</code> 特性，需要引入一个作为协调者的组件来统一掌控所有节点 (称作参与者)。</p>
<p>图示从支付宝向余额宝转账是怎样保证一致性的</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1g10y9di2gxj20l908xta6.jpg" alt=""></p>
<ol>
<li>用户发起转账申请，首先到事务协调器</li>
<li>事务协调器通知（prepare）支付宝扣款，同时通知余额宝收款</li>
<li>支付宝、余额宝分别执行扣款、收款业务操作，本地事务不提交。并且把执行结果反馈给事务协调器，成功反馈 yes，失败反馈 no</li>
<li>事务协调器收到支付宝和余额宝的反馈如果都是 yes，则通知支付宝和余额宝系统提交事务（commit），否则通知回顾事务（abort）</li>
<li>事务协调器、支付宝和余额宝在整个过程收到通知都要记录日志（log），类似日常生活中的凭证。如果某个节点宕机，可以保证从日志中恢复后续操作。</li>
</ol>
<p>两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。</p>
<p><strong>优点：</strong> 尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能 <code>100%</code> 保证强一致）<br><strong>缺点：</strong> 涉及多次节点间的网络通信时，牺牲了可用性，对性能影响较大，不适合高并发高性能场景，如果分布式系统跨接口调用。</p>
<h3 id="3-2-补偿事务（TCC）"><a href="#3-2-补偿事务（TCC）" class="headerlink" title="3.2 补偿事务（TCC）"></a>3.2 补偿事务（TCC）</h3><p><code>TCC</code> 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p>
<ul>
<li><strong>Try 阶段</strong>：主要是对业务系统做检测及资源预留</li>
<li><strong>Confirm 阶段</strong>：主要是对业务系统做确认提交，<code>Try</code> 阶段执行成功并开始执行 <code>Confirm</code> 阶段时，默认 <code>Confirm</code> 阶段是不会出错的。即：只要 <code>Try</code> 成功，<code>Confirm</code> 一定成功。</li>
<li><strong>Cancel 阶段</strong>：主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</li>
</ul>
<p>举个例子，假如 <code>Bob</code> 要向 <code>Smith</code> 转账，思路大概是：</p>
<p>我们有一个本地方法，里面依次调用</p>
<ol>
<li>首先在 <code>Try</code> 阶段，要先调用远程接口把 <code>Smith</code> 和 <code>Bob</code> 的钱给冻结起来。</li>
<li>在 <code>Confirm</code> 阶段，执行远程调用的转账的操作，转账成功进行解冻。</li>
<li>如果第 2 步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法（<code>Cancel</code>）。</li>
</ol>
<p><strong>优点：</strong> 跟 <code>2PC</code> 比起来，实现以及流程相对简单了一些，但数据的一致性比 <code>2PC</code> 也要差一些</p>
<p><strong>缺点：</strong> 缺点还是比较明显的，在 <code>2</code>、<code>3</code> 步中都有可能失败。<code>TCC</code> 属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用 <code>TCC</code> 不太好定义及处理。</p>
<h3 id="3-3-分布式事务框架"><a href="#3-3-分布式事务框架" class="headerlink" title="3.3 分布式事务框架"></a>3.3 分布式事务框架</h3><p>常用开源的分布式事务框架：</p>
<ul>
<li>阿里巴巴开源的分布式事务解决方案 <a href="https://github.com/seata/seata" target="_blank" rel="noopener">Seata</a></li>
<li>一款事务协调性框架 <a href="https://github.com/codingapi/tx-lcn" target="_blank" rel="noopener">TX-LCN</a></li>
<li>强一致分布式事务框架 <a href="https://github.com/dromara/raincat" target="_blank" rel="noopener">Raincat</a></li>
<li>提供柔性事务的支持，包含 TCC, TAC(自动生成回滚 SQL) 方案 <a href="https://github.com/dromara/hmily" target="_blank" rel="noopener">Hmily</a></li>
<li>TCC 型事务 java 实现 <a href="https://github.com/changmingxie/tcc-transaction" target="_blank" rel="noopener">tcc-transaction</a></li>
<li>基于事务管理器（TransactionManager）实现的 TCC 全局事务 <a href="https://github.com/liuyangming/ByteTCC" target="_blank" rel="noopener">ByteTCC</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>事务</tag>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Go Cheat Sheet</title>
    <url>/2017/08/24/golang-cheat-sheet/</url>
    <content><![CDATA[<h1 id="Go-Cheat-Sheet"><a href="#Go-Cheat-Sheet" class="headerlink" title="Go Cheat Sheet"></a>Go Cheat Sheet</h1><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>Most example code taken from <a href="http://tour.golang.org/" target="_blank" rel="noopener">A Tour of Go</a>, which is an excellent introduction to Go.<br>If you’re new to Go, do that tour. Seriously.</p>
<h2 id="Go-in-a-Nutshell"><a href="#Go-in-a-Nutshell" class="headerlink" title="Go in a Nutshell"></a>Go in a Nutshell</h2><ul>
<li>Imperative language</li>
<li>Statically typed</li>
<li>Syntax tokens similar to C (but less parentheses and no semicolons) and the structure to Oberon-2</li>
<li>Compiles to native code (no JVM)</li>
<li>No classes, but structs with methods</li>
<li>Interfaces</li>
<li>No implementation inheritance. There’s <a href="http://golang.org/doc/effective%5Fgo.html#embedding" target="_blank" rel="noopener">type embedding</a>, though.</li>
<li>Functions are first class citizens</li>
<li>Functions can return multiple values</li>
<li>Has closures</li>
<li>Pointers, but not pointer arithmetic</li>
<li>Built-in concurrency primitives: Goroutines and Channels</li>
</ul>
<a id="more"></a>
<h1 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>File <code>hello.go</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Go"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$ go run hello.go</code></p>
<h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>addition</td>
</tr>
<tr>
<td><code>-</code></td>
<td>subtraction</td>
</tr>
<tr>
<td><code>*</code></td>
<td>multiplication</td>
</tr>
<tr>
<td><code>/</code></td>
<td>quotient</td>
</tr>
<tr>
<td><code>%</code></td>
<td>remainder</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>bitwise and</td>
</tr>
<tr>
<td><code>?</code></td>
<td>bitwise or</td>
</tr>
<tr>
<td><code>^</code></td>
<td>bitwise xor</td>
</tr>
<tr>
<td><code>&amp;^</code></td>
<td>bit clear (and not)</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>left shift</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>right shift</td>
</tr>
</tbody></table>
<blockquote>
<p><code>?</code> -&gt; <code>|</code></p>
</blockquote>
<h3 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h3><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>==</code></td>
<td>equal</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>not equal</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>less than</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>less than or equal</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>greater than</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>greater than or equal</td>
</tr>
</tbody></table>
<h3 id="Logical"><a href="#Logical" class="headerlink" title="Logical"></a>Logical</h3><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&amp;&amp;</code></td>
<td>logical and</td>
</tr>
<tr>
<td><code>??</code></td>
<td>logical or</td>
</tr>
<tr>
<td><code>!</code></td>
<td>logical not</td>
</tr>
</tbody></table>
<blockquote>
<p><code>??</code> -&gt; <code>||</code></p>
</blockquote>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&amp;</code></td>
<td>address of / create pointer</td>
</tr>
<tr>
<td><code>*</code></td>
<td>dereference pointer</td>
</tr>
<tr>
<td><code>&lt;-</code></td>
<td>send / receive operator (see ‘Channels’ below)</td>
</tr>
</tbody></table>
<h2 id="Declarations"><a href="#Declarations" class="headerlink" title="Declarations"></a>Declarations</h2><p>Type goes after identifier!</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo <span class="keyword">int</span> <span class="comment">// declaration without initialization</span></span><br><span class="line"><span class="keyword">var</span> foo <span class="keyword">int</span> = <span class="number">42</span> <span class="comment">// declaration with initialization</span></span><br><span class="line"><span class="keyword">var</span> foo, bar <span class="keyword">int</span> = <span class="number">42</span>, <span class="number">1302</span> <span class="comment">// declare and init multiple vars at once</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">42</span> <span class="comment">// type omitted, will be inferred</span></span><br><span class="line">foo := <span class="number">42</span> <span class="comment">// shorthand, only in func bodies, omit var keyword, type is always implicit</span></span><br><span class="line"><span class="keyword">const</span> constant = <span class="string">"This is a constant"</span></span><br></pre></td></tr></table></figure>

<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a simple function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function with parameters (again, types go after identifiers)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(param1 <span class="keyword">string</span>, param2 <span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiple parameters of the same type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(param1, param2 <span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return type declaration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can return multiple values at once</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnMulti</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>, <span class="string">"foobar"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, str = returnMulti()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return multiple named results simply by return</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnMulti2</span><span class="params">()</span> <span class="params">(n <span class="keyword">int</span>, s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    n = <span class="number">42</span></span><br><span class="line">    s = <span class="string">"foobar"</span></span><br><span class="line">    <span class="comment">// n and s will be returned</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, str = returnMulti2()</span><br></pre></td></tr></table></figure>

<h3 id="Functions-As-Values-And-Closures"><a href="#Functions-As-Values-And-Closures" class="headerlink" title="Functions As Values And Closures"></a>Functions As Values And Closures</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// assign a function to a name</span></span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// use the name to call the function</span></span><br><span class="line">    fmt.Println(add(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Closures, lexically scoped: Functions can access values that were</span></span><br><span class="line"><span class="comment">// in scope when defining the function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scope</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    outer_var := <span class="number">2</span></span><br><span class="line">    foo := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> outer_var&#125;</span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">another_scope</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="comment">// won't compile because outer_var and foo not defined in this scope</span></span><br><span class="line">    outer_var = <span class="number">444</span></span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Closures: don't mutate outer vars, instead redefine them!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">outer</span><span class="params">()</span> <span class="params">(<span class="keyword">func</span>()</span> <span class="title">int</span>, <span class="title">int</span>)</span> &#123;</span><br><span class="line">    outer_var := <span class="number">2</span></span><br><span class="line">    inner := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        outer_var += <span class="number">99</span> <span class="comment">// attempt to mutate outer_var from outer scope</span></span><br><span class="line">        <span class="keyword">return</span> outer_var <span class="comment">// =&gt; 101 (but outer_var is a newly redefined</span></span><br><span class="line">                         <span class="comment">//         variable visible only inside inner)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner, outer_var <span class="comment">// =&gt; 101, 2 (outer_var is still 2, not mutated by foo!)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Variadic-Functions"><a href="#Variadic-Functions" class="headerlink" title="Variadic Functions"></a>Variadic Functions</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(adder(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) 	<span class="comment">// 6</span></span><br><span class="line">	fmt.Println(adder(<span class="number">9</span>, <span class="number">9</span>))	<span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line">	fmt.Println(adder(nums...))	<span class="comment">// 60</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By using ... before the type name of the last parameter you can indicate that it takes zero or more of those parameters.</span></span><br><span class="line"><span class="comment">// The function is invoked like any other function except we can pass as many arguments as we want.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(args ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	total := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123; <span class="comment">// Iterates over the arguments whatever the number.</span></span><br><span class="line">		total += v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Built-in-Types"><a href="#Built-in-Types" class="headerlink" title="Built-in Types"></a>Built-in Types</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool</span><br><span class="line"></span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">int  int8  int16  int32  int64</span><br><span class="line">uint uint8 uint16 uint32 uint64 uintptr</span><br><span class="line"></span><br><span class="line">byte &#x2F;&#x2F; alias for uint8</span><br><span class="line"></span><br><span class="line">rune &#x2F;&#x2F; alias for int32 ~&#x3D; a character (Unicode code point) - very Viking</span><br><span class="line"></span><br><span class="line">float32 float64</span><br><span class="line"></span><br><span class="line">complex64 complex128</span><br></pre></td></tr></table></figure>

<h2 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternative syntax</span></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="keyword">float64</span>(i)</span><br><span class="line">u := <span class="keyword">uint</span>(f)</span><br></pre></td></tr></table></figure>

<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ul>
<li>Package declaration at top of every source file</li>
<li>Executables are in package <code>main</code></li>
<li>Convention: package name == last name of import path (import path <code>math/rand</code> =&gt; package <code>rand</code>)</li>
<li>Upper case identifier: exported (visible from other packages)</li>
<li>Lower case identifier: private (not visible from other packages)</li>
</ul>
<h2 id="Control-structures"><a href="#Control-structures" class="headerlink" title="Control structures"></a>Control structures</h2><h3 id="If"><a href="#If" class="headerlink" title="If"></a>If</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Basic one</span></span><br><span class="line">	<span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -x</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// You can put one statement before the condition</span></span><br><span class="line">	<span class="keyword">if</span> a := b + c; a &lt; <span class="number">42</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a - <span class="number">42</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Type assertion inside if</span></span><br><span class="line">	<span class="keyword">var</span> val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	val = <span class="string">"foo"</span></span><br><span class="line">	<span class="keyword">if</span> str, ok := val.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">		fmt.Println(str)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// There's only `for`, no `while`, no `until`</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="number">10</span>;  &#123; <span class="comment">// while - loop</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span>  &#123; <span class="comment">// you can omit semicolons if there is only a condition</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// you can omit the condition ~ while (true)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch statement</span></span><br><span class="line"><span class="keyword">switch</span> operatingSystem &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Mac OS Hipster"</span>)</span><br><span class="line">    <span class="comment">// cases break automatically, no fallthrough by default</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Linux Geek"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// Windows, BSD, ...</span></span><br><span class="line">    fmt.Println(<span class="string">"Other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as with for and if, you can have an assignment statement before the switch value</span></span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>: ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// you can also make comparisons in switch cases</span></span><br><span class="line">number := <span class="number">42</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> number &lt; <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Smaller"</span>)</span><br><span class="line">    <span class="keyword">case</span> number == <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Equal"</span>)</span><br><span class="line">    <span class="keyword">case</span> number &gt; <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Greater"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays-Slices-Ranges"><a href="#Arrays-Slices-Ranges" class="headerlink" title="Arrays, Slices, Ranges"></a>Arrays, Slices, Ranges</h2><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span> <span class="comment">// declare an int array with length 10. Array length is part of the type!</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">42</span>     <span class="comment">// set elements</span></span><br><span class="line">i := a[<span class="number">3</span>]     <span class="comment">// read elements</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare and initialize</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">a := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">//shorthand</span></span><br><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// elipsis -&gt; Compiler figures out array length</span></span><br></pre></td></tr></table></figure>

<h3 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span>                              <span class="comment">// declare a slice - similar to an array, but length is unspecified</span></span><br><span class="line"><span class="keyword">var</span> a = []<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;               <span class="comment">// declare and initialize a slice (backed by the array given implicitly)</span></span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;                   <span class="comment">// shorthand</span></span><br><span class="line">chars := []<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">"a"</span>, <span class="number">2</span>:<span class="string">"c"</span>, <span class="number">1</span>: <span class="string">"b"</span>&#125;  <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a[lo:hi]	<span class="comment">// creates a slice (view of the array) from index lo to hi-1</span></span><br><span class="line"><span class="keyword">var</span> b = a[<span class="number">1</span>:<span class="number">4</span>]		<span class="comment">// slice from index 1 to 3</span></span><br><span class="line"><span class="keyword">var</span> b = a[:<span class="number">3</span>]		<span class="comment">// missing low index implies 0</span></span><br><span class="line"><span class="keyword">var</span> b = a[<span class="number">3</span>:]		<span class="comment">// missing high index implies len(a)</span></span><br><span class="line">a =  <span class="built_in">append</span>(a,<span class="number">17</span>,<span class="number">3</span>)	<span class="comment">// append items to slice a</span></span><br><span class="line">c := <span class="built_in">append</span>(a,b...)	<span class="comment">// concatenate slices a and b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create a slice with make</span></span><br><span class="line">a = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>, <span class="number">5</span>)	<span class="comment">// first arg length, second capacity</span></span><br><span class="line">a = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)	<span class="comment">// capacity is optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create a slice from an array</span></span><br><span class="line">x := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"Лайка"</span>, <span class="string">"Белка"</span>, <span class="string">"Стрелка"</span>&#125;</span><br><span class="line">s := x[:] <span class="comment">// a slice referencing the storage of x</span></span><br></pre></td></tr></table></figure>

<h3 id="Operations-on-Arrays-and-Slices"><a href="#Operations-on-Arrays-and-Slices" class="headerlink" title="Operations on Arrays and Slices"></a>Operations on Arrays and Slices</h3><p><code>len(a)</code> gives you the length of an array/a slice. It’s a built-in function, not a attribute/method on the array.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loop over an array/a slice</span></span><br><span class="line"><span class="keyword">for</span> i, e := <span class="keyword">range</span> a &#123;</span><br><span class="line">    <span class="comment">// i is the index, e the element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if you only need e:</span></span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> a &#123;</span><br><span class="line">    <span class="comment">// e is the element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...and if you only need the index</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In Go pre-1.4, you'll get a compiler error if you're not using i and e.</span></span><br><span class="line"><span class="comment">// Go 1.4 introduced a variable-free form, so that you can do this</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> time.Tick(time.Second) &#123;</span><br><span class="line">    <span class="comment">// do it once a sec</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">m[<span class="string">"key"</span>] = <span class="number">42</span></span><br><span class="line">fmt.Println(m[<span class="string">"key"</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"key"</span>)</span><br><span class="line"></span><br><span class="line">elem, ok := m[<span class="string">"key"</span>] <span class="comment">// test if key "key" is present and retrieve it, if so</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map literal</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</span><br><span class="line">    <span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line">    <span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h2><p>There are no classes, only structs. Structs can have methods.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A struct is a type. It's also a collection of fields</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating</span></span><br><span class="line"><span class="keyword">var</span> v = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> v = Vertex&#123;X: <span class="number">1</span>, Y: <span class="number">2</span>&#125; <span class="comment">// Creates a struct by defining values with keys</span></span><br><span class="line"><span class="keyword">var</span> v = []Vertex&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">5</span>,<span class="number">2</span>&#125;,&#123;<span class="number">5</span>,<span class="number">5</span>&#125;&#125; <span class="comment">// Initialize a slice of structs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing members</span></span><br><span class="line">v.X = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can declare methods on structs. The struct you want to declare the</span></span><br><span class="line"><span class="comment">// method on (the receiving type) comes between the the func keyword and</span></span><br><span class="line"><span class="comment">// the method name. The struct is copied on each method call(!)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call method</span></span><br><span class="line">v.Abs()</span><br><span class="line"></span><br><span class="line"><span class="comment">// For mutating methods, you need to use a pointer (see below) to the Struct</span></span><br><span class="line"><span class="comment">// as the type. With this, the struct value is not copied for the method call.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">add</span><span class="params">(n <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    v.X += n</span><br><span class="line">    v.Y += n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Anonymous structs:</strong><br>Cheaper and safer than using <code>map[string]interface{}</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">point := <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="keyword">int</span></span><br><span class="line">&#125;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// p is a Vertex</span></span><br><span class="line">q := &amp;p            <span class="comment">// q is a pointer to a Vertex</span></span><br><span class="line">r := &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// r is also a pointer to a Vertex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The type of a pointer to a Vertex is *Vertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s *Vertex = <span class="built_in">new</span>(Vertex) <span class="comment">// new creates a pointer to a new struct instance</span></span><br></pre></td></tr></table></figure>

<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface declaration</span></span><br><span class="line"><span class="keyword">type</span> Awesomizer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Awesomize() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// types do *not* declare to implement interfaces</span></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instead, types implicitly satisfy an interface if they implement all required methods</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foo Foo)</span> <span class="title">Awesomize</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Awesome!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h2><p>There is no subclassing in Go. Instead, there is interface and struct embedding.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReadWriter implementations must satisfy both Reader and Writer</span></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server exposes all the methods that Logger has</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    Host <span class="keyword">string</span></span><br><span class="line">    Port <span class="keyword">int</span></span><br><span class="line">    *log.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize the embedded type the usual way</span></span><br><span class="line">server := &amp;Server&#123;<span class="string">"localhost"</span>, <span class="number">80</span>, log.New(...)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods implemented on the embedded struct are passed through</span></span><br><span class="line">server.Log(...) <span class="comment">// calls server.Logger.Log(...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the field name of the embedded type is its type name (in this case Logger)</span></span><br><span class="line"><span class="keyword">var</span> logger *log.Logger = server.Logger</span><br></pre></td></tr></table></figure>

<h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><p>There is no exception handling. Functions that might produce an error just declare an additional return value of type <code>Error</code>. This is the <code>Error</code> interface:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A function that might return an error:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doStuff</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result, error := doStuff()</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// all is good, use result</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h1><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><p>Goroutines are lightweight threads (managed by Go, not OS threads). <code>go f(a, b)</code> starts a new goroutine which runs <code>f</code> (given <code>f</code> is a function).</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// just a function (which can be later started as a goroutine)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doStuff</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// using a named function in a goroutine</span></span><br><span class="line">    <span class="keyword">go</span> doStuff(<span class="string">"foobar"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using an anonymous inner function in a goroutine</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span> <span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// function body goes here</span></span><br><span class="line">    &#125;(<span class="number">42</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// create a channel of type int</span></span><br><span class="line">ch &lt;- <span class="number">42</span>             <span class="comment">// Send a value to the channel ch.</span></span><br><span class="line">v := &lt;-ch            <span class="comment">// Receive a value from ch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Non-buffered channels block. Read blocks when no value is available, write blocks if a value already has been written but not read.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a buffered channel. Writing to a buffered channels does not block if less than &lt;buffer size&gt; unread values have been written.</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(ch) <span class="comment">// closes the channel (only sender should close)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read from channel and test if it has been closed</span></span><br><span class="line">v, ok := &lt;-ch</span><br><span class="line"></span><br><span class="line"><span class="comment">// if ok is false, channel has been closed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read from channel until it is closed</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select blocks on multiple channel operations, if one unblocks, the corresponding case is executed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doStuff</span><span class="params">(channelOut, channelIn <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> channelOut &lt;- <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"We could write to channelOut!"</span>)</span><br><span class="line">    <span class="keyword">case</span> x := &lt;- channelIn:</span><br><span class="line">        fmt.Println(<span class="string">"We could read from channelIn"</span>)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">        fmt.Println(<span class="string">"timeout"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Channel-Axioms"><a href="#Channel-Axioms" class="headerlink" title="Channel Axioms"></a>Channel Axioms</h3><ul>
<li><p>A send to a nil channel blocks forever</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">c &lt;- <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="comment">// fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure></li>
<li><p>A receive from a nil channel blocks forever</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">fmt.Println(&lt;-c)</span><br><span class="line"><span class="comment">// fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure></li>
<li><p>A send to a closed channel panics</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">c &lt;- <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">c &lt;- <span class="string">"Hello, Panic!"</span></span><br><span class="line"><span class="comment">// panic: send on closed channel</span></span><br></pre></td></tr></table></figure></li>
<li><p>A receive from a closed channel returns the zero value immediately</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line">c &lt;- <span class="number">2</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d "</span>, &lt;-c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 0</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Printing"><a href="#Printing" class="headerlink" title="Printing"></a>Printing</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">"Hello, 你好, नमस्ते, Привет, ᎣᏏᏲ"</span>) <span class="comment">// basic print, plus newline</span></span><br><span class="line">p := <span class="keyword">struct</span> &#123; X, Y <span class="keyword">int</span> &#125;&#123; <span class="number">17</span>, <span class="number">2</span> &#125;</span><br><span class="line">fmt.Println( <span class="string">"My point:"</span>, p, <span class="string">"x coord="</span>, p.X ) <span class="comment">// print structs, ints, etc</span></span><br><span class="line">s := fmt.Sprintln( <span class="string">"My point:"</span>, p, <span class="string">"x coord="</span>, p.X ) <span class="comment">// print to string variable</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%d hex:%x bin:%b fp:%f sci:%e"</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">17.0</span>,<span class="number">17.0</span>) <span class="comment">// c-ish format</span></span><br><span class="line">s2 := fmt.Sprintf( <span class="string">"%d %f"</span>, <span class="number">17</span>, <span class="number">17.0</span> ) <span class="comment">// formatted print to string variable</span></span><br><span class="line"></span><br><span class="line">hellomsg := <span class="string">`</span></span><br><span class="line"><span class="string"> "Hello" in Chinese is 你好 ('Ni Hao')</span></span><br><span class="line"><span class="string"> "Hello" in Hindi is नमस्ते ('Namaste')</span></span><br><span class="line"><span class="string">`</span> <span class="comment">// multi-line string literal, using back-tick at beginning and end</span></span><br></pre></td></tr></table></figure>

<h1 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h1><h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// define a type for the response</span></span><br><span class="line"><span class="keyword">type</span> Hello <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let that type implement the ServeHTTP method (defined in interface http.Handler)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Hello)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprint(w, <span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> h Hello</span><br><span class="line">    http.ListenAndServe(<span class="string">"localhost:4000"</span>, h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here's the method signature of http.ServeHTTP:</span></span><br><span class="line"><span class="comment">// type Handler interface &#123;</span></span><br><span class="line"><span class="comment">//     ServeHTTP(w http.ResponseWriter, r *http.Request)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/a8m/go-lang-cheat-sheet" target="_blank" rel="noopener">原文出处</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Java 程序员的 Golang 入门笔记</title>
    <url>/2017/07/22/from-java-to-golang/</url>
    <content><![CDATA[<blockquote>
<p>最近抽空学习了一下 <code>Go</code> 语言，好多特性感觉非常棒，由于高效的开发效率以及性能，现在好多优秀的开源项目都是基于 <code>Go</code> 开发，比如 <code>Docker</code>、<code>etcd</code>、<code>consul</code>、<code>Kubernetes</code> 等。<code>Go</code> 势必会在互联网技术的服务化，容器化的将来大展拳脚。正好网上看到一篇关于 <code>Java</code> 程序员入门 <code>Golang</code> 的文章，写的挺好的，所以特此转载过来，再加上自己的一些学习经验，供大家参考。</p>
</blockquote>
<p><code>Golang</code> 从 <code>09</code> 年发布，中间经历了多个版本的演进，已经渐渐趋于成熟，其媲美于 <code>C</code> 语言的性能、<code>Python</code> 的开发效率，又被称为 21 世纪的 <code>C</code> 语言，尤其适合开发后台服务。这篇文章主要是介绍 <code>Golang</code> 的一些主要特性，和 <code>Java</code> 做一个对比，以便更好的理解 <code>Golang</code> 这门语言。</p>
<p>关于 <code>Golang</code> 环境的搭建就不讲了，可以参考 <a href="https://golang.org/doc/install" target="_blank" rel="noopener">官方文档</a> 或者大神 <a href="https://github.com/astaxie" target="_blank" rel="noopener">astaxie</a> 的开源书籍 <a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.0.md" target="_blank" rel="noopener">build-web-application-with-golang</a> 的相关篇章。下面我没让你就从 <code>Go</code> 版本的<code>Hello World</code> 开始。</p>
<a id="more"></a>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>每种语言都有自己的<code>Hello World</code>，<code>Go</code> 也不例外，<code>Go</code> 版本的如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello World!你好，世界！"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们使用 <code>go run</code> 运行后，会在控制台终端看到 <code>Hello World!你好，世界！</code> 的输出。我们来看下这段代码：</p>
<ol>
<li><code>package</code> 是一个关键字，定义一个包，和 <code>Java</code> 里的 <code>package</code> 一样，也是模块化的关键。</li>
<li><code>main</code> 包是一个特殊的包名，它表示当前是一个可执行程序，而不是一个库。</li>
<li><code>import</code> 也是一个关键字，表示要引入的包，和 <code>Java</code> 的 <code>import</code> 关键字一样，引入后才可以使用它。</li>
<li><code>fmt</code> 是一个包名，这里表示要引入 <code>fmt</code> 这个包，这样我们就可以使用它的函数了。</li>
<li><code>main</code> 函数是主函数，表示程序执行的入口，<code>Java</code> 也有同名函数，但是多了一个<code>String[]</code> 类型的参数。</li>
<li><code>Println</code> 是 <code>fmt</code> 包里的函数，和 <code>Java</code> 里的 <code>System.out.println</code> 作用类似，这里输出一段文字。</li>
</ol>
<p>整段代码非常简洁，关键字、函数、包等和 <code>Java</code> 非常相似，不过注意，<code>go</code> 是不需要以 <code>;</code> (分号)结尾的。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>go</code> 语言变量的声明和 <code>java</code> 的略有不同，以声明一个 <code>int</code> 类型，变量名为 <code>age</code> 为例，<code>go</code> 语言变量生成如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> =<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>同样的变量，在 <code>java</code> 中的声明是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>go</code> 的变量声明，修饰变量的类型在变量的后面，而且是以 <code>var</code> 关键字开头。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure>

<p>最后面的赋值可以在声明的时候忽略，这样变量就有一个默认的值，称之为 <code>零值</code>。<code>零值</code> 是一个统称，以类型而定，比如 <code>int</code> 类型的零值为 <code>0</code>，<code>string</code> 类型的零值是 <code>””</code> 空字符串。</p>
<p>在 <code>go</code> 中除了以 <code>var</code> 声明变量之外，还有一种简短的变量声明方式 <code>:=</code>,比如上面例子，可以如下简单声明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">age := <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>这种方式和上面的例子等价，但是少了 <code>var</code> 和变量类型，所以简短方便，用的多。使用这种方式，变量的类型由 <code>go</code> 根据值推导出来，比如这里默认是 <code>int</code>。</p>
<p>不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用 <code>var</code> 方式来定义全局变量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1, a2 <span class="keyword">string</span> = <span class="string">"1"</span>, <span class="string">"d"</span></span><br></pre></td></tr></table></figure>

<p><code>Go</code> 对于已声明但未使用的变量（局部变量）会在编译阶段报错</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>有了变量，就少不了常量，和 <code>var</code> 关键字不一样，<code>go</code> 的常量使用 <code>const</code> 声明，这个和 <code>C</code> 里的常量一样。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>这样就声明了一个常量 <code>age</code>，其值是 <code>10</code>，因为我们这里没有指定常量的类型，所以常量的类型是根据值推导出来的。所以等价的我们也可以指定常量类型，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age <span class="keyword">int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>相比来说，<code>java</code> 下的常量定义就要复杂一些，要有 <code>static final</code> 修饰符，才是常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>这个和 <code>go</code> 的实现等价，但是它的定义修饰符比 <code>go</code> 多多了，而且常量类型不能省略。</p>
<h2 id="大小写标记访问权限"><a href="#大小写标记访问权限" class="headerlink" title="大小写标记访问权限"></a>大小写标记访问权限</h2><p>我们上面的 <code>go</code> 例子中我特意用了小些的变量名 <code>age</code>，甚至常量我也没有写成 <code>AGE</code>，但是在 <code>java</code> 中，对于常量我们的习惯是全部大些。</p>
<p>在 <code>go</code> 中不能随便使用大小写的问题，是因为大小写具有特殊意义，在 <code>go</code> 中，大些字母开头的变量或者函数等是 <code>public</code> 的，可以被其他包访问；小些的则是<code>private</code>的，不能被其他包访问到。这样就省去了 <code>public</code> 和 <code>private</code> 声明的烦恼，使代码变的更简洁。</p>
<p>特别说明，这些导出规则只适用于包级别名字定义，不能使函数内部的定义。</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包的规则和<code>java</code>很像，每个包都有自己独立的空间，所以可以用来做模块化，封装，组织代码等。<br>和<code>java</code>不同的是， <code>go</code> 的包里可以有函数，比如我们常用的<code>fmt.Println()</code>,但是在在<code>java</code>中没有这种用法，<code>java</code>的方法必须是属于一个类或者类的实例的。</p>
<p>要使用一个包，就需要先导入，使用<code>import</code>关键字，和<code>java</code>也一样，可以参见前面的<code>hello world</code>示例。</p>
<p>如果我们需要导入多个包的时候，可以像<code>java</code>一样，一行行导入，也可以使用快捷方式一次导入，这个是<code>java</code>所没有的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p> <code>go</code> 对于变量的类型有严格的限制，不同类型之间的变量不能进行赋值、表达式等操作，必须要要转换成同一类型才可以，比如<code>int32</code>和<code>int64</code>两种<code>int</code>类型的变量不能直接相加，要转换成一样才可以。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int32</span> = <span class="number">13</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int64</span> = <span class="number">20</span></span><br><span class="line">c := <span class="keyword">int64</span>(a) + b</span><br></pre></td></tr></table></figure>
<p>这种限制主要是防止我们误操作，导致一些莫名其妙的问题。在<code>java</code>中因为有自动转型的概念，所以可以不同类型的可以进行操作，比如<code>int</code>可以和<code>double</code>相加，<code>int</code>类型可以通过<code>+</code>和字符串拼接起来，这些在<code>go</code>中都是不可行的。</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map</code>类型，<code>Java</code>里是<code>Map</code>接口， <code>go</code> 里叫做字典，因为其常用，在 <code>go</code> 中，被优化为一个语言上支持的结构，原生支持，就像一个关键字一样，而不是<code>java</code>里的要使用内置的<code>sdk</code>集合库，比如<code>HashMap</code>等。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">ages[<span class="string">"linday"</span>] = <span class="number">20</span></span><br><span class="line">ages[<span class="string">"michael"</span>] = <span class="number">30</span></span><br><span class="line">fmt.Print(ages[<span class="string">"michael"</span>])</span><br></pre></td></tr></table></figure>
<p> <code>go</code> 里要创建一个<code>map</code>对应，需要使用关键字<code>make</code>，然后就可以对这个<code>map</code>进行操作。</p>
<p><code>map</code>的结构也非常简单，符合KV模型，定义为<code>map[key]value</code>, 方括号里是<code>key</code>的类型，方括号外紧跟着对应的<code>value</code>的类型，这些明显和<code>Java</code>的<code>Map</code>接口不同。如果在 <code>go</code> 中我们要删除<code>map</code>中的一个元素怎么办？使用内置的<code>delete</code>函数就可以,如下代码删除<code>ages</code>这个<code>map</code>中，<code>key</code>为<code>michael</code>的元素。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delete</span>(ages,<span class="string">"michael"</span>)</span><br></pre></td></tr></table></figure>
<p>如果我们想遍历<code>map</code>中的<code>K、V</code>值怎么办？答案是使用<code>range</code>风格的<code>for</code>循环，可比<code>Java Map</code>的遍历简洁多了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name,age := <span class="keyword">range</span> ages &#123;</span><br><span class="line">    fmt.Println(<span class="string">"name:"</span>,name,<span class="string">",age:"</span>,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>range</code>一个<code>map</code>，会返回两个值，第一个是<code>key</code>，第二个是<code>value</code>，这个也是<code>go</code>多值返回的优势，下面会讲。</p>
<h2 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h2><p>在 <code>go</code> 中，函数和方法是不一样的，我们一般称包级别的(直接可以通过包调用的)称之为函数，比如<code>fmt.Println()；</code>把和一个类型关联起来的函数称之为方法，如下示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lib</span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTime</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>GetTime()</code>可以通过<code>lib.GetTime()</code>直接调用，称之为函数；而<code>GetName()</code>则属于<code>Person</code>这个结构体的函数，只能声明了<code>Person</code>类型的实例后才可以调用，称之为方法。</p>
<p>不管是函数还是方法，定义是一摸一样的。而在这里，最可以讲的就是多值返回，也就是可以同时返回多个值，这就大大为我们带来了方便，比如上个遍历<code>map</code>的例子，直接可以获取<code>K、V</code>，如果只能返回一个值，我们就需要调用两次方法才可以。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTime</span><span class="params">()</span> <span class="params">(time.Time,error)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now(),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多值返回也很简单，返回的值使用逗号隔开即可。如果要接受多值的返回，也需要以逗号分隔的变量，有几个返回值，就需要几个变量，比如这里：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">now,err:=GetTime()</span><br></pre></td></tr></table></figure>

<p>如果有个返回值，我们用不到，不想浪费一个变量接收怎么办？这时候可以使用空标志符<code>_</code>,这是<code>java</code>没有的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">now,_:=GetTime()</span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p> <code>go</code> 的指针和<code>C</code>中的声明定义是一样的，其作用类似于<code>Java</code>引用变量效果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span> = &amp;age</span><br><span class="line">*p = <span class="number">11</span></span><br><span class="line">fmt.Println(age)</span><br></pre></td></tr></table></figure>

<p>其中<code>指针p</code>指向<code>变量age</code>的内存地址，如果修改<code>*p</code>的值，那么变量<code>age</code>的值也同时会被修改，例子中打印出来的值为<code>11</code>，而不是<code>10</code>.</p>
<p>相对应<code>java</code>引用类型的变量，可以理解为一个<code>HashMap</code>类型的变量，这个变量传递给一个方法，在该方法里对<code>HashMap</code>修改，删除，就会影响原来的<code>HashMap</code>。引用变量集合类最容易理解，自己的类也可以，不过基本类型不行，基本类型不是引用类型的，他们在方法传参的时候，是拷贝的值。</p>
<h2 id="结构体替代类"><a href="#结构体替代类" class="headerlink" title="结构体替代类"></a>结构体替代类</h2><p> <code>go</code> 中没有类型的概念，只有结构体，这个和<code>C</code>是一样的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>go</code> 中的结构体是不能定义方法的，只能是变量，这点和<code>Java</code>不一样的,如果要访问结构体内的成员变量，通过<code>.</code>操作符即可。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是通过<code>.</code>操作符访问变量的方式，同时它也是一个为结构体定义方法的例子，和函数不一样的是，在<code>func</code>关键字后要执行该方法的接收者，这个方法就是属于这个接收者，例子中是<code>Person</code>这个结构体。</p>
<p>在 <code>go</code> 中如果想像<code>Java</code>一样，让一个结构体继承另外一个结构体怎么办？也有办法，不过在 <code>go</code> 中称之为组合或者嵌入。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">   age  <span class="keyword">int</span></span><br><span class="line">   name <span class="keyword">string</span></span><br><span class="line">   Address</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体<code>Address</code>被嵌入了<code>Person</code>中，这样<code>Person</code>就拥有了<code>Address</code>的变量和方法，就想自己的一样，这就是组合的威力。通过这种方式，我们可以把简单的对象组合成复杂的对象，并且他们之间没有强约束关系， <code>go</code> 倡导的是组合，而不是继承、多态。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p> <code>go</code> 的接口和<code>Java</code>类型，不过它不需要强制实现，在 <code>go</code> 中，如果你这个类型（基本类型，结构体等都可以）拥有了接口的所有方法，那么就默认为这个类型实现了这个接口，是隐式的，不需要和<code>java</code>一样，强制使用<code>implement</code>强制实现。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"name is "</span>+p.name+<span class="string">",age is "</span>+strconv.Itoa(p.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例中可以看到，<code>Person</code>这个结构体拥有了<code>fmt.Stringer</code>接口的方法，那么就说明<code>Person</code>实现了<code>fmt.Stringer</code>接口。</p>
<p>接口也可以像结构体一样组合嵌套，这里不再赘述。</p>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p> <code>go</code> 并发主要靠<code>goroutine</code>支持，也称之为<code>go协程</code>或者<code>go程</code>，他是语言层面支持的，非常轻量级的多任务支持，也可以把他简单的理解为<code>java</code>语言的线程，不过是不一样的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> run()</span><br></pre></td></tr></table></figure>

<p>这就启动一个<code>goroutine</code>来执行<code>run</code>函数，代码非常简洁，如果在<code>java</code>中，需要先<code>New</code>一个<code>Thread</code>，然后在重写他的<code>run</code>方法，然后在<code>start</code>才可以开始。</p>
<p>两个<code>goroutine</code>可以通过<code>channel</code>来通信，<code>channel</code>是一个特殊的类型，也是 <code>go</code> 语言级别上的支持，他类似于一个管道，可以存储信息，也可以从中读取信息。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum:=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line">            sum=sum+i</span><br><span class="line">        &#125;</span><br><span class="line">        result&lt;-sum</span><br><span class="line">    &#125;()</span><br><span class="line">    fmt.Print(&lt;-result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上示例使用一个单独的<code>goroutine</code>求和，当得到结果时，存放在<code>result</code>这个<code>chan</code>里，然后供 <code>main</code> <code>goroutine</code> 读取出来。当<code>result</code>没有被存储值的时候，读取<code>result</code>是阻塞的，所以会等到结果返回，协同工作，通过<code>chan</code>通信。</p>
<p>对于并发， <code>go</code> 还提供了一套同步机制，都在<code>sync</code>包里，有锁，有一些常用的工具函数等，和<code>java</code>的<code>concurrent</code>框架差不多。</p>
<h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><p>相比<code>java</code>的<code>Exception</code>来说， <code>go</code> 有两种机制，不过最常用的还是<code>error</code>错误类型，<code>panic</code>只用于严重的错误。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>go</code> 内置的<code>error</code>类型非常简洁，只用实现<code>Error</code>方法即可，可以打印一些详细的错误信息，比如常见的函数多值返回，最后一个返回值经常是<code>error</code>，用于传递一些错误问题，这种方式要比<code>java</code> <code>throw Exception</code>的方法更优雅。</p>
<h2 id="Defer代替finally"><a href="#Defer代替finally" class="headerlink" title="Defer代替finally"></a>Defer代替finally</h2><p> <code>go</code> 中没有<code>java</code>的<code>finally</code>了，那么如果我们要关闭一些一些连接，文件流等怎么办呢，为此<code>go</code>为我们提供了<code>defer</code>关键字，这样就可以保证永远被执行到，也就不怕关闭不了连接了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f,err:=os.Open(filename)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">readAll(f)</span><br></pre></td></tr></table></figure>

<h2 id="统一编码风格"><a href="#统一编码风格" class="headerlink" title="统一编码风格"></a>统一编码风格</h2><p>在编码中，我们有时为了是否空行，大括号是否独占一行等编码风格问题争论不休，到了 <code>go</code> 这里就终止了，因为 <code>go</code> 是强制的，比如花括号不能独占一行，比如定义的变量必须使用，否则就不能编译通过。</p>
<p>第二种就是<code>go fmt</code>这个工具提供的非强制性规范，虽然不是强制的，不过也建议使用，这样整个团队的代码看着就像一个人写的。很多 <code>go</code> 代码编辑器都提供保存时自动<code>gofmt</code>格式的话，所以效率也非常高。</p>
<h2 id="便捷的部署"><a href="#便捷的部署" class="headerlink" title="便捷的部署"></a>便捷的部署</h2><p> <code>go</code> 最终生成的是一个可执行文件，不管你的程序依赖多少库，都会被打包进行，生成一个可执行文件，所以相比<code>java</code>庞大的<code>jar</code>库来说，他的部署非常方便，执行运行这个可执行文件就好了。</p>
<p>对于<code>Web</code>开发，更方便，不用安装<code>jdk</code>，<code>tomcat</code>容器等等这些环境，直接一个可执行文件，就启动了。对于 <code>go</code> 这种便捷的部署方式，我觉得他更能推进<code>docker</code>的服务化，因为<code>docker</code>就是倡导一个实例一个服务，而且不用各种依赖，<code>layer</code>层级又没那么多，<code>docker image</code>也会小很多。</p>
<p>最后， <code>go</code> 目前已经在<code>TIOBE</code>语言排行榜上名列<code>13</code>名了，上升速度还是非常快的，而且随着服务化，容器化，他的优势会越来越多的显现出来，得到更广泛的应用。</p>
<p>如果你感兴趣，那么开始吧，提前准备，机会来的时候，就不会错过了。</p>
<hr>
<p><a href="http://www.flysnow.org/2016/12/28/from-java-to-golang.html" target="_blank" rel="noopener">原文出处</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Golang</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]理解 Java 动态代理</title>
    <url>/2020/01/02/java-dynamic-proxy/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">原文地址</a></p>
<p>动态代理是 <code>Java</code> 语言中非常经典的一种设计模式，也是所有设计模式中最难理解的一种。本文将通过一个简单的例子模拟 <code>JDK</code> 动态代理实现，让你彻底明白动态代理设计模式的本质。</p>
<h2 id="什么是代理"><a href="#什么是代理" class="headerlink" title="什么是代理"></a>什么是代理</h2><p>从字面意思来看，代理比较好理解，无非就是代为处理的意思。举个例子，你在上大学的时候，总是喜欢逃课。因此，你拜托你的同学帮你答到，而自己却窝在宿舍玩游戏… 你的这个同学恰好就充当了代理的作用，代替你去上课。</p>
<a id="more"></a>
<p>是的，你没有看错，代理就是这么简单！</p>
<p>理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：</p>
<ul>
<li>怎么实现代理模式</li>
<li>代理模式有什么实际用途</li>
</ul>
<p>要理解这两个问题，看一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bird is flying..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？</p>
<p>有人说，很简单，在 <code>Bird-&gt;fly ()</code> 方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"Bird is flying..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      	Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"Fly time = "</span> + (end - start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>的确，这个方法没有任何问题，接下来加大问题的难度。如果 <code>Bird</code> 这个类来自于某个 <code>SDK</code>（或者说 <code>Jar</code> 包）提供，你无法改动源码，怎么办？</p>
<p>一定会有人说，我可以在调用的地方这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Bird bird = <span class="keyword">new</span> Bird();</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">  	bird.fly();</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"Fly time = "</span> + (end - start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？</p>
<p>使用继承，继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。 为此，我们重新创建一个类 <code>Bird2</code>，在 <code>Bird2</code> 中我们只做一件事情，就是调用父类的 <code>fly</code> 方法，在前后记录时间，并打印时间差：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird2</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.fly();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Fly time = "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一种解决方案，还有一种解决方案叫做：<strong>聚合</strong>，其实也是比较容易想到的。 我们再次创建新类 <code>Bird3</code>，在 <code>Bird3</code> 的构造方法中传入 <code>Bird</code> 实例。同时，让 <code>Bird3</code> 也实现 <code>Flyable</code> 接口，并在 <code>fly</code>方法中调用传入的 <code>Bird</code> 实例的 <code>fly</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird3</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bird bird;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird3</span><span class="params">(Bird bird)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bird = bird;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        bird.fly();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Fly time = "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了记录 <code>Bird-&gt;fly ()</code> 方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！</p>
<p>继续深入思考，用问题推导来解答这个问题：</p>
<p><strong>问题一</strong>：如果我还需要在 <code>fly</code> 方法前后打印日志，记录飞行开始和飞行结束，怎么办？ 有人说，很简单！继承 <code>Bird2</code> 并在在前后添加打印语句即可。那么，问题来了，请看问题二。</p>
<p><strong>问题二</strong>：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？ 有人说，再新建一个类 <code>Bird4</code> 继承 <code>Bird</code>，打印日志。再新建一个类 <code>Bird5</code> 继承 <code>Bird4</code>，获取方法执行时间。</p>
<p>问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用聚合是否可以避免这个问题呢？ 答案是：可以！但我们的类需要稍微改造一下。修改 <code>Bird3</code> 类，将聚合对象 <code>Bird</code> 类型修改为 <code>Flyable</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird3</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Flyable flyable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird3</span><span class="params">(Flyable flyable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyable = flyable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        flyable.fly();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Fly time = "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了让你看的更清楚，我将 <code>Bird3</code> 更名为 <code>BirdTimeProxy</code>，即用于获取方法执行时间的代理的意思。同时我们新建 <code>BirdLogProxy</code> 代理类用于打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BirdLogProxy</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Flyable flyable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BirdLogProxy</span><span class="params">(Flyable flyable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyable = flyable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bird fly start..."</span>);</span><br><span class="line"></span><br><span class="line">        flyable.fly();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Bird fly end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Bird bird = <span class="keyword">new</span> Bird();</span><br><span class="line">    BirdLogProxy p1 = <span class="keyword">new</span> BirdLogProxy(bird);</span><br><span class="line">    BirdTimeProxy p2 = <span class="keyword">new</span> BirdTimeProxy(p1);</span><br><span class="line"></span><br><span class="line">    p2.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反过来，可以这么做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Bird bird = <span class="keyword">new</span> Bird();</span><br><span class="line">    BirdTimeProxy p2 = <span class="keyword">new</span> BirdTimeProxy(bird);</span><br><span class="line">    BirdLogProxy p1 = <span class="keyword">new</span> BirdLogProxy(p2);</span><br><span class="line"></span><br><span class="line">    p1.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么聚合可以做到，而继承不行呢。我们用一张图来解释一下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba292275e28.png" alt=""></p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>接下来，观察上面的类 <code>BirdTimeProxy</code>，在它的 <code>fly</code> 方法中我们直接调用了 <code>flyable-&gt;fly ()</code> 方法。换而言之，<code>BirdTimeProxy</code> 其实代理了传入的 <code>Flyable</code> 对象，这就是典型的静态代理实现。</p>
<p>从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算 <code>SDK</code> 中 100 个方法的运行时间，同样的代码至少需要重复 100 次，并且创建至少 100 个代理类。往小了说，如果 <code>Bird</code> 类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：</p>
<ul>
<li>如果同时代理多个类，依然会导致类无限制扩展</li>
<li>如果类中有多个方法，同样的逻辑需要反复实现</li>
</ul>
<p>那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：<code>TimeProxy</code>）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：<strong>动态代理</strong>。</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>继续回到上面这个问题：是否可以使用同一个类（例如：<code>TimeProxy</code>）来计算任意对象的任一方法的执行时间呢。</p>
<p>这个部分需要一定的抽象思维，我想，你脑海中的第一个解决方案应该是使用反射。反射是用于获取已创建实例的方法或者属性，并对其进行调用或者赋值。很明显，在这里，反射解决不了问题。但是，再大胆一点，如果我们可以动态生成 <code>TimeProxy</code> 这个类，并且动态编译。然后，再通过反射创建对象并加载到内存中，不就实现了对任意对象进行代理了吗？为了防止你依然一头雾水，我们用一张图来描述接下来要做什么：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba2923a81ba.png" alt=""></p>
<p>动态生成 <code>Java</code> 源文件并且排版是一个非常繁琐的工作，为了简化操作，我们使用 <a href="https://github.com/square/javapoet" target="_blank" rel="noopener"><code>JavaPoet</code></a> 这个第三方库帮我们生成 <code>TimeProxy</code> 的源码。希望 <code>JavaPoet</code> 不要成为你的负担，不理解 <code>JavaPoet</code> 没有关系，你只要把它当成一个 <code>Java</code> 源码生成工具使用即可。</p>
<p><strong>PS：</strong>你记住，任何工具库的使用都不会太难，它是为了简化某些操作而出现的，目标是简化而不是繁琐。因此，只要你适应它的规则就轻车熟路了。</p>
<h3 id="第一步：生成-TimeProxy-源码"><a href="#第一步：生成-TimeProxy-源码" class="headerlink" title="第一步：生成 TimeProxy 源码"></a>第一步：生成 TimeProxy 源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(<span class="string">"TimeProxy"</span>).addSuperinterface(Flyable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        FieldSpec fieldSpec = FieldSpec.builder(Flyable.class, "flyable", Modifier.PRIVATE).build();</span><br><span class="line">        typeSpecBuilder.addField(fieldSpec);</span><br><span class="line"></span><br><span class="line">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addParameter(Flyable.class, "flyable")</span><br><span class="line">                .addStatement(<span class="string">"this.flyable = flyable"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class="line"></span><br><span class="line">        Method[] methods = Flyable<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredMethods</span>()</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class="line">                    .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                    .addAnnotation(Override<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">returns</span>(<span class="title">method</span>.<span class="title">getReturnType</span>())</span></span><br><span class="line">                    .addStatement("long start = $T.currentTimeMillis()", System.class)</span><br><span class="line">                    .addCode(<span class="string">"\n"</span>)</span><br><span class="line">                    .addStatement(<span class="string">"this.flyable."</span> + method.getName() + <span class="string">"()"</span>)</span><br><span class="line">                    .addCode(<span class="string">"\n"</span>)</span><br><span class="line">                    .addStatement(<span class="string">"long end = $T.currentTimeMillis()"</span>, System<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">                    .addStatement("$T.out.println(\"Fly Time =\" + (end - start))", System.class)</span><br><span class="line">                    .build();</span><br><span class="line">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"com.youngfeng.proxy"</span>, typeSpecBuilder.build()).build();</span><br><span class="line">        <span class="comment">// 为了看的更清楚，我将源码文件生成到桌面</span></span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(<span class="string">"/Users/ouyangfeng/Desktop/"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>main</code> 方法中调用 <code>Proxy.newProxyInstance ()</code>，你将看到桌面已经生成了 <code>TimeProxy.java</code> 文件，生成的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.youngfeng.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.System;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeProxy</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Flyable flyable;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TimeProxy</span><span class="params">(Flyable flyable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.flyable = flyable;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.flyable.fly();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"Fly Time ="</span> + (end - start));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二步：编译-TimeProxy-源码"><a href="#第二步：编译-TimeProxy-源码" class="headerlink" title="第二步：编译 TimeProxy 源码"></a>第二步：编译 TimeProxy 源码</h3><p>编译 <code>TimeProxy</code> 源码我们直接使用 <code>JDK</code> 提供的编译工具即可，为了使你看起来更清晰，我使用一个新的辅助类来完成编译操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCompiler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Iterable iterable = fileManager.getJavaFileObjects(javaFile);</span><br><span class="line">        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">        task.call();</span><br><span class="line">        fileManager.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>Proxy-&gt;newProxyInstance ()</code> 方法中调用该方法，编译顺利完成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了看的更清楚，我将源码文件生成到桌面</span></span><br><span class="line">String sourcePath = <span class="string">"/Users/ouyangfeng/Desktop/"</span>;</span><br><span class="line">javaFile.writeTo(<span class="keyword">new</span> File(sourcePath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译</span></span><br><span class="line">JavaCompiler.compile(<span class="keyword">new</span> File(sourcePath + <span class="string">"/com/youngfeng/proxy/TimeProxy.java"</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba2923ae39e.png" alt=""></p>
<h3 id="第三步：加载到内存中并创建对象"><a href="#第三步：加载到内存中并创建对象" class="headerlink" title="第三步：加载到内存中并创建对象"></a>第三步：加载到内存中并创建对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:/"</span> + sourcePath)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line"></span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"com.youngfeng.proxy.TimeProxy"</span>);</span><br><span class="line">Constructor constructor = clazz.getConstructor(Flyable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Flyable flyable = (Flyable) constructor.newInstance(<span class="keyword">new</span> Bird());</span><br><span class="line"></span><br><span class="line">flyable.fly();</span><br></pre></td></tr></table></figure>

<p>通过以上三个步骤，我们至少解决了下面两个问题：</p>
<ul>
<li>不再需要手动创建 <code>TimeProxy</code></li>
<li>可以代理任意实现了 <code>Flyable</code> 接口的类对象，并获取接口方法的执行时间</li>
</ul>
<p>可是，说好的任意对象呢？</p>
<h3 id="第四步：增加-InvocationHandler-接口"><a href="#第四步：增加-InvocationHandler-接口" class="headerlink" title="第四步：增加 InvocationHandler 接口"></a>第四步：增加 InvocationHandler 接口</h3><p>查看 <code>Proxy-&gt;newProxyInstance ()</code> 的源码，代理类继承的接口我们是写死的，为了增加灵活性，我们将接口类型作为参数传入：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba293f2e59e.png" alt=""></p>
<p>接口的灵活性问题解决了，<code>TimeProxy</code> 的局限性依然存在，它只能用于获取方法的执行时间，而如果要在方法执行前后打印日志则需要重新创建一个代理类，显然这是不妥的！</p>
<p>为了增加控制的灵活性，我们考虑针将代理的处理逻辑也抽离出来（这里的处理就是打印方法的执行时间）。新增 <code>InvocationHandler</code> 接口，用于处理自定义逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想象一下，如果客户程序员需要对代理类进行自定义的处理，只要实现该接口，并在 <code>invoke</code> 方法中进行相应的处理即可。这里我们在接口中设置了三个参数（其实也是为了和 JDK 源码保持一致）：</p>
<ul>
<li><strong>proxy：</strong>这个参数指定动态生成的代理类，这里是 <code>TimeProxy</code></li>
<li><strong>method：</strong>这个参数表示传入接口中的所有 <code>Method</code> 对象</li>
<li><strong>args：</strong>这个参数对应当前 <code>method</code> 方法中的参数</li>
</ul>
<p>引入了 <code>InvocationHandler</code> 接口之后，我们的调用顺序应该变成了这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">Flyable proxy = Proxy.newProxyInstance(Flyable<span class="class">.<span class="keyword">class</span>, <span class="title">handler</span>)</span>;</span><br><span class="line"></span><br><span class="line">proxy.fly();</span><br></pre></td></tr></table></figure>

<p>方法执行流：<code>proxy.fly() =&gt; handler.invoke()</code></p>
<p>为此，我们需要在 <code>Proxy.newProxyInstance ()</code> 方法中做如下改动：</p>
<ul>
<li>在 <code>newProxyInstance</code> 方法中传入 <code>InvocationHandler</code></li>
<li>在生成的代理类中增加成员变量 <code>handler</code></li>
<li>在生成的代理类方法中，调用 <code>invoke</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(Class inf, InvocationHandler handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(<span class="string">"TimeProxy"</span>)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addSuperinterface(inf);</span><br><span class="line"></span><br><span class="line">        FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, "handler", Modifier.PRIVATE).build();</span><br><span class="line">        typeSpecBuilder.addField(fieldSpec);</span><br><span class="line"></span><br><span class="line">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addParameter(InvocationHandler.class, "handler")</span><br><span class="line">                .addStatement(<span class="string">"this.handler = handler"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class="line"></span><br><span class="line">        Method[] methods = inf.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class="line">                    .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                    .addAnnotation(Override<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">returns</span>(<span class="title">method</span>.<span class="title">getReturnType</span>())</span></span><br><span class="line">                    .addCode("try &#123;\n")</span><br><span class="line">                    .addStatement(<span class="string">"\t$T method = "</span> + inf.getName() + <span class="string">".class.getMethod(\""</span> + method.getName() + <span class="string">"\")"</span>, Method<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    // 为了简单起见，这里参数直接写死为空</span></span><br><span class="line">                    .addStatement("\tthis.handler.invoke(this, method, null)")</span><br><span class="line">                    .addCode(<span class="string">"&#125; catch(Exception e) &#123;\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"\te.printStackTrace();\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"&#125;\n"</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"com.youngfeng.proxy"</span>, typeSpecBuilder.build()).build();</span><br><span class="line">        <span class="comment">// 为了看的更清楚，我将源码文件生成到桌面</span></span><br><span class="line">        String sourcePath = <span class="string">"/Users/ouyangfeng/Desktop/"</span>;</span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(sourcePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译</span></span><br><span class="line">        JavaCompiler.compile(<span class="keyword">new</span> File(sourcePath + <span class="string">"/com/youngfeng/proxy/TimeProxy.java"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用反射load到内存</span></span><br><span class="line">        URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:"</span> + sourcePath)&#125;;</span><br><span class="line">        URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">        Class clazz = classLoader.loadClass(<span class="string">"com.youngfeng.proxy.TimeProxy"</span>);</span><br><span class="line">        Constructor constructor = clazz.getConstructor(InvocationHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Object obj = constructor.newInstance(handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码你可能看起来比较吃力，我们直接调用该方法，查看最后生成的源码。在 <code>main</code> 方法中测试 <code>newProxyInstance</code> 查看生成的 <code>TimeProxy</code> 源码：</p>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Proxy.newProxyInstance(Flyable<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">MyInvocationHandler</span>(<span class="title">new</span> <span class="title">Bird</span>()))</span>;</span><br></pre></td></tr></table></figure>

<p><strong>生成的 TimeProxy.java 源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.youngfeng.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeProxy</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TimeProxy</span><span class="params">(InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	Method method = com.youngfeng.proxy.Flyable.class.getMethod("fly");</span><br><span class="line">    	<span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MyInvocationHandler.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bird bird;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Bird bird)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bird = bird;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method.invoke(bird, <span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Fly time = "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，整个方法栈的调用栈变成了这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba294367cdd.png" alt=""></p>
<p>看到这里，估计很多同学已经晕了，在静态代理部分，我们在代理类中传入了被代理对象。可是，使用 <code>newProxyInstance</code> 生成动态代理对象的时候，我们居然不再需要传入被代理对象了。我们传入了的实际对象是 <code>InvocationHandler</code> 实现类的实例，这看起来有点像生成了 <code>InvocationHandler</code> 的代理对象，在动态生成的代理类的任意方法中都会间接调用 <code>InvocationHandler-&gt;invoke (proxy, method, args)</code> 方法。</p>
<p>其实的确是这样。<code>TimeProxy</code> 真正代理的对象就是 <code>InvocationHandler</code>，不过这里设计的巧妙之处在于，<code>InvocationHandler</code> 是一个接口，真正的实现由用户指定。另外，在每一个方法执行的时候，<code>invoke</code> 方法都会被调用 ，这个时候如果你需要对某个方法进行自定义逻辑处理，可以根据 <code>method</code> 的特征信息进行判断分别处理。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>上面这段解释是告诉你在执行 <code>Proxy-&gt;newProxyInstance</code> 方法的时候真正发生的事情，而在实际使用过程中你完全可以忘掉上面的解释。按照设计者的初衷，我们做如下简单归纳：</p>
<ul>
<li><code>Proxy-&gt;newProxyInstance (infs, handler)</code> 用于生成代理对象</li>
<li><code>InvocationHandler</code>这个接口主要用于自定义代理逻辑处理</li>
<li>为了完成对被代理对象的方法拦截，我们需要在 <code>InvocationHandler</code> 对象中传入被代理对象实例。</li>
</ul>
<p>查看上面的代码，你可以看到我将 <code>Bird</code> 实例已经传入到了 <code>MyInvocationHandler</code> 中，原因就是第三点。</p>
<p>这样设计有什么好处呢？有人说，我们大费周章，饶了一大圈，最终变成了这个样子，到底图什么呢？</p>
<p>想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动 <code>newProxyInstance</code> 方法的源码，答案是：完全不需要！</p>
<p>只要你在 <code>newProxyInstance</code> 方法中指定代理需要实现的接口，指定用于自定义处理的 <code>InvocationHandler</code> 对象，整个代理的逻辑处理都在你自定义的 <code>InvocationHandler</code> 实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给 <code>InvocationHandler</code>。</p>
<p>事实上，我们之前给自己定下的目标 “使用同一个类来计算任意对象的任一方法的执行时间” 已经实现了。严格来说，是我们超额完成了任务，<code>TimeProxy</code> 不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的 <code>InvocationHandler</code> 接口实现。因此，这里取名为 <code>TimeProxy</code> 其实已经不合适了。我们可以修改为和 <code>JDK</code> 命名一致，即 <code>$Proxy0</code>，感兴趣的同学请自行实践。</p>
<h2 id="JDK-实现揭秘"><a href="#JDK-实现揭秘" class="headerlink" title="JDK 实现揭秘"></a>JDK 实现揭秘</h2><p>通过上面的这些步骤，我们完成了一个简易的仿 <code>JDK</code> 实现的动态代理逻辑。接下来，我们一起来看一看 <code>JDK</code> 实现的动态代理和我们到底有什么不同。</p>
<p><strong>Proxy.java</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba294623577.png" alt=""></p>
<p><strong>InvocationHandler</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba2d87bf2f1.png" alt=""></p>
<p>可以看到，官方版本 <code>Proxy</code> 类提供的方法多一些，而我们主要使用的接口 <code>newProxyInstance</code> 参数也和我们设计的不太一样。这里给大家简单解释一下，每个参数的意义：</p>
<ul>
<li><strong>Classloader：</strong>类加载器，你可以使用自定义的类加载器，我们的实现版本为了简化，直接在代码中写死了 <code>Classloader</code>。</li>
<li><strong>Class&lt;?&gt;[]：</strong>第二个参数也和我们的实现版本不一致，这个其实很容易理解，我们应该允许我们自己实现的代理类同时实现多个接口。前面设计只传入一个接口，只是为了简化实现，让你专注核心逻辑实现而已。</li>
</ul>
<p>最后一个参数就不用说了，和我们实现的版本完全是一样的。</p>
<p>仔细观察官方版本的 <code>InvocationHandler</code>，它和我们自己的实现的版本也有一个细微的差别：官方版本 <code>invoke</code> 方法有返回值，而我们的版本中是没有返回值的。那么，返回值到底有什么作用呢？直接来看官方文档：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba2d92efdbe.png" alt=""></p>
<p><em>核心思想：这里的返回值类型必须和传入接口的返回值类型一致，或者与其封装对象的类型一致。</em></p>
<p>遗憾的是，这里并没有说明返回值的用途，其实这里稍微发挥一下想象力就知道了。在我们的版本实现中，<code>Flyable</code> 接口的所有方法都是没有返回值的，问题是，如果有返回值呢？是的，你没有猜错，这里的 <code>invoke</code> 方法对应的就是传入接口中方法的返回值。</p>
<h2 id="答疑解惑"><a href="#答疑解惑" class="headerlink" title="答疑解惑"></a>答疑解惑</h2><h3 id="invoke-方法的第一个参数-proxy-到底有什么作用？"><a href="#invoke-方法的第一个参数-proxy-到底有什么作用？" class="headerlink" title="invoke 方法的第一个参数 proxy 到底有什么作用？"></a>invoke 方法的第一个参数 proxy 到底有什么作用？</h3><p>这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在 <code>invoke</code> 中没有传入这个参数，将导致实例无法正常返回。在这种场景中，<code>proxy</code> 的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。</p>
<h3 id="动态代理到底有什么用？"><a href="#动态代理到底有什么用？" class="headerlink" title="动态代理到底有什么用？"></a>动态代理到底有什么用？</h3><p>学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 <code>AOP</code>。所谓的 <code>AOP</code>，就像刀一样，抓住时机，趁机插入。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/161e5ba2dfeb24bb.png" alt=""></p>
<p>基于这样一种动态特性，我们可以用它做很多事情，例如：</p>
<ul>
<li>事务提交或回退（<code>Web</code> 开发中很常见）</li>
<li>权限管理</li>
<li>自定义缓存逻辑处理</li>
<li><code>SDK Bug</code> 修复 …</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此为止，关于动态代理的所有讲解已经结束了，原谅我使用了一个诱导性的标题 “骗” 你进来阅读这篇文章。如果你不是一个久经沙场的 “老司机”，10 分钟完全看懂动态代理设计模式还是有一定难度的。但即使没有看懂也没关系，如果你在第一次阅读完这篇文章后依然一头雾水，就不妨再仔细阅读一次。在阅读的过程中，一定要跟着文章思路去敲代码。反反复复，一定会看懂的。我在刚刚学习动态代理设计模式的时候就反复看了不下 5 遍，并且亲自敲代码实践了多次。</p>
<p>为了让你少走弯路，我认为看懂这篇文章，你至少需要学习以下知识点：</p>
<ul>
<li>至少已经理解了面向对象语言的多态特性</li>
<li>了解简单的反射用法</li>
<li>会简单使用 <code>JavaPoet</code> 生成 <code>Java</code> 源码</li>
</ul>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] Kafka入门教程</title>
    <url>/2016/10/10/%E8%BD%AC-Kafka%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Kafka 是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。<strong>这个独特的设计是什么样的呢？</strong></p>
<!-- ![][1] -->
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/kafka-logo.png" class="" width="400">

<a id="more"></a>

<p>首先让我们看几个基本的消息系统术语：</p>
<ul>
<li>Kafka 将消息以 topic 为单位进行归纳。</li>
<li>将向 Kafka topic 发布消息的程序成为 producers。</li>
<li>将预订 topics 并消费消息的程序成为 consumer。</li>
<li>Kafka 以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个 broker。</li>
<li>producers 通过网络将消息发送到 Kafka 集群，Kafka 集群向消费者提供消息，如下图所示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161009001.png" alt=""></p>
<p>客户端和服务端通过 TCP 协议通信。Kafka 提供了 Java 客户端，并且对多种语言都提供了支持。</p>
<h2 id="2-Topics-和-Logs"><a href="#2-Topics-和-Logs" class="headerlink" title="2. Topics 和 Logs"></a>2. Topics 和 Logs</h2><p>先来看一下 Kafka 提供的一个抽象概念：<strong>topic</strong>。一个 topic 是对一组消息的归纳。对每个 topic，Kafka 对它的日志进行了分区，如下图所示：</p>
<!-- ![][3] -->
<img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161009002.png" class="" width="400">

<p>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做 offset，用来在分区中唯一的标识这个消息。</p>
<p>在一个可配置的时间段内，Kafka 集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为 2 天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka 的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</p>
<p>实际上每个 consumer 唯一需要维护的数据是消息在日志中的位置，也就是 offset。这个 offset 有 consumer 来维护：一般情况下随着 consumer 不断的读取消息，这 offset 的值不断增加，但其实 consumer 可以以任意的顺序读取消息，比如它可以将 offset 设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使 Kafka consumers 非常的轻量级：它们可以在不对集群和其他 consumer 造成影响的情况下读取消息。你可以使用命令行来 <code>tail</code> 消息而不会对其他正在消费消息的 consumer 造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作 topic 提供了一种可能。</p>
<h2 id="3-分布式"><a href="#3-分布式" class="headerlink" title="3. 分布式"></a>3. 分布式</h2><p>每个分区在 Kafka 集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使 Kafka 具备了容错能力。</p>
<p>每个分区都由一个服务器作为 leader，零或若干服务器作为 followers，leader 负责处理消息的读和写，followers 则去复制 leader。如果 leader down 了，followers 中的一台则会自动成为 leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的 leader，同时作为其他分区的 followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="4-Producers"><a href="#4-Producers" class="headerlink" title="4. Producers"></a>4. Producers</h2><p>Producer 将消息发布到它指定的 topic 中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种。</p>
<h2 id="5-Consumers"><a href="#5-Consumers" class="headerlink" title="5. Consumers"></a>5. Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式（publish-subscribe）。</p>
<ul>
<li>队列模式中 consumers 可以同时从服务端读取消息，每个消息只被其中一个 consumer 读到。</li>
<li>发布-订阅模式中消息被广播到所有的 consumer 中。</li>
</ul>
<p>Consumers 可以加入一个 consumer 组，共同竞争一个 topic，topic 中的消息将被分发到组中的一个成员中。同一组中的 consumer 可以在不同的程序中，也可以在不同的机器上。如果所有的 consumer 都在一个组中，这就成为了传统的队列模式，在各 consumer 中实现负载均衡。如果所有的 consumer 都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的 consumer 中。更常见的是，每个 topic 都有若干数量的 consumer 组，每个组都是一个逻辑上的 “订阅者”，为了容错和更好的稳定性，每个组由若干 consumer 组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161009003.png" alt="由两个机器组成的集群拥有 4 个分区（P0 - P3）2 个 consumer 组。A 组有两个 consumer，B 组有 4 个 consumer"></p>
<p><strong>相比传统的消息系统，Kafka 可以很好的保证有序性。</strong><br>传统的队列在服务器上保存有序的消息，如果多个 consumers 同时从这个服务器消费消息，服务器就会以消息存储的顺序向 consumer 分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各 consumer 上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用 <code>专用consumer</code> 的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面 Kafka 做的更好，通过分区的概念，Kafka 可以在多个 consumer 组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个 consumer 组，这样一个分区就只被这个组的一个 consumer 消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个 consumer 组之间进行负载均衡。</p>
<p><strong><em>注意：</em></strong> consumer 组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka 只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要 topic 中所有消息的有序性，那就只能让这个 topic 只有一个分区，当然也就只有一个 consumer 组消费它。</p>
<h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="Step-1：下载-Kafka"><a href="#Step-1：下载-Kafka" class="headerlink" title="Step 1：下载 Kafka"></a>Step 1：下载 Kafka</h2><p><a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">点击</a>下载最新的版本并解压。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf kafka_2.11-0.10.0.1.tgz -C ~/apps</span><br><span class="line">$ <span class="built_in">cd</span> kafka_2.11-0.10.0.1</span><br></pre></td></tr></table></figure>

<h2 id="Step-2：启动服务"><a href="#Step-2：启动服务" class="headerlink" title="Step 2：启动服务"></a>Step 2：启动服务</h2><p>Kafka 用到了 Zookeeper，所有首先启动 Zookeeper，下面简单的启用一个单实例的 Zookkeeper 服务。<del>可以在命令的结尾加个 <code>&amp;</code> 符号，这样就可以启动后离开控制台。</del></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/ehlxr/apps/zookeeper-3.4.9/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>

<p>现在启动Kafka:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-server-start.sh config/server.properties</span><br><span class="line">[2013-04-22 15:01:47,028] INFO Verifying properties (kafka.utils.VerifiableProperties)</span><br><span class="line">[2013-04-22 15:01:47,051] INFO Property socket.send.buffer.bytes is overridden to 1048576 (kafka.utils.VerifiableProperties)</span><br></pre></td></tr></table></figure>

<h2 id="Step-3：创建-topic"><a href="#Step-3：创建-topic" class="headerlink" title="Step 3：创建 topic"></a>Step 3：创建 topic</h2><p>创建一个叫做 “test” 的 topic，它只有一个分区，一个副本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>可以通过 list 命令查看创建的 topic：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.<span class="keyword">sh</span> --<span class="keyword">list</span> --zookeeper localhost:2181</span><br><span class="line"><span class="keyword">test</span></span><br></pre></td></tr></table></figure>

<p>除了手动创建 topic，还可以配置 broker 让它自动创建 topic。</p>
<h2 id="Step-4：发送消息"><a href="#Step-4：发送消息" class="headerlink" title="Step 4：发送消息"></a>Step 4：发送消息</h2><p>Kafka 使用一个简单的命令行 producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。</p>
<p>运行 producer 并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br><span class="line">This is a messageThis is another message</span><br></pre></td></tr></table></figure>

<p><code>ctrl+c</code> 可以退出发送。</p>
<h2 id="Step-5：启动-consumer"><a href="#Step-5：启动-consumer" class="headerlink" title="Step 5：启动 consumer"></a>Step 5：启动 consumer</h2><p>Kafka 也有一个命令行 consumer 可以读取消息并输出到标准输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class="built_in">test</span> --from-beginning</span><br><span class="line">This is a message</span><br><span class="line">This is another message</span><br></pre></td></tr></table></figure>

<p>你在一个终端中运行 consumer 命令行，另一个终端中运行 producer 命令行，就可以在一个终端输入消息，另一个终端读取消息。</p>
<p>这两个命令都有自己的可选参数，可以在运行的时候不加任何参数可以看到帮助信息。</p>
<h2 id="Step-6：搭建一个多个-broker-的集群"><a href="#Step-6：搭建一个多个-broker-的集群" class="headerlink" title="Step 6：搭建一个多个 broker 的集群"></a>Step 6：搭建一个多个 broker 的集群</h2><p>刚才只是启动了单个 broker，现在启动有 3 个 broker 组成的集群，这些 broker 节点也都是在本机上的。</p>
<p>首先为每个节点编写配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp config/server.properties config/server-1.properties</span><br><span class="line">$ cp config/server.properties config/server-2.properties</span><br></pre></td></tr></table></figure>

<p>在拷贝出的新文件中添加以下参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config/server-1.properties:</span><br><span class="line">    broker.id=1</span><br><span class="line">    port=9093</span><br><span class="line">    log.dir=/tmp/kafka-logs-1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config/server-2.properties:</span><br><span class="line">    broker.id=2</span><br><span class="line">    port=9094</span><br><span class="line">    log.dir=/tmp/kafka-logs-2</span><br></pre></td></tr></table></figure>

<p>broker.id 在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。</p>
<p>刚才已经启动可 Zookeeper 和一个节点，现在启动另外两个节点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-server-start.sh config/server-1.properties &amp;</span><br><span class="line"></span><br><span class="line">$ bin/kafka-server-start.sh config/server-2.properties &amp;</span><br></pre></td></tr></table></figure>

<p>创建一个拥有 3 个副本的 topic：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic</span><br></pre></td></tr></table></figure>

<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行 <code>describe topics</code> 命令就可以了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic</span><br></pre></td></tr></table></figure>

<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。</p>
<ul>
<li>leader：负责处理消息的读和写，leader是从所有节点中随机选择的。</li>
<li>replicas：列出了所有的副本节点，不管节点是否在服务中。</li>
<li>isr：是正在服务中的节点。</li>
</ul>
<p>在我们的例子中，节点 1 是作为 leader 运行。</p>
<p>向 topic 发送消息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-replicated-topic</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my <span class="built_in">test</span> message 1my <span class="built_in">test</span> message 2</span><br></pre></td></tr></table></figure>

<p>消费这些消息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my <span class="built_in">test</span> message 1</span><br><span class="line">my <span class="built_in">test</span> message 2</span><br></pre></td></tr></table></figure>

<p>测试一下容错能力，Broker 1 作为 leader 运行，现在我们 kill 掉它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java...</span><br><span class="line">$ <span class="built_in">kill</span> -9 7564</span><br></pre></td></tr></table></figure>

<p>另外一个节点被选做了 leader，node 1 不再出现在 in-sync 副本列表中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:218192 --topic my-replicated-topic</span><br><span class="line"></span><br><span class="line">Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:</span><br><span class="line">Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</span><br></pre></td></tr></table></figure>

<p>虽然最初负责续写消息的 leader down 掉了，但之前的消息还是可以消费的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</span><br><span class="line">...</span><br><span class="line">my <span class="built_in">test</span> message 1</span><br><span class="line">my <span class="built_in">test</span> message 2</span><br></pre></td></tr></table></figure>

<p>看来 Kafka 的容错机制还是不错的。</p>
<h1 id="三、搭建Kafka开发环境"><a href="#三、搭建Kafka开发环境" class="headerlink" title="三、搭建Kafka开发环境"></a>三、搭建Kafka开发环境</h1><p>我们搭建了 kafka 的服务器，并可以使用 Kafka 的命令行工具创建 topic，发送和接收消息。下面我们来搭建 kafka 的开发环境。</p>
<h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>搭建开发环境需要引入 kafka 的 jar 包，一种方式是将 Kafka 安装包中 lib 下的 jar 包加入到项目的 classpath 中，这种比较简单了。不过我们使用另一种更加流行的方式：使用 maven 管理 jar 包依赖。</p>
<p>创建好 maven 项目后，在 pom.xml 中添加以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> kafka_2.10<span class="tag">&lt;/<span class="name">artifactId</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 0.8.0<span class="tag">&lt;/ <span class="attr">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加依赖后你会发现有两个 jar 包的依赖找不到。没关系我都帮你想好了，点击这里下载这两个 jar 包，解压后你有两种选择，第一种是使用 mvn 的 install 命令将 jar 包安装到本地仓库，另一种是直接将解压后的文件夹拷贝到 mvn 本地仓库的 com 文件夹下，比如我的本地仓库是 d:\mvn，完成后我的目录结构是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161009004.png" alt=""></p>
<h2 id="2-配置程序"><a href="#2-配置程序" class="headerlink" title="2. 配置程序"></a>2. 配置程序</h2><p>首先是一个充当配置文件作用的接口,配置了 Kafka 的各种连接参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sohu.kafkademon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KafkaProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String zkConnect = <span class="string">"10.22.10.139:2181"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String groupId = <span class="string">"group1"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic = <span class="string">"topic1"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String kafkaServerURL = <span class="string">"10.22.10.139"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> kafkaServerPort = <span class="number">9092</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> kafkaProducerBufferSize = <span class="number">64</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> connectionTimeOut = <span class="number">20000</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> reconnectInterval = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic2 = <span class="string">"topic2"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic3 = <span class="string">"topic3"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String clientId = <span class="string">"SimpleConsumerDemoClient"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Producer"><a href="#3-Producer" class="headerlink" title="3. Producer"></a>3. Producer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sohu.kafkademon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> kafka.producer.KeyedMessage;</span><br><span class="line"><span class="keyword">import</span> kafka.producer.ProducerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> kafka.javaapi.producer.Producer&lt;Integer, String&gt; producer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaProducer</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">        props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"10.22.10.139:9092"</span>);</span><br><span class="line">        producer = <span class="keyword">new</span> kafka.javaapi.producer.Producer&lt;Integer, String&gt;(<span class="keyword">new</span> ProducerConfig(props));</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> messageNo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            String messageStr = <span class="keyword">new</span> String(<span class="string">"Message_"</span> + messageNo);</span><br><span class="line">            System.out.println(<span class="string">"Send:"</span> + messageStr);</span><br><span class="line">            producer.send(<span class="keyword">new</span> KeyedMessage&lt;Integer, String&gt;(topic, messageStr));</span><br><span class="line">            messageNo++;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Consumer"><a href="#4-Consumer" class="headerlink" title="4. Consumer"></a>4. Consumer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sohu.kafkademon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</span><br><span class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(</span><br><span class="line">                createConsumerConfig());</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.zkConnect);</span><br><span class="line">        props.put(<span class="string">"group.id"</span>, KafkaProperties.groupId);</span><br><span class="line">        props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"40000"</span>);</span><br><span class="line">        props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        topicCountMap.put(topic, <span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</span><br><span class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = consumerMap.get(topic).get(<span class="number">0</span>);</span><br><span class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = stream.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"receive："</span> + <span class="keyword">new</span> String(it.next().message()));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-简单的发送接收"><a href="#5-简单的发送接收" class="headerlink" title="5. 简单的发送接收"></a>5. 简单的发送接收</h2><p>运行下面这个程序，就可以进行简单的发送接收消息了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sohu.kafkademon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        KafkaProducer producerThread = <span class="keyword">new</span> KafkaProducer(KafkaProperties.topic);</span><br><span class="line">        producerThread.start();</span><br><span class="line">        KafkaConsumer consumerThread = <span class="keyword">new</span> KafkaConsumer(KafkaProperties.topic);</span><br><span class="line">        consumerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-高级别的consumer"><a href="#6-高级别的consumer" class="headerlink" title="6. 高级别的consumer"></a>6. 高级别的consumer</h2><p>下面是比较负载的发送接收的程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sohu.kafkademon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</span><br><span class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(</span><br><span class="line">                createConsumerConfig());</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.zkConnect);</span><br><span class="line">        props.put(<span class="string">"group.id"</span>, KafkaProperties.groupId);</span><br><span class="line">        props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"40000"</span>);</span><br><span class="line">        props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        topicCountMap.put(topic, <span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</span><br><span class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = consumerMap.get(topic).get(<span class="number">0</span>);</span><br><span class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = stream.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"receive："</span> + <span class="keyword">new</span> String(it.next().message()));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、数据持久化"><a href="#四、数据持久化" class="headerlink" title="四、数据持久化"></a>四、数据持久化</h1><h2 id="1-不要畏惧文件系统"><a href="#1-不要畏惧文件系统" class="headerlink" title="1. 不要畏惧文件系统!"></a>1. 不要畏惧文件系统!</h2><p>Kafka 大量依赖文件系统去存储和缓存消息。对于硬盘有个传统的观念是硬盘总是很慢，这使很多人怀疑基于文件系统的架构能否提供优异的性能。实际上硬盘的快慢完全取决于使用它的方式。设计良好的硬盘架构可以和内存一样快。</p>
<p>在 6 块 7200 转的 SATA RAID-5 磁盘阵列的线性写速度差不多是 600MB/s，但是随即写的速度却是 100k/s，差了差不多6000倍。现代的操作系统都对次做了大量的优化，使用了 read-ahead 和 write-behind 的技巧，读取的时候成块的预读取数据，写的时候将各种微小琐碎的逻辑写入组织合并成一次较大的物理写入。对此的深入讨论可以查看这里，它们发现线性的访问磁盘，很多时候比随机的内存访问快得多。</p>
<p>为了提高性能，现代操作系统往往使用内存作为磁盘的缓存，现代操作系统乐于把所有空闲内存用作磁盘缓存，虽然这可能在缓存回收和重新分配时牺牲一些性能。所有的磁盘读写操作都会经过这个缓存，这不太可能被绕开除非直接使用 I/O。所以虽然每个程序都在自己的线程里只缓存了一份数据，但在操作系统的缓存里还有一份，这等于存了两份数据。</p>
<p><strong>另外再来讨论一下 JVM，以下两个事实是众所周知的：</strong></p>
<ul>
<li>Java对象占用空间是非常大的，差不多是要存储的数据的两倍甚至更高。</li>
<li>随着堆中数据量的增加，垃圾回收回变的越来越困难。</li>
</ul>
<p>基于以上分析，如果把数据缓存在内存里，因为需要存储两份，不得不使用两倍的内存空间，Kafka 基于 JVM，又不得不将空间再次加倍,再加上要避免 GC 带来的性能影响，在一个 32G 内存的机器上，不得不使用到 28-30G 的内存空间。并且当系统重启的时候，又必须要将数据刷到内存中（10GB 内存差不多要用10分钟），就算使用冷刷新（不是一次性刷进内存，而是在使用数据的时候没有就刷到内存）也会导致最初的时候新能非常慢。但是使用文件系统，即使系统重启了，也不需要刷新数据。使用文件系统也简化了维护数据一致性的逻辑。</p>
<p>所以与传统的将数据缓存在内存中然后刷到硬盘的设计不同，Kafka 直接将数据写到了文件系统的日志中。</p>
<h2 id="2-常量时间的操作效率"><a href="#2-常量时间的操作效率" class="headerlink" title="2. 常量时间的操作效率"></a>2. 常量时间的操作效率</h2><p>在大多数的消息系统中，数据持久化的机制往往是为每个 cosumer 提供一个 B 树或者其他的随机读写的数据结构。B 树当然是很棒的，但是也带了一些代价：比如 B 树的复杂度是 O(log N)，O(log N) 通常被认为就是常量复杂度了，但对于硬盘操作来说并非如此。磁盘进行一次搜索需要 10ms，每个硬盘在同一时间只能进行一次搜索，这样并发处理就成了问题。虽然存储系统使用缓存进行了大量优化，但是对于树结构的性能的观察结果却表明，它的性能往往随着数据的增长而线性下降，数据增长一倍，速度就会降低一倍。</p>
<p>直观的讲，对于主要用于日志处理的消息系统，数据的持久化可以简单的通过将数据追加到文件中实现，读的时候从文件中读就好了。这样做的好处是读和写都是 O(1) 的，并且读操作不会阻塞写操作和其他操作。这样带来的性能优势是很明显的，因为性能和数据的大小没有关系了。</p>
<p>既然可以使用几乎没有容量限制（相对于内存来说）的硬盘空间建立消息系统，就可以在没有性能损失的情况下提供一些一般消息系统不具备的特性。比如，一般的消息系统都是在消息被消费后立即删除，Kafka 却可以将消息保存一段时间（比如一星期），这给 consumer 提供了很好的机动性和灵活性，这点在今后的文章中会有详述。</p>
<h1 id="五、消息传输的事务定义"><a href="#五、消息传输的事务定义" class="headerlink" title="五、消息传输的事务定义"></a>五、消息传输的事务定义</h1><p>之前讨论了 consumer 和 producer 是怎么工作的，现在来讨论一下数据传输方面。数据传输的事务定义通常有以下三种级别：</p>
<ol>
<li>最多一次: 消息不会被重复发送，最多被传输一次，但也有可能一次不传输。</li>
<li>最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输。</li>
<li>精确的一次（Exactly once）: 不会漏传输也不会重复传输,每个消息都传输被一次而且仅仅被传输一次，这是大家所期望的。</li>
</ol>
<p>大多数消息系统声称可以做到 “精确的一次”，但是仔细阅读它们的的文档可以看到里面存在误导，比如没有说明当 consumer 或 producer 失败时怎么样，或者当有多个 consumer 并行时怎么样，或写入硬盘的数据丢失时又会怎么样。kafka 的做法要更先进一些。当发布消息时，Kafka 有一个 “committed” 的概念，一旦消息被提交了，只要消息被写入的分区的所在的副本 broker 是活动的，数据就不会丢失。关于副本的活动的概念，下节文档会讨论。现在假设 broker 是不会 down 的。</p>
<p>如果 producer 发布消息时发生了网络错误，但又不确定实在提交之前发生的还是提交之后发生的，这种情况虽然不常见，但是必须考虑进去，现在 Kafka 版本还没有解决这个问题，将来的版本正在努力尝试解决。</p>
<p>并不是所有的情况都需要 “精确的一次” 这样高的级别，Kafka 允许 producer 灵活的指定级别。比如 producer 可以指定必须等待消息被提交的通知，或者完全的异步发送消息而不等待任何通知，或者仅仅等待 leader 声明它拿到了消息（followers 没有必要）。</p>
<p>现在从 consumer 的方面考虑这个问题，所有的副本都有相同的日志文件和相同的 offset，consumer 维护自己消费的消息的 offset，如果 consumer 不会崩溃当然可以在内存中保存这个值，当然谁也不能保证这点。如果 consumer 崩溃了，会有另外一个 consumer 接着消费消息，它需要从一个合适的 offset 继续处理。这种情况下可以有以下选择：</p>
<ul>
<li>consumer 可以先读取消息，然后将 offset 写入日志文件中，然后再处理消息。这存在一种可能就是在存储 offset 后还没处理消息就 crash 了，新的 consumer 继续从这个 offset 处理，那么就会有些消息永远不会被处理，这就是上面说的 “最多一次”。</li>
<li>consumer 可以先读取消息，处理消息，最后记录 offset，当然如果在记录 offset 之前就 crash 了，新的 consumer 会重复的消费一些消息，这就是上面说的 “最少一次”。</li>
<li>“精确一次” 可以通过将提交分为两个阶段来解决：保存了 offset 后提交一次，消息处理成功之后再提交一次。但是还有个更简单的做法：将消息的 offset 和消息被处理后的结果保存在一起。比如用 Hadoop ETL 处理消息时，将处理后的结果和 offset 同时保存在 HDFS 中，这样就能保证消息和 offser 同时被处理了。</li>
</ul>
<h1 id="六、性能优化"><a href="#六、性能优化" class="headerlink" title="六、性能优化"></a>六、性能优化</h1><p>Kafka 在提高效率方面做了很大努力。Kafka 的一个主要使用场景是处理网站活动日志，吞吐量是非常大的，每个页面都会产生好多次写操作。读方面，假设每个消息只被消费一次，读的量的也是很大的，Kafka 也尽量使读的操作更轻量化。</p>
<p>我们之前讨论了磁盘的性能问题，线性读写的情况下影响磁盘性能问题大约有两个方面：太多的琐碎的 I/O 操作和太多的字节拷贝。I/O 问题发生在客户端和服务端之间，也发生在服务端内部的持久化的操作中。</p>
<h2 id="1-消息集（message-set）"><a href="#1-消息集（message-set）" class="headerlink" title="1. 消息集（message set）"></a>1. 消息集（message set）</h2><p>为了避免这些问题，Kafka 建立了 “消息集（message set）” 的概念，将消息组织到一起，作为处理的单位。以消息集为单位处理消息，比以单个的消息为单位处理，会提升不少性能。Producer 把消息集一块发送给服务端，而不是一条条的发送；服务端把消息集一次性的追加到日志文件中，这样减少了琐碎的 I/O 操作。consumer 也可以一次性的请求一个消息集。</p>
<p>另外一个性能优化是在字节拷贝方面。在低负载的情况下这不是问题，但是在高负载的情况下它的影响还是很大的。为了避免这个问题，Kafka 使用了标准的二进制消息格式，这个格式可以在 producer，broker 和 producer 之间共享而无需做任何改动。</p>
<h2 id="2-Zero-Copy"><a href="#2-Zero-Copy" class="headerlink" title="2. Zero Copy"></a>2. Zero Copy</h2><p>Broker 维护的消息日志仅仅是一些目录文件，消息集以固定队的格式写入到日志文件中，这个格式 producer 和 consumer 是共享的，这使得 Kafka 可以一个很重要的点进行优化：消息在网络上的传递。现代的 unix 操作系统提供了高性能的将数据从页面缓存发送到 socket 的系统函数，在 linux 中，这个函数是 sendfile。</p>
<p>为了更好的理解 sendfile 的好处，我们先来看下一般将数据从文件发送到 socket 的数据流向：</p>
<ol>
<li>操作系统把数据从文件拷贝内核中的页缓存中</li>
<li>应用程序从页缓存从把数据拷贝自己的内存缓存中</li>
<li>应用程序将数据写入到内核中 socket 缓存中操作系统把数据从 socket 缓存中拷贝到网卡接口缓存，从这里发送到网络上。</li>
</ol>
<p>这显然是低效率的，有 4 次拷贝和 2 次系统调用。Sendfile 通过直接将数据从页面缓存发送网卡接口缓存，避免了重复拷贝，大大的优化了性能。</p>
<p>在一个多 consumers 的场景里，数据仅仅被拷贝到页面缓存一次而不是每次消费消息的时候都重复的进行拷贝。这使得消息以近乎网络带宽的速率发送出去。这样在磁盘层面你几乎看不到任何的读操作，因为数据都是从页面缓存中直接发送到网络上去了。</p>
<p><a href="https://www.ibm.com/developerworks/linux/library/j-zerocopy/" target="_blank" rel="noopener">这篇文章</a>详细介绍了 sendfile 和 zero-copy 技术在 Java 方面的应用。</p>
<h2 id="3-数据压缩"><a href="#3-数据压缩" class="headerlink" title="3. 数据压缩"></a>3. 数据压缩</h2><p>很多时候，性能的瓶颈并非 CPU 或者硬盘而是网络带宽，对于需要在数据中心之间传送大量数据的应用更是如此。当然用户可以在没有 Kafka 支持的情况下各自压缩自己的消息，但是这将导致较低的压缩率，因为相比于将消息单独压缩，将大量文件压缩在一起才能起到最好的压缩效果。</p>
<p>Kafka 采用了端到端的压缩：因为有 “消息集” 的概念，客户端的消息可以一起被压缩后送到服务端，并以压缩后的格式写入日志文件，以压缩的格式发送到 consumer，消息从 producer 发出到 consumer 拿到都被是压缩的，只有在 consumer 使用的时候才被解压缩，所以叫做 “端到端的压缩”。</p>
<p>Kafka 支持 GZIP 和 Snappy 压缩协议。更详细的内容可以查看<a href="https://cwiki.apache.org/confluence/display/KAFKA/Compression" target="_blank" rel="noopener">这里</a>。</p>
<h1 id="七、Producer-和-Consumer"><a href="#七、Producer-和-Consumer" class="headerlink" title="七、Producer 和 Consumer"></a>七、Producer 和 Consumer</h1><h2 id="1-Kafka-Producer-消息发送"><a href="#1-Kafka-Producer-消息发送" class="headerlink" title="1. Kafka Producer 消息发送"></a>1. Kafka Producer 消息发送</h2><p>producer 直接将数据发送到 broker 的 leader（主节点），不需要在多个节点进行分发。为了帮助 producer 做到这点，所有的 Kafka 节点都可以及时的告知：哪些节点是活动的，目标 topic 目标分区的 leader 在哪。这样 producer 就可以直接将消息发送到目的地了。</p>
<p>客户端控制消息将被分发到哪个分区。可以通过负载均衡随机的选择，或者使用分区函数。Kafka 允许用户实现分区函数，指定分区的 key，将消息 hash 到不同的分区上（当然有需要的话，也可以覆盖这个分区函数自己实现逻辑）。比如如果你指定的 key 是 user id，那么同一个用户发送的消息都被发送到同一个分区上。经过分区之后，consumer 就可以有目的的消费某个分区的消息。</p>
<h2 id="2-异步发送"><a href="#2-异步发送" class="headerlink" title="2. 异步发送"></a>2. 异步发送</h2><p>批量发送可以很有效的提高发送效率。Kafka producer 的异步发送模式允许进行批量发送，先将消息缓存在内存中，然后一次请求批量发送出去。这个策略可以配置的，比如可以指定缓存的消息达到某个量的时候就发出去，或者缓存了固定的时间后就发送出去（比如 100 条消息就发送，或者每 5 秒发送一次）。这种策略将大大减少服务端的 I/O 次数。</p>
<p>既然缓存是在 producer 端进行的，那么当 producer 崩溃时，这些消息就会丢失。Kafka 0.8.1 的异步发送模式还不支持回调，就不能在发送出错时进行处理。Kafka 0.9 可能会增加这样的回调函数。见 <a href="https://cwiki.apache.org/confluence/display/KAFKA/Client+Rewrite#ClientRewrite-ProposedProducerAPI" target="_blank" rel="noopener">Proposed Producer API</a>。</p>
<h2 id="3-Kafka-Consumer"><a href="#3-Kafka-Consumer" class="headerlink" title="3. Kafka Consumer"></a>3. Kafka Consumer</h2><p>Kafa consumer 消费消息时，向broker发出 <code>fetch</code> 请求去消费特定分区的消息。consumer 指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息。customer 拥有了 offset 的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的。</p>
<h2 id="4-推还是拉？"><a href="#4-推还是拉？" class="headerlink" title="4. 推还是拉？"></a>4. 推还是拉？</h2><p>Kafka 最初考虑的问题是，customer 应该从 brokes 拉取消息还是 brokers 将消息推送到 consumer，也就是 pull 还 push。在这方面，Kafka 遵循了一种大部分消息系统共同的传统的设计：producer 将消息推送到 broker，consumer 从 broker 拉取消息。</p>
<p>一些消息系统比如 Scribe 和 Apache Flume 采用了push 模式，将消息推送到下游的 consumer。这样做有好处也有坏处：由 broker 决定消息推送的速率，对于不同消费速率的 consumer 就不太好处理了。消息系统都致力于让 consumer 以最大的速率最快速的消费消息，但不幸的是，push 模式下，当 broker 推送的速率远大于 consumer 消费的速率时，consumer 恐怕就要崩溃了。最终 Kafka 还是选取了传统的 pull 模式。</p>
<p>Pull 模式的另外一个好处是 consumer 可以自主决定是否批量的从 broker 拉取数据。Push 模式必须在不知道下游 consumer 消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免 consumer 崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull 模式下，consumer 就可以根据自己的消费能力去决定这些策略。</p>
<p>Pull 有个缺点是，如果 broker 没有可供消费的消息，将导致 consumer 不断在循环中轮询，直到新消息到 t 达。为了避免这点，Kafka 有个参数可以让 consumer 阻塞知道新消息到达（当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）。</p>
<h2 id="5-消费状态跟踪"><a href="#5-消费状态跟踪" class="headerlink" title="5. 消费状态跟踪"></a>5. 消费状态跟踪</h2><p>对消费消息状态的记录也是很重要的。</p>
<p>大部分消息系统在 broker 端的维护消息被消费的记录：一个消息被分发到 consumer 后 broker 就马上进行标记或者等待 customer  的通知后进行标记。这样也可以在消息在消费后立马就删除以减少空间占用。</p>
<p><strong>但是这样会不会有什么问题呢</strong>？如果一条消息发送出去之后就立即被标记为消费过的，一旦 consumer 处理消息时失败了（比如程序崩溃）消息就丢失了。为了解决这个问题，很多消息系统提供了另外一个个功能：当消息被发送出去之后仅仅被标记为已发送状态，当接到 consumer 已经消费成功的通知后才标记为已被消费的状态。这虽然解决了消息丢失的问题，但产生了新问题，首先如果 consumer 处理消息成功了但是向 broker 发送响应时失败了，这条消息将被消费两次。第二个问题时，broker 必须维护每条消息的状态，并且每次都要先锁住消息然后更改状态然后释放锁。这样麻烦又来了，且不说要维护大量的状态数据，比如如果消息发送出去但没有收到消费成功的通知，这条消息将一直处于被锁定的状态，<br>Kafka 采用了不同的策略。Topic 被分成了若干分区，每个分区在同一时间只被一个 consumer 消费。这意味着每个分区被消费的消息在日志中的位置仅仅是一个简单的整数：offset。这样就很容易标记每个分区消费状态就很容易了，仅仅需要一个整数而已。这样消费状态的跟踪就很简单了。</p>
<p>这带来了另外一个好处：consumer 可以把 offset 调成一个较老的值，去重新消费老的消息。这对传统的消息系统来说看起来有些不可思议，但确实是非常有用的，谁规定了一条消息只能被消费一次呢？consumer发现解析数据的程序有 bug，在修改 bug 后再来解析一次消息，看起来是很合理的额呀！</p>
<h2 id="6-离线处理消息"><a href="#6-离线处理消息" class="headerlink" title="6. 离线处理消息"></a>6. 离线处理消息</h2><p>高级的数据持久化允许 consumer 每个隔一段时间批量的将数据加载到线下系统中比如 <a href="http://www.linuxidc.com/topicnews.aspx?tid=13" target="_blank" rel="noopener">Hadoop</a> 或者数据仓库。这种情况下，Hadoop 可以将加载任务分拆，拆成每个 broker 或每个 topic 或每个分区一个加载任务。Hadoop 具有任务管理功能，当一个任务失败了就可以重启而不用担心数据被重新加载，只要从上次加载的位置继续加载消息就可以了。</p>
<h1 id="八、主从同步"><a href="#八、主从同步" class="headerlink" title="八、主从同步"></a>八、主从同步</h1><p>Kafka 允许 topic 的分区拥有若干副本，这个数量是可以配置的，你可以为每个 topic 配置副本的数量。Kafka 会自动在每个个副本上备份数据，所以当一个节点 down 掉时数据依然是可用的。</p>
<p>Kafka 的副本功能不是必须的，你可以配置只有一个副本，这样其实就相当于只有一份数据。</p>
<p>创建副本的单位是 topic 的分区，每个分区都有一个 leader 和零或多个 followers。所有的读写操作都由 leader 处理，一般分区的数量都比 broker 的数量多的多，各分区的 leader 均匀的分布在 brokers 中。所有的 followers 都复制 leader 的日志，日志中的消息和顺序都和 leader 中的一致。flowers 向普通的 consumer 那样从 leader 那里拉取消息并保存在自己的日志文件中。</p>
<p>许多分布式的消息系统自动的处理失败的请求，它们对一个节点是否存活着（alive）有着清晰的定义。<strong>Kafka 判断一个节点是否活着有两个条件：</strong></p>
<ol>
<li>节点必须可以维护和 ZooKeeper 的连接，Zookeeper 通过心跳机制检查每个节点的连接。</li>
<li>如果节点是个 follower，他必须能及时的同步 leader 的写操作，延时不能太久。</li>
</ol>
<p>符合以上条件的节点准确的说应该是“同步中的（in sync）”，而不是模糊的说是 “活着的” 或是 “失败的”。Leader 会追踪所有 “同步中” 的节点，一旦一个 down 掉了，或是卡住了，或是延时太久，leader 就会把它移除。至于延时多久算是 “太久”，是由参数 <code>replica.lag.max.messages</code> 决定的，怎样算是卡住了，怎是由参数 <code>replica.lag.time.max.ms</code> 决定的。</p>
<p>只有当消息被所有的副本加入到日志中时，才算是 “committed”，只有 committed 的消息才会发送给 consumer，这样就不用担心一旦 leader down 掉了消息会丢失。Producer 也可以选择是否等待消息被提交的通知，这个是由参数 <code>request.required.acks</code> 决定的。</p>
<p>Kafka 保证只要有一个 “同步中” 的节点，“committed” 的消息就不会丢失。</p>
<h2 id="1-Leader的选择"><a href="#1-Leader的选择" class="headerlink" title="1. Leader的选择"></a>1. Leader的选择</h2><p>Kafka 的核心是日志文件，日志文件在集群中的同步是分布式数据系统最基础的要素。</p>
<p>如果leaders永远不会down的话我们就不需要followers了！一旦leader down掉了，需要在followers中选择一个新的leader.但是followers本身有可能延时太久或者crash，所以必须选择高质量的follower作为leader.必须保证，一旦一个消息被提交了，但是leader down掉了，新选出的leader必须可以提供这条消息。大部分的分布式系统采用了多数投票法则选择新的leader,对于多数投票法则，就是根据所有副本节点的状况动态的选择最适合的作为leader.Kafka并不是使用这种方法。</p>
<p>Kafaka动态维护了一个同步状态的副本的集合（a set of in-sync replicas），简称ISR，在这个集合中的节点都是和leader保持高度一致的，任何一条消息必须被这个集合中的每个节点读取并追加到日志中了，才回通知外部这个消息已经被提交了。因此这个集合中的任何一个节点随时都可以被选为leader.ISR在ZooKeeper中维护。ISR中有f+1个节点，就可以允许在f个节点down掉的情况下不会丢失消息并正常提供服。ISR的成员是动态的，如果一个节点被淘汰了，当它重新达到“同步中”的状态时，他可以重新加入ISR.这种leader的选择方式是非常快速的，适合kafka的应用场景。</p>
<p>一个邪恶的想法：如果所有节点都down掉了怎么办？Kafka对于数据不会丢失的保证，是基于至少一个节点是存活的，一旦所有节点都down了，这个就不能保证了。<br>实际应用中，当所有的副本都down掉时，必须及时作出反应。可以有以下两种选择:</p>
<ol>
<li>等待ISR中的任何一个节点恢复并担任leader。</li>
<li>选择所有节点中（不只是ISR）第一个恢复的节点作为leader.</li>
</ol>
<p>这是一个在可用性和连续性之间的权衡。如果等待ISR中的节点恢复，一旦ISR中的节点起不起来或者数据都是了，那集群就永远恢复不了了。如果等待ISR意外的节点恢复，这个节点的数据就会被作为线上数据，有可能和真实的数据有所出入，因为有些数据它可能还没同步到。Kafka目前选择了第二种策略，在未来的版本中将使这个策略的选择可配置，可以根据场景灵活的选择。<br>这种窘境不只Kafka会遇到，几乎所有的分布式数据系统都会遇到。</p>
<h2 id="2-副本管理"><a href="#2-副本管理" class="headerlink" title="2. 副本管理"></a>2. 副本管理</h2><p>以上仅仅以一个topic一个分区为例子进行了讨论，但实际上一个Kafka将会管理成千上万的topic分区.Kafka尽量的使所有分区均匀的分布到集群所有的节点上而不是集中在某些节点上，另外主从关系也尽量均衡这样每个几点都会担任一定比例的分区的leader。</p>
<p>优化leader的选择过程也是很重要的，它决定了系统发生故障时的空窗期有多久。Kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.</p>
<h1 id="九、客户端API"><a href="#九、客户端API" class="headerlink" title="九、客户端API"></a>九、客户端API</h1><h2 id="1-Kafka-Producer-APIs"><a href="#1-Kafka-Producer-APIs" class="headerlink" title="1. Kafka Producer APIs"></a>1. Kafka Producer APIs</h2><p>Kafka Procuder API 有两种，它们分别是：<code>kafka.producer.SyncProducer</code> 和 <code>kafka.producer.async.AsyncProducer</code>。它们都实现了同一个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 将消息发送到指定分区 */</span></span><br><span class="line">    <span class="function">publicvoid <span class="title">send</span><span class="params">(kafka.javaapi.producer.ProducerData&lt;K,V&gt; producerData)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 批量发送一批消息 */</span></span><br><span class="line">    <span class="function">publicvoid <span class="title">send</span><span class="params">(java.util.List&lt;kafka.javaapi.producer.ProducerData&lt;K,V&gt;&gt; producerData)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭producer */</span></span><br><span class="line">    <span class="function">publicvoid <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Producer API提供了以下功能：</p>
<ol>
<li>可以将多个消息缓存到本地队列里，然后异步的批量发送到broker，可以通过参数producer.type=async做到。缓存的大小可以通过一些参数指定：queue.time和batch.size。一个后台线程（(kafka.producer.async.ProducerSendThread）从队列中取出数据并让kafka.producer.EventHandler将消息发送到broker，也可以通过参数event.handler定制handler，在producer端处理数据的不同的阶段注册处理器，比如可以对这一过程进行日志追踪，或进行一些监控。只需实现kafka.producer.async.CallbackHandler接口，并在callback.handler中配置。</li>
<li>自己编写Encoder来序列化消息，只需实现下面这个接口。默认的Encoder是kafka.serializer.DefaultEncoder。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Encoder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">toMessage</span><span class="params">(T data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>提供了基于Zookeeper的broker自动感知能力，可以通过参数zk.connect实现。如果不使用Zookeeper，也可以使用broker.list参数指定一个静态的brokers列表，这样消息将被随机的发送到一个broker上，一旦选中的broker失败了，消息发送也就失败了。</li>
<li>通过分区函数kafka.producer.Partitioner类对消息分区。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Partitioner</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T key, <span class="keyword">int</span> numPartitions)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>分区函数有两个参数：key和可用的分区数量，从分区列表中选择一个分区并返回id。默认的分区策略是hash(key)%numPartitions.如果key是null,就随机的选择一个。可以通过参数partitioner.class定制分区函数。</li>
</ol>
<h2 id="2-KafKa-Consumer-APIs"><a href="#2-KafKa-Consumer-APIs" class="headerlink" title="2. KafKa Consumer APIs"></a>2. KafKa Consumer APIs</h2><p>Consumer API有两个级别。低级别的和一个指定的broker保持连接，并在接收完消息后关闭连接，这个级别是无状态的，每次读取消息都带着offset。</p>
<p>高级别的API隐藏了和brokers连接的细节，在不必关心服务端架构的情况下和服务端通信。还可以自己维护消费状态，并可以通过一些条件指定订阅特定的topic,比如白名单黑名单或者正则表达式。</p>
<h3 id="2-1-低级别的API"><a href="#2-1-低级别的API" class="headerlink" title="2.1 低级别的API"></a>2.1 低级别的API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*向一个broker发送读取请求并得到消息集 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBufferMessageSet <span class="title">fetch</span><span class="params">(FetchRequest request)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*向一个broker发送读取请求并得到一个相应集 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultiFetchResponse <span class="title">multifetch</span><span class="params">(List&lt;FetchRequest&gt; fetches)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到指定时间之前的offsets</span></span><br><span class="line"><span class="comment">    * 返回值是offsets列表，以倒序排序</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> time: 时间，毫秒,</span></span><br><span class="line"><span class="comment">    * 如果指定为OffsetRequest$.MODULE$.LATIEST_TIME(), 得到最新的offset.</span></span><br><span class="line"><span class="comment">    * 如果指定为OffsetRequest$.MODULE$.EARLIEST_TIME(),得到最老的offset.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    publiclong[] getOffsetsBefore(String topic, <span class="keyword">int</span> partition, <span class="keyword">long</span> time, <span class="keyword">int</span> maxNumOffsets);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>低级别的API是高级别API实现的基础，也是为了一些对维持消费状态有特殊需求的场景，比如Hadoop consumer这样的离线consumer。</p>
<h3 id="2-2-高级别的API"><a href="#2-2-高级别的API" class="headerlink" title="2.2 高级别的API"></a>2.2 高级别的API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建连接 */</span></span><br><span class="line">ConsumerConnector connector = Consumer.create(consumerConfig);</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ConsumerConnector</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这个方法可以得到一个流的列表，每个流都是MessageAndMetadata的迭代，</span></span><br><span class="line"><span class="comment">* 通过MessageAndMetadata可以拿到消息和其他的元数据（目前之后topic）</span></span><br><span class="line"><span class="comment">* Input: a map of &lt;topic, #streams&gt;</span></span><br><span class="line"><span class="comment">* Output: a map of &lt;topic, list of message streams&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,List&lt;KafkaStream&gt;&gt; createMessageStreams(Map&lt;String,Int&gt; topicCountMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 你也可以得到一个流的列表，它包含了符合TopicFiler的消息的迭代，</span></span><br><span class="line"><span class="comment">* 一个TopicFilter是一个封装了白名单或黑名单的正则表达式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;KafkaStream&gt; <span class="title">createMessageStreamsByFilter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    TopicFilter topicFilter, <span class="keyword">int</span> numStreams)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 提交目前消费到的offset */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">commitOffsets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">/* 关闭连接 */</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">shutdown</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这个API围绕着由KafkaStream实现的迭代器展开，每个流代表一系列从一个或多个分区多和broker上汇聚来的消息，每个流由一个线程处理，所以客户端可以在创建的时候通过参数指定想要几个流。一个流是多个分区多个broker的合并，但是每个分区的消息只会流向一个流。</p>
<p>每调用一次createMessageStreams都会将consumer注册到topic上，这样consumer和brokers之间的负载均衡就会进行调整。API鼓励每次调用创建更多的topic流以减少这种调整。createMessageStreamsByFilter方法注册监听可以感知新的符合filter的tipic。</p>
<h1 id="十、消息和日志"><a href="#十、消息和日志" class="headerlink" title="十、消息和日志"></a>十、消息和日志</h1><p>消息由一个固定长度的头部和可变长度的字节数组组成。头部包含了一个版本号和CRC32校验码。</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 具有N个字节的消息的格式如下</span><br><span class="line"></span><br><span class="line">* 如果版本号是<span class="number">0</span></span><br><span class="line">* <span class="number">1</span>. <span class="number">1</span>个字节的 <span class="string">"magic"</span> 标记</span><br><span class="line">* <span class="number">2</span>. <span class="number">4</span>个字节的<span class="type">CRC32</span>校验码</span><br><span class="line">* <span class="number">3</span>. N - <span class="number">5</span>个字节的具体信息</span><br><span class="line">*</span><br><span class="line">* 如果版本号是<span class="number">1</span></span><br><span class="line">* <span class="number">1</span>. <span class="number">1</span>个字节的 <span class="string">"magic"</span> 标记</span><br><span class="line">* <span class="number">2</span>.<span class="number">1</span>个字节的参数允许标注一些附加的信息比如是否压缩了，解码类型等</span><br><span class="line">* <span class="number">3</span>.<span class="number">4</span>个字节的<span class="type">CRC32</span>校验码</span><br><span class="line">* <span class="number">4</span>. N - <span class="number">6</span> 个字节的具体信息</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h2 id="1-日志"><a href="#1-日志" class="headerlink" title="1. 日志"></a>1. 日志</h2><p>一个叫做“my_topic”且有两个分区的的topic,它的日志有两个文件夹组成，my_topic_0和my_topic_1,每个文件夹里放着具体的数据文件，每个数据文件都是一系列的日志实体，每个日志实体有一个4个字节的整数N标注消息的长度，后边跟着N个字节的消息。每个消息都可以由一个64位的整数offset标注，offset标注了这条消息在发送到这个分区的消息流中的起始位置。每个日志文件的名称都是这个文件第一条日志的offset.所以第一个日志文件的名字就是00000000000.kafka.所以每相邻的两个文件名字的差就是一个数字S,S差不多就是配置文件中指定的日志文件的最大容量。</p>
<p>消息的格式都由一个统一的接口维护，所以消息可以在producer,broker和consumer之间无缝的传递。存储在硬盘上的消息格式如下所示：</p>
<ol>
<li>消息长度: 4 bytes (value: 1+4+n)</li>
<li>版本号: 1 byte</li>
<li>CRC校验码: 4 bytes</li>
<li>具体的消息: n bytes</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20161009005.png" alt=""></p>
<h2 id="2-写操作"><a href="#2-写操作" class="headerlink" title="2. 写操作"></a>2. 写操作</h2><p>消息被不断的追加到最后一个日志的末尾，当日志的大小达到一个指定的值时就会产生一个新的文件。对于写操作有两个参数，一个规定了消息的数量达到这个值时必须将数据刷新到硬盘上，另外一个规定了刷新到硬盘的时间间隔，这对数据的持久性是个保证，在系统崩溃的时候只会丢失一定数量的消息或者一个时间段的消息。</p>
<h2 id="3-读操作"><a href="#3-读操作" class="headerlink" title="3. 读操作"></a>3. 读操作</h2><p>需要两个参数：一个64位的offset和一个S字节的最大读取量。S通常比单个消息的大小要大，但在一些个别消息比较大的情况下，S会小于单个消息的大小。这种情况下读操作会不断重试，每次重试都会将读取量加倍，直到读取到一个完整的消息。可以配置单个消息的最大值，这样服务器就会拒绝大小超过这个值的消息。也可以给客户端指定一个尝试读取的最大上限，避免为了读到一个完整的消息而无限次的重试。</p>
<p>在实际执行读取操纵时，首先需要定位数据所在的日志文件，然后根据offset计算出在这个日志中的offset(前面的的offset是整个分区的offset),然后在这个offset的位置进行读取。定位操作是由二分查找法完成的，Kafka在内存中为每个文件维护了offset的范围。</p>
<p>下面是发送给 consumer 的结果的格式：</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">MessageSetSend</span> (fetch <span class="literal">result</span>)</span><br><span class="line"></span><br><span class="line">total length     : <span class="number">4</span> bytes</span><br><span class="line">error code       : <span class="number">2</span> bytes</span><br><span class="line">message <span class="number">1</span>        : x bytes</span><br><span class="line">...</span><br><span class="line">message n        : x bytes</span><br><span class="line"><span class="type">MultiMessageSetSend</span> (multiFetch <span class="literal">result</span>)</span><br><span class="line"></span><br><span class="line">total length       : <span class="number">4</span> bytes</span><br><span class="line">error code         : <span class="number">2</span> bytes</span><br><span class="line">messageSetSend <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">messageSetSend n</span><br></pre></td></tr></table></figure>

<h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a>4. 删除</h2><p>日志管理器允许定制删除策略。目前的策略是删除修改时间在N天之前的日志（按时间删除），也可以使用另外一个策略：保留最后的N GB数据的策略(按大小删除)。为了避免在删除时阻塞读操作，采用了copy-on-write形式的实现，删除操作进行时，读取操作的二分查找功能实际是在一个静态的快照副本上进行的，这类似于Java的CopyOnWriteArrayList。</p>
<h2 id="5-可靠性保证"><a href="#5-可靠性保证" class="headerlink" title="5. 可靠性保证"></a>5. 可靠性保证</h2><p>日志文件有一个可配置的参数M，缓存超过这个数量的消息将被强行刷新到硬盘。一个日志矫正线程将循环检查最新的日志文件中的消息确认每个消息都是合法的。合法的标准为：所有文件的大小的和最大的offset小于日志文件的大小，并且消息的CRC32校验码与存储在消息实体中的校验码一致。如果在某个offset发现不合法的消息，从这个offset到下一个合法的offset之间的内容将被移除。</p>
<p>有两种情况必须考虑：</p>
<ol>
<li>当发生崩溃时有些数据块未能写入。</li>
<li>写入了一些空白数据块。第二种情况的原因是，对于每个文件，操作系统都有一个inode（inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象,包括文件、目录、大小、设备文件、socket、管道, 等等），但无法保证更新inode和写入数据的顺序，当inode保存的大小信息被更新了，但写入数据时发生了崩溃，就产生了空白数据块。CRC校验码可以检查这些块并移除，当然因为崩溃而未写入的数据块也就丢失了。</li>
</ol>
<hr>
<p><a href="http://blog.csdn.net/honglei915/article/category/2383433" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>Java开发技术</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
</search>
